[
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} {VALUE0}",
    [
      {
        "question": "Show names for all stadiums except for stadiums having a concert in year 2014 .",
        "concise pattern": "WHERE",
        "template": "show {COLUMN0} for all {TABLE0} except for {TABLE0} having a {TABLE1} in {COLUMN2} 2014 .",
        "name dict": {
          "{TABLE0}": "stadium",
          "{COLUMN1}": "stadium_id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "year",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "concert"
        },
        "query": "SELECT stadium.Name FROM stadium EXCEPT SELECT stadium.Name FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 'terminal'"
      },
      {
        "question": "what are all the addresses including line 1 and line 2 ?",
        "concise pattern": "WHERE",
        "template": "what are all the {TABLE0} including {COLUMN0} {VALUE1} and {COLUMN0} {VALUE2} ?",
        "name dict": {
          "{VALUE2}": "2",
          "{COLUMN0}": "line_1",
          "{TABLE0}": "addresses",
          "{VALUE1}": "1",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "line_2",
          "{VALUE3}": "0"
        },
        "query": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_2 = 'terminal'"
      },
      {
        "question": "What is the TV Channel of TV series with Episode `` A Love of a Lifetime '' ? List the TV Channel 's series name .",
        "concise pattern": "WHERE",
        "template": "what is the tv {COLUMN2} of tv {COLUMN0} with {COLUMN3} `` a love of a lifetime '' ? list the tv {COLUMN2} 's {COLUMN0} name .",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{COLUMN1}": "id",
          "{COLUMN0}": "series_name",
          "{COLUMN2}": "channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "episode",
          "{TABLE1}": "tv series"
        },
        "query": "SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'terminal'"
      },
      {
        "question": "List all singer names in concerts in year 2014 .",
        "concise pattern": "WHERE",
        "template": "list all {COLUMN1} {COLUMN0} in {TABLE1} in {COLUMN3} 2014 .",
        "name dict": {
          "{TABLE0}": "singer",
          "{COLUMN1}": "singer_id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "concert_id",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "year",
          "{TABLE1}": "concert",
          "{TABLE2}": "singer in concert"
        },
        "query": "SELECT singer.Name FROM singer JOIN concert JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID AND singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 'terminal'"
      },
      {
        "question": "What is the version number and template type code for the template with version number later than 5 ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN1} number and {COLUMN0} type code for the {COLUMN0} with {COLUMN1} number later than 5 ?",
        "name dict": {
          "{COLUMN1}": "version_number",
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 'terminal'"
      },
      {
        "question": "What are the death and injury situations caused by the ship with tonnage 't ' ?",
        "concise pattern": "WHERE",
        "template": "what are the {TABLE1} and injury situations {COLUMN2} by the {TABLE0} with {COLUMN3} 't ' ?",
        "name dict": {
          "{TABLE0}": "ship",
          "{COLUMN1}": "id",
          "{COLUMN0}": "killed",
          "{COLUMN2}": "caused_by_ship_id",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "tonnage",
          "{TABLE1}": "death"
        },
        "query": "SELECT *, death.killed FROM ship JOIN death ON ship.id = death.caused_by_ship_id WHERE ship.tonnage = 'terminal'"
      },
      {
        "question": "What are the different ids and names of the battles that lost any 'Brig ' type shipes ?",
        "concise pattern": "WHERE",
        "template": "what are the different {COLUMN1} and {COLUMN0} of the {TABLE0} that {COLUMN2} any 'brig ' type shipes ?",
        "name dict": {
          "{TABLE0}": "battle",
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "lost_in_battle",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "ship_type",
          "{TABLE1}": "ship"
        },
        "query": "SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'terminal'"
      },
      {
        "question": "What is the TV Channel that shows the cartoon `` The Rise of the Blue Beetle ! '' ? List the TV Channel 's series name .",
        "concise pattern": "WHERE",
        "template": "what is the tv {COLUMN2} that shows the {TABLE1} `` the rise of the blue beetle ! '' ? list the tv {COLUMN2} 's {COLUMN0} name .",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{COLUMN1}": "id",
          "{COLUMN0}": "series_name",
          "{COLUMN2}": "channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "title",
          "{TABLE1}": "cartoon"
        },
        "query": "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'terminal'"
      },
      {
        "question": "List the title of all Cartoons showed on TV Channel with series name `` Sky Radio '' .",
        "concise pattern": "WHERE",
        "template": "list the {COLUMN0} of all {TABLE1} showed on tv {COLUMN2} with {COLUMN3} name `` sky radio '' .",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{COLUMN1}": "id",
          "{COLUMN0}": "title",
          "{COLUMN2}": "channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "series_name",
          "{TABLE1}": "cartoon"
        },
        "query": "SELECT Cartoon.Title FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE TV_Channel.series_name = 'terminal'"
      },
      {
        "question": "List the Episode of all TV series showed on TV Channel with series name `` Sky Radio '' .",
        "concise pattern": "WHERE",
        "template": "list the {COLUMN0} of all tv {COLUMN3} showed on tv {COLUMN2} with {COLUMN3} name `` sky radio '' .",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{COLUMN1}": "id",
          "{COLUMN0}": "episode",
          "{COLUMN2}": "channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "series_name",
          "{TABLE1}": "tv series"
        },
        "query": "SELECT TV_series.Episode FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = 'terminal'"
      },
      {
        "question": "which countries ' tv channels are playing some cartoon written by Todd Casey ?",
        "concise pattern": "WHERE",
        "template": "which {COLUMN0} ' tv {COLUMN2} are playing some {TABLE1} {COLUMN3} by todd casey ?",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{COLUMN1}": "id",
          "{COLUMN0}": "country",
          "{COLUMN2}": "channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "written_by",
          "{TABLE1}": "cartoon"
        },
        "query": "SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'terminal'"
      },
      {
        "question": "which countries ' tv channels are not playing any cartoon written by Todd Casey ?",
        "concise pattern": "WHERE",
        "template": "which {COLUMN0} ' tv {COLUMN2} are not playing any {TABLE1} {COLUMN3} by todd casey ?",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{COLUMN1}": "id",
          "{COLUMN0}": "country",
          "{COLUMN2}": "channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "written_by",
          "{TABLE1}": "cartoon"
        },
        "query": "SELECT TV_Channel.Country FROM TV_Channel EXCEPT SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'terminal'"
      },
      {
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones .",
        "concise pattern": "WHERE",
        "template": "find the {COLUMN0} of tv {COLUMN1} that do not play any {TABLE1} {COLUMN2} by ben jones .",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{COLUMN1}": "channel",
          "{COLUMN0}": "id",
          "{COLUMN2}": "directed_by",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "cartoon"
        },
        "query": "SELECT TV_Channel.id FROM TV_Channel EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'terminal'"
      },
      {
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} of the tv {COLUMN1} that do not have any {TABLE1} {COLUMN2} by ben jones ?",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{COLUMN1}": "channel",
          "{COLUMN0}": "id",
          "{COLUMN2}": "directed_by",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "cartoon"
        },
        "query": "SELECT TV_Channel.id FROM TV_Channel EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'terminal'"
      },
      {
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones .",
        "concise pattern": "WHERE",
        "template": "find the {COLUMN0} option of the tv {COLUMN2} that do not have any {TABLE1} {COLUMN3} by ben jones .",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{COLUMN1}": "id",
          "{COLUMN0}": "package_option",
          "{COLUMN2}": "channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "directed_by",
          "{TABLE1}": "cartoon"
        },
        "query": "SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'terminal'"
      },
      {
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} options of all tv {COLUMN2} that are not playing any {TABLE1} {COLUMN3} by ben jones ?",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{COLUMN1}": "id",
          "{COLUMN0}": "package_option",
          "{COLUMN2}": "channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "directed_by",
          "{TABLE1}": "cartoon"
        },
        "query": "SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'terminal'"
      },
      {
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008 ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} of {TABLE0} who have conducted {COLUMN1} founded after the {COLUMN3} 2008 ?",
        "name dict": {
          "{TABLE0}": "conductor",
          "{COLUMN1}": "orchestra",
          "{COLUMN0}": "name",
          "{COLUMN2}": "conductor_id",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "year_of_founded"
        },
        "query": "SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded = 'terminal'"
      },
      {
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "concise pattern": "WHERE",
        "template": "which {TABLE0} have not {COLUMN2} their owner more than 1000 for treatment ? list the {COLUMN1} {COLUMN0} .",
        "name dict": {
          "{TABLE0}": "dogs",
          "{COLUMN1}": "dog_id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "cost_of_treatment",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Dogs.name FROM Dogs EXCEPT SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > 'terminal'"
      },
      {
        "question": "Which dogs are owned by someone who lives in Virginia ? List the owner 's first name and the dog 's name .",
        "concise pattern": "WHERE",
        "template": "which {TABLE1} are owned by someone who lives in virginia ? list the {COLUMN1} 's first {COLUMN0} and the dog 's {COLUMN0} .",
        "name dict": {
          "{TABLE0}": "owners",
          "{COLUMN1}": "owner_id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "state",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "dogs"
        },
        "query": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'terminal'"
      },
      {
        "question": "Find the first names of owners living in Virginia and the names of dogs they own .",
        "concise pattern": "WHERE",
        "template": "find the first {COLUMN0} of {TABLE0} living in virginia and the {COLUMN0} of {TABLE1} they own .",
        "name dict": {
          "{TABLE0}": "owners",
          "{COLUMN1}": "owner_id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "state",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "dogs"
        },
        "query": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'terminal'"
      },
      {
        "question": "List the dog name , age and weight of the dogs who have been abandoned ? 1 stands for yes , and 0 stands for no .",
        "concise pattern": "WHERE",
        "template": "list the dog name , age and {COLUMN0} of the {TABLE0} who have been {COLUMN1} ? 1 stands for yes , and {VALUE1} stands for no .",
        "name dict": {
          "{COLUMN1}": "abandoned_yn",
          "{COLUMN0}": "weight",
          "{TABLE0}": "dogs",
          "{VALUE1}": "0",
          "{OP0}": "LIKE",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn LIKE 'terminal'"
      },
      {
        "question": "What are the dog name , age and weight of the dogs that were abandoned ? Note that 1 stands for yes , and 0 stands for no in the tables .",
        "concise pattern": "WHERE",
        "template": "what are the dog name , age and {COLUMN0} of the {TABLE0} that were {COLUMN1} ? note that 1 stands for yes , and {VALUE1} stands for no in the tables .",
        "name dict": {
          "{COLUMN1}": "abandoned_yn",
          "{COLUMN0}": "weight",
          "{TABLE0}": "dogs",
          "{VALUE1}": "0",
          "{OP0}": "LIKE",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn LIKE 'terminal'"
      },
      {
        "question": "Show distinct names of singers that have songs with sales more than 300000 .",
        "concise pattern": "WHERE",
        "template": "show distinct {COLUMN0} of {TABLE0} that have {TABLE1} with {COLUMN2} more than 300000 .",
        "name dict": {
          "{TABLE0}": "singer",
          "{COLUMN1}": "singer_id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "sales",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "song"
        },
        "query": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 'terminal'"
      },
      {
        "question": "What is the average , minimum , and maximum age for all French singers ?",
        "concise pattern": "WHERE",
        "template": "what {COLUMN1} the average , minimum , and maximum {COLUMN0} for all french {TABLE0} ?",
        "name dict": {
          "{OP0}": "=",
          "{AGG1}": "MIN",
          "{AGG2}": "MIN",
          "{COLUMN1}": "is_male",
          "{COLUMN0}": "age",
          "{TABLE0}": "singer",
          "{VALUE1}": "0",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "MAX"
        },
        "query": "SELECT Max(singer.Age), Min(singer.Age), Min(singer.Age) FROM singer WHERE singer.Is_male = 'terminal'"
      },
      {
        "question": "What are all distinct countries where singers above age 20 are from ?",
        "concise pattern": "WHERE",
        "template": "what are all distinct {COLUMN0} where {TABLE0} above {COLUMN1} 20 are from ?",
        "name dict": {
          "{COLUMN1}": "age",
          "{COLUMN0}": "country",
          "{TABLE0}": "singer",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 'terminal'"
      },
      {
        "question": "What are the different countries with singers above age 20 ?",
        "concise pattern": "WHERE",
        "template": "what are the different {COLUMN0} with {TABLE0} above {COLUMN1} 20 ?",
        "name dict": {
          "{COLUMN1}": "age",
          "{COLUMN0}": "country",
          "{TABLE0}": "singer",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 'terminal'"
      },
      {
        "question": "Find the id and weight of all pets whose age is older than 1 .",
        "concise pattern": "WHERE",
        "template": "find the id and {COLUMN0} of all {TABLE2} whose {COLUMN3} is older than 1 .",
        "name dict": {
          "{TABLE0}": "student",
          "{COLUMN1}": "stuid",
          "{COLUMN0}": "weight",
          "{COLUMN2}": "petid",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "age",
          "{TABLE1}": "has pet",
          "{TABLE2}": "pets"
        },
        "query": "SELECT Pets.PetID, Pets.weight FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID AND Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 'terminal'"
      },
      {
        "question": "Find the cities that have more than one employee under age 30 .",
        "concise pattern": "WHERE",
        "template": "find the {COLUMN0} that have more than one {TABLE0} under {COLUMN1} 30 .",
        "name dict": {
          "{COLUMN1}": "age",
          "{COLUMN0}": "city",
          "{TABLE0}": "employee",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT employee.City FROM employee WHERE employee.Age > 'terminal'"
      },
      {
        "question": "What is the document name and template id for document with description with the letter 'w ' in it ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN1} name and {COLUMN0} id for {COLUMN1} with description with the letter 'w ' in it ?",
        "name dict": {
          "{COLUMN1}": "document_description",
          "{COLUMN0}": "template_id",
          "{TABLE0}": "documents",
          "{VALUE1}": "0",
          "{OP0}": "LIKE",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE 'terminal'"
      },
      {
        "question": "What is the document id , template id and description for document named `` Robbin CV '' ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN2} id , {COLUMN1} id and description for {COLUMN2} named `` robbin cv '' ?",
        "name dict": {
          "{TABLE0}": "templates",
          "{COLUMN1}": "template_id",
          "{COLUMN0}": "document_description",
          "{COLUMN2}": "document_name",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "documents"
        },
        "query": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'terminal'"
      },
      {
        "question": "Return the document id , template id , and description for the document with the name Robbin CV .",
        "concise pattern": "WHERE",
        "template": "return the {COLUMN2} id , {COLUMN1} id , and description for the {COLUMN2} with the name robbin cv .",
        "name dict": {
          "{TABLE0}": "templates",
          "{COLUMN1}": "template_id",
          "{COLUMN0}": "document_description",
          "{COLUMN2}": "document_name",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "documents"
        },
        "query": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'terminal'"
      },
      {
        "question": "What is the template type code of the template used by document with the name `` Data base '' ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} type code of the {COLUMN0} used by {COLUMN2} with the name `` data base '' ?",
        "name dict": {
          "{TABLE0}": "templates",
          "{COLUMN1}": "template_id",
          "{COLUMN0}": "template_type_code",
          "{COLUMN2}": "document_name",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "documents"
        },
        "query": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'terminal'"
      },
      {
        "question": "Return the template type code of the template that is used by a document named Data base .",
        "concise pattern": "WHERE",
        "template": "return the {COLUMN0} type code of the {COLUMN0} that is used by a {COLUMN2} named data base .",
        "name dict": {
          "{TABLE0}": "templates",
          "{COLUMN1}": "template_id",
          "{COLUMN0}": "template_type_code",
          "{COLUMN2}": "document_name",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "documents"
        },
        "query": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'terminal'"
      },
      {
        "question": "Show all document names using templates with template type code BK .",
        "concise pattern": "WHERE",
        "template": "show all {COLUMN0} names using {TABLE0} with {COLUMN2} type code bk .",
        "name dict": {
          "{TABLE0}": "templates",
          "{COLUMN1}": "template_id",
          "{COLUMN0}": "document_name",
          "{COLUMN2}": "template_type_code",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "documents"
        },
        "query": "SELECT Documents.Document_Name FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Template_Type_Code = 'terminal'"
      },
      {
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "concise pattern": "WHERE",
        "template": "list the {COLUMN0} of {TABLE0} whose {COLUMN1} is not `` little lever urban district '' .",
        "name dict": {
          "{COLUMN1}": "hometown",
          "{COLUMN0}": "name",
          "{TABLE0}": "teacher",
          "{VALUE1}": "0",
          "{OP0}": "!=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != 'terminal'"
      },
      {
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} of the {TABLE0} whose {COLUMN1} is not `` little lever urban district '' ?",
        "name dict": {
          "{COLUMN1}": "hometown",
          "{COLUMN0}": "name",
          "{TABLE0}": "teacher",
          "{VALUE1}": "0",
          "{OP0}": "!=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != 'terminal'"
      },
      {
        "question": "Show the name of the teacher for the math course .",
        "concise pattern": "WHERE",
        "template": "show the {COLUMN0} of the {COLUMN3} for the math {COLUMN2} .",
        "name dict": {
          "{TABLE0}": "teacher",
          "{COLUMN1}": "course",
          "{COLUMN0}": "name",
          "{COLUMN2}": "course_id",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "teacher_id",
          "{TABLE1}": "course arrange"
        },
        "query": "SELECT teacher.Name FROM course JOIN teacher JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID AND course_arrange.Teacher_ID = teacher.Teacher_ID AND course.Course_ID = course_arrange.Course_ID WHERE course.Course = 'terminal'"
      },
      {
        "question": "What are the opening year and staff number of the museum named Plaza Museum ?",
        "concise pattern": "WHERE",
        "template": "what are the opening year and staff number of the {TABLE0} {COLUMN1} plaza {TABLE0} ?",
        "name dict": {
          "{COLUMN1}": "name",
          "{COLUMN0}": "num_of_staff",
          "{TABLE0}": "museum",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT museum.Open_Year, museum.Num_of_Staff FROM museum WHERE museum.Name = 'terminal'"
      },
      {
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010 .",
        "concise pattern": "WHERE",
        "template": "find the {COLUMN0} of {TABLE0} which have more staff than the minimum staff number of all {TABLE0} opened after 2010 .",
        "name dict": {
          "{COLUMN1}": "num_of_staff",
          "{COLUMN0}": "name",
          "{TABLE0}": "museum",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT museum.Name FROM museum WHERE museum.Num_of_Staff > 'terminal'"
      },
      {
        "question": "List the first name and birth date of all players from the country with code USA .",
        "concise pattern": "WHERE",
        "template": "list the first name and {COLUMN0} date of all {TABLE0} from the {COLUMN1} with code usa .",
        "name dict": {
          "{COLUMN1}": "country_code",
          "{COLUMN0}": "birth_date",
          "{TABLE0}": "players",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'terminal'"
      },
      {
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril '",
        "concise pattern": "WHERE",
        "template": "what are the name and {COLUMN0} of the {TABLE0} when the {COLUMN1} commander is not 'boril '",
        "name dict": {
          "{COLUMN1}": "bulgarian_commander",
          "{COLUMN0}": "result",
          "{TABLE0}": "battle",
          "{VALUE1}": "0",
          "{OP0}": "!=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander != 'terminal'"
      },
      {
        "question": "What is the series name of the TV Channel that shows the cartoon `` The Rise of the Blue Beetle '' ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} name of the tv {COLUMN2} that shows the {TABLE1} `` the rise of the blue beetle '' ?",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{COLUMN1}": "id",
          "{COLUMN0}": "series_name",
          "{COLUMN2}": "channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "title",
          "{TABLE1}": "cartoon"
        },
        "query": "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'terminal'"
      },
      {
        "question": "What is the title of all the cartools that are on the TV Channel with the series name `` Sky Radio '' ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} of all the cartools that are on the tv {COLUMN2} with the {COLUMN3} name `` sky radio '' ?",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{COLUMN1}": "id",
          "{COLUMN0}": "title",
          "{COLUMN2}": "channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "series_name",
          "{TABLE1}": "cartoon"
        },
        "query": "SELECT Cartoon.Title FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE TV_Channel.series_name = 'terminal'"
      },
      {
        "question": "What are the countries that are not playing cartoons written by Todd Casey ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} that are not playing {TABLE1} {COLUMN3} by todd casey ?",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{COLUMN1}": "id",
          "{COLUMN0}": "country",
          "{COLUMN2}": "channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "written_by",
          "{TABLE1}": "cartoon"
        },
        "query": "SELECT TV_Channel.Country FROM TV_Channel EXCEPT SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'terminal'"
      },
      {
        "question": "Show names of people whose nationality is not `` Russia '' .",
        "concise pattern": "WHERE",
        "template": "show {COLUMN0} of {TABLE0} whose {COLUMN1} is not `` russia '' .",
        "name dict": {
          "{COLUMN1}": "nationality",
          "{COLUMN0}": "name",
          "{TABLE0}": "people",
          "{VALUE1}": "0",
          "{OP0}": "!=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT people.Name FROM people WHERE people.Nationality != 'terminal'"
      },
      {
        "question": "What is last date created of votes from the state 'CA ' ?",
        "concise pattern": "WHERE",
        "template": "what is last date {COLUMN0} of {TABLE0} from the {COLUMN1} 'ca ' ?",
        "name dict": {
          "{COLUMN1}": "state",
          "{COLUMN0}": "created",
          "{TABLE0}": "votes",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT VOTES.created FROM VOTES WHERE VOTES.state = 'terminal'"
      },
      {
        "question": "What are the create dates , states , and phone numbers of the votes that were for the contestant named 'Tabatha Gehling ' ?",
        "concise pattern": "WHERE",
        "template": "what are the create dates , states , and {COLUMN0} numbers of the {TABLE1} that were for the {COLUMN2} named 'tabatha gehling ' ?",
        "name dict": {
          "{TABLE0}": "contestants",
          "{COLUMN1}": "contestant_number",
          "{COLUMN0}": "phone_number",
          "{COLUMN2}": "contestant_name",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "votes"
        },
        "query": "SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE CONTESTANTS.contestant_name = 'terminal'"
      },
      {
        "question": "What are the country codes of countries where people use languages other than English ?",
        "concise pattern": "WHERE",
        "template": "what are the {TABLE0} {COLUMN0} of countries where people use {COLUMN2} other than english ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "countrycode",
          "{COLUMN0}": "code",
          "{COLUMN2}": "language",
          "{VALUE1}": "0",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language < 'terminal'"
      },
      {
        "question": "What are the names of conductors whose nationalities are not `` USA '' ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} of {TABLE0} whose {COLUMN1} are not `` usa '' ?",
        "name dict": {
          "{COLUMN1}": "nationality",
          "{COLUMN0}": "name",
          "{TABLE0}": "conductor",
          "{VALUE1}": "0",
          "{OP0}": "!=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != 'terminal'"
      },
      {
        "question": "Return the names of conductors that do not have the nationality `` USA '' .",
        "concise pattern": "WHERE",
        "template": "return the {COLUMN0} of {TABLE0} that do not have the {COLUMN1} `` usa '' .",
        "name dict": {
          "{COLUMN1}": "nationality",
          "{COLUMN0}": "name",
          "{TABLE0}": "conductor",
          "{VALUE1}": "0",
          "{OP0}": "!=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != 'terminal'"
      },
      {
        "question": "What are the maximum and minimum share of performances whose type is not `` Live final '' .",
        "concise pattern": "WHERE",
        "template": "what are the maximum and minimum {COLUMN0} of {TABLE0} whose {COLUMN1} is not `` live final '' .",
        "name dict": {
          "{OP0}": "!=",
          "{AGG1}": "MIN",
          "{COLUMN1}": "type",
          "{COLUMN0}": "share",
          "{TABLE0}": "performance",
          "{VALUE1}": "0",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "MAX"
        },
        "query": "SELECT Max(performance.Share), Min(performance.Share) FROM performance WHERE performance.Type != 'terminal'"
      },
      {
        "question": "Return the maximum and minimum shares for performances that do not have the type `` Live final '' .",
        "concise pattern": "WHERE",
        "template": "return the maximum and minimum {COLUMN0} for {TABLE0} that do not have the {COLUMN1} `` live final '' .",
        "name dict": {
          "{OP0}": "!=",
          "{AGG1}": "MIN",
          "{COLUMN1}": "type",
          "{COLUMN0}": "share",
          "{TABLE0}": "performance",
          "{VALUE1}": "0",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "MAX"
        },
        "query": "SELECT Max(performance.Share), Min(performance.Share) FROM performance WHERE performance.Type != 'terminal'"
      },
      {
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008 .",
        "concise pattern": "WHERE",
        "template": "please show the {COLUMN0} of the {COLUMN2} that has conducted {COLUMN1} founded after 2008 .",
        "name dict": {
          "{TABLE0}": "conductor",
          "{COLUMN1}": "orchestra",
          "{COLUMN0}": "name",
          "{COLUMN2}": "conductor_id",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "year_of_founded"
        },
        "query": "SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 'terminal'"
      },
      {
        "question": "Return the names of friends of the high school student Kyle .",
        "concise pattern": "WHERE",
        "template": "return the {COLUMN0} of {TABLE1} of the high school {COLUMN2} kyle .",
        "name dict": {
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "student_id",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = 'terminal'"
      },
      {
        "question": "Which owners live in the state whose name contains the substring 'North ' ? List his first name , last name and email .",
        "concise pattern": "WHERE",
        "template": "which {TABLE0} live in the {COLUMN1} whose name contains the substring 'north ' ? list his first name , last name and {COLUMN0} .",
        "name dict": {
          "{COLUMN1}": "state",
          "{COLUMN0}": "email_address",
          "{TABLE0}": "owners",
          "{VALUE1}": "0",
          "{OP0}": "LIKE",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE 'terminal'"
      },
      {
        "question": "Return the first name , last name and email of the owners living in a state whose name contains the substring 'North ' .",
        "concise pattern": "WHERE",
        "template": "return the first name , last name and {COLUMN0} of the {TABLE0} living in a {COLUMN1} whose name contains the substring 'north ' .",
        "name dict": {
          "{COLUMN1}": "state",
          "{COLUMN0}": "email_address",
          "{TABLE0}": "owners",
          "{VALUE1}": "0",
          "{OP0}": "LIKE",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE 'terminal'"
      },
      {
        "question": "List the name of singers whose citizenship is not `` France '' .",
        "concise pattern": "WHERE",
        "template": "list the {COLUMN0} of {TABLE0} whose {COLUMN1} is not `` france '' .",
        "name dict": {
          "{COLUMN1}": "citizenship",
          "{COLUMN0}": "name",
          "{TABLE0}": "singer",
          "{VALUE1}": "0",
          "{OP0}": "!=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT singer.Name FROM singer WHERE singer.Citizenship != 'terminal'"
      },
      {
        "question": "what are the different names of the singers that have sales more than 300000 ?",
        "concise pattern": "WHERE",
        "template": "what are the different {COLUMN0} of the {TABLE0} that have {COLUMN2} more than 300000 ?",
        "name dict": {
          "{TABLE0}": "singer",
          "{COLUMN1}": "singer_id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "sales",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "song"
        },
        "query": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 'terminal'"
      },
      {
        "question": "What is the average , minimum , and maximum age of all singers from France ?",
        "concise pattern": "WHERE",
        "template": "what is the average , minimum , and maximum {COLUMN0} of all {TABLE0} from france ?",
        "name dict": {
          "{OP0}": "=",
          "{AGG1}": "MIN",
          "{AGG2}": "MIN",
          "{COLUMN1}": "country",
          "{COLUMN0}": "age",
          "{TABLE0}": "singer",
          "{VALUE1}": "0",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(singer.Age), Min(singer.Age), Min(singer.Age) FROM singer WHERE singer.Country = 'terminal'"
      },
      {
        "question": "What are the names of the singers who performed in a concert in 2014 ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} of the {TABLE0} who performed in a concert in 2014 ?",
        "name dict": {
          "{TABLE0}": "singer",
          "{COLUMN1}": "singer_id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "age",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "singer in concert"
        },
        "query": "SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer.Age = 'terminal'"
      },
      {
        "question": "what is the name and nation of the singer who have a song having 'Hey ' in its name ?",
        "concise pattern": "WHERE",
        "template": "what is the name and nation of the {TABLE0} who have a {COLUMN0} having 'hey ' in its name ?",
        "name dict": {
          "{COLUMN1}": "song_name",
          "{COLUMN0}": "song_release_year",
          "{TABLE0}": "singer",
          "{VALUE1}": "0",
          "{OP0}": "LIKE",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT singer.Name, singer.Song_release_year FROM singer WHERE singer.Song_Name LIKE 'terminal'"
      },
      {
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey ' in its title ?",
        "concise pattern": "WHERE",
        "template": "what is the name and country of origin of every {TABLE0} who has a {COLUMN1} with the word 'hey ' in its title ?",
        "name dict": {
          "{COLUMN1}": "song_name",
          "{COLUMN0}": "country",
          "{TABLE0}": "singer",
          "{VALUE1}": "0",
          "{OP0}": "LIKE",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE 'terminal'"
      },
      {
        "question": "Find the number of pets whose weight is heavier than 10 .",
        "concise pattern": "WHERE",
        "template": "find the number of {TABLE0} whose {COLUMN0} is heavier than 10 .",
        "name dict": {
          "{COLUMN0}": "weight",
          "{TABLE0}": "pets",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Pets WHERE Pets.weight > 'terminal'"
      },
      {
        "question": "How many pets have a greater weight than 10 ?",
        "concise pattern": "WHERE",
        "template": "how many {TABLE0} have a greater {COLUMN0} than 10 ?",
        "name dict": {
          "{COLUMN0}": "weight",
          "{TABLE0}": "pets",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Pets WHERE Pets.weight > 'terminal'"
      },
      {
        "question": "How many pets are owned by students that have an age greater than 20 ?",
        "concise pattern": "WHERE",
        "template": "how many pets are owned by {TABLE0} that have an {COLUMN0} greater than 20 ?",
        "name dict": {
          "{COLUMN0}": "age",
          "{TABLE0}": "student",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Student WHERE Student.Age > 'terminal'"
      },
      {
        "question": "What are the ids of the students who do not own cats as pets ?",
        "concise pattern": "WHERE",
        "template": "what are the ids of the {TABLE0} who do not own cats as {TABLE2} ?",
        "name dict": {
          "{TABLE0}": "student",
          "{OP0}": "=",
          "{TABLE1}": "has pet",
          "{TABLE2}": "pets",
          "{COLUMN1}": "petid",
          "{COLUMN0}": "stuid",
          "{COLUMN2}": "pettype",
          "{VALUE1}": "0",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Student.StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal'"
      },
      {
        "question": "Find the name of the makers that produced some cars in the year of 1970 ?",
        "concise pattern": "WHERE",
        "template": "find the name of the {COLUMN0} that produced some cars in the {COLUMN4} of 1970 ?",
        "name dict": {
          "{OP0}": "=",
          "{TABLE3}": "cars data",
          "{COLUMN3}": "makeid",
          "{TABLE1}": "model list",
          "{TABLE2}": "car names",
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "maker",
          "{TABLE0}": "car makers",
          "{VALUE1}": "0",
          "{COLUMN4}": "year",
          "{COLUMN1}": "id",
          "{COLUMN2}": "model"
        },
        "query": "SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 'terminal'"
      },
      {
        "question": "What is the accelerate of the car make amc hornet sportabout ( sw ) ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} of the car {COLUMN3} amc hornet sportabout ( sw ) ?",
        "name dict": {
          "{TABLE0}": "car names",
          "{COLUMN1}": "makeid",
          "{COLUMN0}": "accelerate",
          "{COLUMN2}": "id",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "make",
          "{TABLE1}": "cars data"
        },
        "query": "SELECT cars_data.Accelerate FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_names.Make = 'terminal'"
      },
      {
        "question": "How much does the car accelerate that makes amc hornet sportabout ( sw ) ?",
        "concise pattern": "WHERE",
        "template": "how much does the car {COLUMN0} that {COLUMN3} amc hornet sportabout ( sw ) ?",
        "name dict": {
          "{TABLE0}": "car names",
          "{COLUMN1}": "makeid",
          "{COLUMN0}": "accelerate",
          "{COLUMN2}": "id",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "make",
          "{TABLE1}": "cars data"
        },
        "query": "SELECT cars_data.Accelerate FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_names.Make = 'terminal'"
      },
      {
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders ?",
        "concise pattern": "WHERE",
        "template": "what is the average miles per gallon ( {COLUMN0} ) of the cars with 4 {COLUMN1} ?",
        "name dict": {
          "{COLUMN1}": "cylinders",
          "{COLUMN0}": "mpg",
          "{TABLE0}": "cars data",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 'terminal'"
      },
      {
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "concise pattern": "WHERE",
        "template": "what is the smallest {COLUMN0} of the car produced with 8 {COLUMN1} on 1974 ?",
        "name dict": {
          "{COLUMN1}": "cylinders",
          "{COLUMN0}": "weight",
          "{TABLE0}": "cars data",
          "{VALUE1}": "0",
          "{OP0}": "LIKE",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "MIN"
        },
        "query": "SELECT Min(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders LIKE 'terminal'"
      },
      {
        "question": "What is the minimu weight of the car with 8 cylinders produced in 1974 ?",
        "concise pattern": "WHERE",
        "template": "what is the minimu {COLUMN0} of the car with 8 {COLUMN1} produced in 1974 ?",
        "name dict": {
          "{COLUMN1}": "cylinders",
          "{COLUMN0}": "weight",
          "{TABLE0}": "cars data",
          "{VALUE1}": "0",
          "{OP0}": "LIKE",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "MIN"
        },
        "query": "SELECT Min(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders LIKE 'terminal'"
      },
      {
        "question": "What is the average edispl of the cars of model volvo ?",
        "concise pattern": "WHERE",
        "template": "what is the average {COLUMN0} of the cars of {COLUMN3} volvo ?",
        "name dict": {
          "{TABLE0}": "car names",
          "{COLUMN1}": "makeid",
          "{COLUMN0}": "edispl",
          "{COLUMN2}": "id",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "model",
          "{AGG0}": "AVG",
          "{TABLE1}": "cars data"
        },
        "query": "SELECT Avg(cars_data.Edispl) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_names.Model = 'terminal'"
      },
      {
        "question": "How many car models were produced by the maker with full name American Motor Company ?",
        "concise pattern": "WHERE",
        "template": "how many car {COLUMN0} were produced by the {COLUMN2} with full name american motor company ?",
        "name dict": {
          "{TABLE0}": "car makers",
          "{COLUMN1}": "id",
          "{COLUMN0}": "model",
          "{COLUMN2}": "maker",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "fullname",
          "{AGG0}": "COUNT",
          "{TABLE1}": "model list"
        },
        "query": "SELECT Count(DISTINCT model_list.Model) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'terminal'"
      },
      {
        "question": "What is the number of car models created by the car maker American Motor Company ?",
        "concise pattern": "WHERE",
        "template": "what is the number of car {COLUMN0} created by the car {COLUMN2} american motor company ?",
        "name dict": {
          "{TABLE0}": "car makers",
          "{COLUMN1}": "id",
          "{COLUMN0}": "model",
          "{COLUMN2}": "maker",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "fullname",
          "{AGG0}": "COUNT",
          "{TABLE1}": "model list"
        },
        "query": "SELECT Count(DISTINCT model_list.Model) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'terminal'"
      },
      {
        "question": "What is the abbreviation of Airline `` JetBlue Airways '' ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} of {COLUMN1} `` jetblue airways '' ?",
        "name dict": {
          "{COLUMN1}": "airline",
          "{COLUMN0}": "abbreviation",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = 'terminal'"
      },
      {
        "question": "What are the airline names and abbreviations for airlines in the USA ?",
        "concise pattern": "WHERE",
        "template": "what are the airline names and {COLUMN0} for {TABLE0} in the usa ?",
        "name dict": {
          "{COLUMN1}": "country",
          "{COLUMN0}": "abbreviation",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = 'terminal'"
      },
      {
        "question": "Which airline has abbreviation 'UAL ' ?",
        "concise pattern": "WHERE",
        "template": "which {COLUMN0} has {COLUMN1} 'ual ' ?",
        "name dict": {
          "{COLUMN1}": "abbreviation",
          "{COLUMN0}": "airline",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT airlines.Airline FROM airlines WHERE airlines.Abbreviation = 'terminal'"
      },
      {
        "question": "Give the airline with abbreviation 'UAL ' .",
        "concise pattern": "WHERE",
        "template": "give the {COLUMN0} with {COLUMN1} 'ual ' .",
        "name dict": {
          "{COLUMN1}": "abbreviation",
          "{COLUMN0}": "airline",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT airlines.Airline FROM airlines WHERE airlines.Abbreviation = 'terminal'"
      },
      {
        "question": "How many flights does airline 'JetBlue Airways ' have ?",
        "concise pattern": "WHERE",
        "template": "how many {TABLE1} does {COLUMN0} 'jetblue airways ' have ?",
        "name dict": {
          "{COLUMN0}": "airline",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT Count(*) FROM airlines JOIN flights WHERE airlines.Airline = 'terminal'"
      },
      {
        "question": "How many 'United Airlines ' flights go to Airport 'ASY ' ?",
        "concise pattern": "WHERE",
        "template": "how many 'united {TABLE0} ' {TABLE1} go to airport 'asy ' ?",
        "name dict": {
          "{COLUMN0}": "sourceairport",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT Count(*) FROM airlines JOIN flights WHERE flights.SourceAirport = 'terminal'"
      },
      {
        "question": "How many 'United Airlines ' flights depart from Airport 'AHD ' ?",
        "concise pattern": "WHERE",
        "template": "how many 'united {TABLE0} ' {TABLE1} depart from airport 'ahd ' ?",
        "name dict": {
          "{COLUMN0}": "destairport",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT Count(*) FROM airlines JOIN flights WHERE flights.DestAirport = 'terminal'"
      },
      {
        "question": "What are flight numbers of Airline `` United Airlines '' ?",
        "concise pattern": "WHERE",
        "template": "what are flight numbers of {COLUMN1} `` united {COLUMN1} '' ?",
        "name dict": {
          "{COLUMN1}": "airline",
          "{COLUMN0}": "flightno",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "flights"
        },
        "query": "SELECT flights.FlightNo FROM airlines JOIN flights WHERE airlines.Airline = 'terminal'"
      },
      {
        "question": "Which flight numbers correspond to United Airlines flights ?",
        "concise pattern": "WHERE",
        "template": "which flight numbers correspond to united {COLUMN1} {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "airline",
          "{COLUMN0}": "flightno",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "flights"
        },
        "query": "SELECT flights.FlightNo FROM airlines JOIN flights WHERE airlines.Airline = 'terminal'"
      },
      {
        "question": "Return the names and template ids for documents that contain the letter w in their description .",
        "concise pattern": "WHERE",
        "template": "return the names and {COLUMN0} ids for {TABLE0} that contain the letter w in their description .",
        "name dict": {
          "{COLUMN1}": "document_description",
          "{COLUMN0}": "template_id",
          "{TABLE0}": "documents",
          "{VALUE1}": "0",
          "{OP0}": "LIKE",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE 'terminal'"
      },
      {
        "question": "How many documents are using the template with type code 'PPT ' ?",
        "concise pattern": "WHERE",
        "template": "how many {TABLE1} are using the {COLUMN0} with type code 'ppt ' ?",
        "name dict": {
          "{COLUMN1}": "template_type_code",
          "{COLUMN0}": "template_id",
          "{TABLE0}": "templates",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "documents"
        },
        "query": "SELECT Count(*) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Template_Type_Code = 'terminal'"
      },
      {
        "question": "Count the number of documents that use the PPT template type .",
        "concise pattern": "WHERE",
        "template": "count the number of {TABLE1} that use the ppt {COLUMN0} type .",
        "name dict": {
          "{COLUMN1}": "template_type_code",
          "{COLUMN0}": "template_id",
          "{TABLE0}": "templates",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "documents"
        },
        "query": "SELECT Count(*) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Template_Type_Code = 'terminal'"
      },
      {
        "question": "How many templates have template type code CV ?",
        "concise pattern": "WHERE",
        "template": "how many {TABLE0} have {COLUMN0} type code cv ?",
        "name dict": {
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Templates WHERE Templates.Template_Type_Code = 'terminal'"
      },
      {
        "question": "What are the names of documents that use templates with the code BK ?",
        "concise pattern": "WHERE",
        "template": "what are the names of {TABLE1} that use {TABLE0} with the code bk ?",
        "name dict": {
          "{TABLE0}": "templates",
          "{COLUMN1}": "template_id",
          "{COLUMN0}": "document_name",
          "{COLUMN2}": "template_type_code",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "documents"
        },
        "query": "SELECT Documents.Document_Name FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Template_Type_Code = 'terminal'"
      },
      {
        "question": "What is the template type descriptions for template type code `` AD '' .",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} type descriptions for {COLUMN0} type code `` ad '' .",
        "name dict": {
          "{COLUMN1}": "template_type_code",
          "{COLUMN0}": "template_type_description",
          "{TABLE0}": "reference template types",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = 'terminal'"
      },
      {
        "question": "Return the template type description of the template type with the code AD .",
        "concise pattern": "WHERE",
        "template": "return the {COLUMN0} type description of the {COLUMN0} type with the code ad .",
        "name dict": {
          "{COLUMN1}": "template_type_code",
          "{COLUMN0}": "template_type_description",
          "{TABLE0}": "reference template types",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = 'terminal'"
      },
      {
        "question": "What is the template type code for template type description `` Book '' .",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} type code for {COLUMN0} type description `` book '' .",
        "name dict": {
          "{COLUMN1}": "template_type_description",
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "reference template types",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = 'terminal'"
      },
      {
        "question": "What are the template ids with template type description `` Presentation '' .",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN2} ids with {COLUMN2} type description `` presentation '' .",
        "name dict": {
          "{TABLE0}": "reference template types",
          "{COLUMN1}": "template_type_code",
          "{COLUMN0}": "template_id",
          "{COLUMN2}": "template_type_description",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "templates"
        },
        "query": "SELECT Templates.Template_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'terminal'"
      },
      {
        "question": "How many paragraphs for the document with name 'Summer Show ' ?",
        "concise pattern": "WHERE",
        "template": "how many {TABLE1} for the {COLUMN0} with name 'summer show ' ?",
        "name dict": {
          "{COLUMN1}": "document_name",
          "{COLUMN0}": "document_id",
          "{TABLE0}": "documents",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "paragraphs"
        },
        "query": "SELECT Count(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'terminal'"
      },
      {
        "question": "Count the number of paragraphs in the document named 'Summer Show ' .",
        "concise pattern": "WHERE",
        "template": "count the number of {TABLE1} in the {COLUMN0} named 'summer show ' .",
        "name dict": {
          "{COLUMN1}": "document_name",
          "{COLUMN0}": "document_id",
          "{TABLE0}": "documents",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "paragraphs"
        },
        "query": "SELECT Count(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'terminal'"
      },
      {
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "concise pattern": "WHERE",
        "template": "show {COLUMN0} details for {COLUMN0} with text 'korea ' .",
        "name dict": {
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "paragraph_text",
          "{TABLE0}": "paragraphs",
          "{VALUE1}": "0",
          "{OP0}": "LIKE"
        },
        "query": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE 'terminal'"
      },
      {
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY ' .",
        "concise pattern": "WHERE",
        "template": "show all {COLUMN0} ids and texts for the {COLUMN2} with name 'welcome to ny ' .",
        "name dict": {
          "{TABLE0}": "documents",
          "{COLUMN1}": "document_id",
          "{COLUMN0}": "paragraph_text",
          "{COLUMN2}": "document_name",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "paragraphs"
        },
        "query": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'terminal'"
      },
      {
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY ' ?",
        "concise pattern": "WHERE",
        "template": "what are the ids and texts of {TABLE1} in the {COLUMN2} titled 'welcome to ny ' ?",
        "name dict": {
          "{TABLE0}": "documents",
          "{COLUMN1}": "document_id",
          "{COLUMN0}": "paragraph_text",
          "{COLUMN2}": "document_name",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "paragraphs"
        },
        "query": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'terminal'"
      },
      {
        "question": "Show all paragraph texts for the document `` Customer reviews '' .",
        "concise pattern": "WHERE",
        "template": "show all {COLUMN0} texts for the {COLUMN2} `` customer reviews '' .",
        "name dict": {
          "{TABLE0}": "documents",
          "{COLUMN1}": "document_id",
          "{COLUMN0}": "paragraph_text",
          "{COLUMN2}": "document_name",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "paragraphs"
        },
        "query": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'terminal'"
      },
      {
        "question": "What are the paragraph texts for the document with the name 'Customer reviews ' ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} texts for the {COLUMN2} with the name 'customer reviews ' ?",
        "name dict": {
          "{TABLE0}": "documents",
          "{COLUMN1}": "document_id",
          "{COLUMN0}": "paragraph_text",
          "{COLUMN2}": "document_name",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "paragraphs"
        },
        "query": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'terminal'"
      },
      {
        "question": "What are the names of the people who teach math courses ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} of the people who teach math {COLUMN1} ?",
        "name dict": {
          "{TABLE0}": "teacher",
          "{COLUMN1}": "course",
          "{COLUMN0}": "name",
          "{COLUMN2}": "course_id",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "teacher_id",
          "{TABLE1}": "course arrange"
        },
        "query": "SELECT teacher.Name FROM course JOIN teacher JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID AND course_arrange.Teacher_ID = teacher.Teacher_ID AND course.Course_ID = course_arrange.Course_ID WHERE course.Course = 'terminal'"
      },
      {
        "question": "Find the average number of staff working for the museums that were open before 2009 .",
        "concise pattern": "WHERE",
        "template": "find the average number of staff working for the {TABLE0} that were {COLUMN1} before 2009 .",
        "name dict": {
          "{COLUMN1}": "open_year",
          "{COLUMN0}": "num_of_staff",
          "{TABLE0}": "museum",
          "{VALUE1}": "0",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(museum.Num_of_Staff) FROM museum WHERE museum.Open_Year < 'terminal'"
      },
      {
        "question": "What are the first names and birth dates of players from the USA ?",
        "concise pattern": "WHERE",
        "template": "what are the first names and {COLUMN0} dates of {TABLE0} from the usa ?",
        "name dict": {
          "{COLUMN1}": "country_code",
          "{COLUMN0}": "birth_date",
          "{TABLE0}": "players",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'terminal'"
      },
      {
        "question": "What are the notes of the death events which has substring 'East ' ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} of the {TABLE0} events which has substring 'east ' ?",
        "name dict": {
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "note",
          "{TABLE0}": "death",
          "{VALUE1}": "0",
          "{OP0}": "LIKE"
        },
        "query": "SELECT death.note FROM death WHERE death.note LIKE 'terminal'"
      },
      {
        "question": "Who is enrolled in a Bachelor degree program ? List the first name , middle name , last name .",
        "concise pattern": "WHERE",
        "template": "who is enrolled in a bachelor {COLUMN3} program ? list the first name , middle name , {COLUMN0} name .",
        "name dict": {
          "{TABLE0}": "degree programs",
          "{COLUMN1}": "degree_program_id",
          "{COLUMN0}": "last_name",
          "{COLUMN2}": "student_id",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "degree_summary_name",
          "{TABLE1}": "students",
          "{TABLE2}": "student enrolment"
        },
        "query": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Degree_Programs JOIN Students JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id AND Student_Enrolment.student_id = Students.student_id WHERE Degree_Programs.degree_summary_name = 'terminal'"
      },
      {
        "question": "What is the first name of the student whose permanent address is different from his or her current one ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} name of the student whose {COLUMN1} address is different from his or her current one ?",
        "name dict": {
          "{COLUMN1}": "permanent_address_id",
          "{COLUMN0}": "first_name",
          "{TABLE0}": "students",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Students.first_name FROM Students WHERE Students.permanent_address_id = 'terminal'"
      },
      {
        "question": "List all cartoon directed by `` Ben Jones '' .",
        "concise pattern": "WHERE",
        "template": "list all {TABLE0} {COLUMN0} by `` ben jones '' .",
        "name dict": {
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "directed_by",
          "{TABLE0}": "cartoon",
          "{VALUE1}": "0",
          "{OP0}": "="
        },
        "query": "SELECT Cartoon.Directed_by FROM Cartoon WHERE Cartoon.Directed_by = 'terminal'"
      },
      {
        "question": "What are the names of all cartoons directed by Ben Jones ?",
        "concise pattern": "WHERE",
        "template": "what are the names of all {TABLE0} {COLUMN1} by ben jones ?",
        "name dict": {
          "{COLUMN1}": "directed_by",
          "{COLUMN0}": "title",
          "{TABLE0}": "cartoon",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'terminal'"
      },
      {
        "question": "How many cartoons were written by `` Joseph Kuhr '' ?",
        "concise pattern": "WHERE",
        "template": "how many {TABLE0} were {COLUMN0} by `` joseph kuhr '' ?",
        "name dict": {
          "{COLUMN0}": "written_by",
          "{TABLE0}": "cartoon",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Cartoon WHERE Cartoon.Written_by = 'terminal'"
      },
      {
        "question": "What is the number of cartoones written by Joseph Kuhr ?",
        "concise pattern": "WHERE",
        "template": "what is the number of {TABLE0} {COLUMN0} by joseph kuhr ?",
        "name dict": {
          "{COLUMN0}": "written_by",
          "{TABLE0}": "cartoon",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Cartoon WHERE Cartoon.Written_by = 'terminal'"
      },
      {
        "question": "What is the content of the series Sky Radio ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} of the {COLUMN1} sky radio ?",
        "name dict": {
          "{COLUMN1}": "series_name",
          "{COLUMN0}": "content",
          "{TABLE0}": "tv channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = 'terminal'"
      },
      {
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} options of the tv channels whose {COLUMN1} names are sky radio ?",
        "name dict": {
          "{COLUMN1}": "series_name",
          "{COLUMN0}": "package_option",
          "{TABLE0}": "tv channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = 'terminal'"
      },
      {
        "question": "What is the air date of TV series with Episode `` A Love of a Lifetime '' ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} date of tv series with {COLUMN1} `` a love of a lifetime '' ?",
        "name dict": {
          "{COLUMN1}": "episode",
          "{COLUMN0}": "air_date",
          "{TABLE0}": "tv series",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'terminal'"
      },
      {
        "question": "When did the episode `` A Love of a Lifetime '' air ?",
        "concise pattern": "WHERE",
        "template": "when did the {COLUMN1} `` a love of a lifetime '' {COLUMN0} ?",
        "name dict": {
          "{COLUMN1}": "episode",
          "{COLUMN0}": "air_date",
          "{TABLE0}": "tv series",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'terminal'"
      },
      {
        "question": "What is Weekly Rank of TV series with Episode `` A Love of a Lifetime '' ?",
        "concise pattern": "WHERE",
        "template": "what is {COLUMN0} rank of tv series with {COLUMN1} `` a love of a lifetime '' ?",
        "name dict": {
          "{COLUMN1}": "episode",
          "{COLUMN0}": "weekly_rank",
          "{TABLE0}": "tv series",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = 'terminal'"
      },
      {
        "question": "What is the weekly rank for the episode `` A Love of a Lifetime '' ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} rank for the {COLUMN1} `` a love of a lifetime '' ?",
        "name dict": {
          "{COLUMN1}": "episode",
          "{COLUMN0}": "weekly_rank",
          "{TABLE0}": "tv series",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = 'terminal'"
      },
      {
        "question": "What is the name of the series that has the episode `` A Love of a Lifetime '' ?",
        "concise pattern": "WHERE",
        "template": "what is the name of the {COLUMN0} that has the {COLUMN3} `` a love of a lifetime '' ?",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{COLUMN1}": "id",
          "{COLUMN0}": "series_name",
          "{COLUMN2}": "channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "episode",
          "{TABLE1}": "tv series"
        },
        "query": "SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'terminal'"
      },
      {
        "question": "What is the episode for the TV series named `` Sky Radio '' ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} for the tv {COLUMN3} named `` sky radio '' ?",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{COLUMN1}": "id",
          "{COLUMN0}": "episode",
          "{COLUMN2}": "channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "series_name",
          "{TABLE1}": "tv series"
        },
        "query": "SELECT TV_series.Episode FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = 'terminal'"
      },
      {
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000 ?",
        "concise pattern": "WHERE",
        "template": "what is the maximum number of {COLUMN0} tables made among poker players with {COLUMN1} less than 200000 ?",
        "name dict": {
          "{COLUMN1}": "earnings",
          "{COLUMN0}": "final_table_made",
          "{TABLE0}": "poker player",
          "{VALUE1}": "0",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "MAX"
        },
        "query": "SELECT Max(poker_player.Final_Table_Made) FROM poker_player WHERE poker_player.Earnings < 'terminal'"
      },
      {
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000 .",
        "concise pattern": "WHERE",
        "template": "return the maximum {COLUMN0} tables made across all poker players who have {COLUMN1} below 200000 .",
        "name dict": {
          "{COLUMN1}": "earnings",
          "{COLUMN0}": "final_table_made",
          "{TABLE0}": "poker player",
          "{VALUE1}": "0",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "MAX"
        },
        "query": "SELECT Max(poker_player.Final_Table_Made) FROM poker_player WHERE poker_player.Earnings < 'terminal'"
      },
      {
        "question": "What are the names of poker players whose earnings is higher than 300000 ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} of poker players whose {COLUMN2} is higher than 300000 ?",
        "name dict": {
          "{TABLE0}": "poker player",
          "{COLUMN1}": "people_id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "earnings",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "people"
        },
        "query": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 'terminal'"
      },
      {
        "question": "Give the names of poker players who have earnings above 300000 .",
        "concise pattern": "WHERE",
        "template": "give the {COLUMN0} of poker players who have {COLUMN2} above 300000 .",
        "name dict": {
          "{TABLE0}": "poker player",
          "{COLUMN1}": "people_id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "earnings",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "people"
        },
        "query": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 'terminal'"
      },
      {
        "question": "What is the average earnings of poker players with height higher than 200 ?",
        "concise pattern": "WHERE",
        "template": "what is the average {COLUMN0} of poker players with {COLUMN2} higher than 200 ?",
        "name dict": {
          "{TABLE0}": "poker player",
          "{COLUMN1}": "people_id",
          "{COLUMN0}": "earnings",
          "{COLUMN2}": "height",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "AVG",
          "{TABLE1}": "people"
        },
        "query": "SELECT Avg(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 'terminal'"
      },
      {
        "question": "What are the names of people who are not from Russia ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} of {TABLE0} who are not from russia ?",
        "name dict": {
          "{COLUMN1}": "nationality",
          "{COLUMN0}": "name",
          "{TABLE0}": "people",
          "{VALUE1}": "0",
          "{OP0}": "!=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT people.Name FROM people WHERE people.Nationality != 'terminal'"
      },
      {
        "question": "Which region is the city Kabul located in ?",
        "concise pattern": "WHERE",
        "template": "which {COLUMN0} is the {TABLE0} kabul located in ?",
        "name dict": {
          "{TABLE0}": "city",
          "{COLUMN1}": "countrycode",
          "{COLUMN0}": "region",
          "{COLUMN2}": "code",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "name",
          "{TABLE1}": "country"
        },
        "query": "SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'terminal'"
      },
      {
        "question": "What is the total population and maximum GNP in Asia ?",
        "concise pattern": "WHERE",
        "template": "what is the total {COLUMN0} and maximum {COLUMN1} in asia ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "gnp",
          "{COLUMN0}": "population",
          "{COLUMN2}": "region",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG1}": "SUM",
          "{AGG0}": "SUM"
        },
        "query": "SELECT Sum(country.Population), Sum(country.GNP) FROM country WHERE country.Region = 'terminal'"
      },
      {
        "question": "What is the total population of Gelderland district ?",
        "concise pattern": "WHERE",
        "template": "what is the total {COLUMN0} of gelderland {COLUMN3} ?",
        "name dict": {
          "{TABLE0}": "city",
          "{COLUMN1}": "countrycode",
          "{COLUMN0}": "population",
          "{COLUMN2}": "code",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "district",
          "{AGG0}": "SUM",
          "{TABLE1}": "country"
        },
        "query": "SELECT Sum(country.Population) FROM city JOIN country ON city.CountryCode = country.Code WHERE city.District = 'terminal'"
      },
      {
        "question": "Give the mean GNP and total population of nations which are considered US territory .",
        "concise pattern": "WHERE",
        "template": "give the mean {COLUMN0} and total {COLUMN1} of nations which are considered us territory .",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "population",
          "{COLUMN0}": "gnp",
          "{COLUMN2}": "governmentform",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG1}": "SUM",
          "{AGG0}": "SUM"
        },
        "query": "SELECT Sum(country.GNP), Sum(country.Population) FROM country WHERE country.GovernmentForm = 'terminal'"
      },
      {
        "question": "What languages are only used by a single country with a republic government ?",
        "concise pattern": "WHERE",
        "template": "what {COLUMN0} are only used by a single {TABLE1} with a republic government ?",
        "name dict": {
          "{TABLE0}": "countrylanguage",
          "{COLUMN1}": "code",
          "{COLUMN0}": "language",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "governmentform",
          "{TABLE1}": "country"
        },
        "query": "SELECT countrylanguage.Language FROM countrylanguage EXCEPT SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = 'terminal'"
      },
      {
        "question": "What is the official language spoken in the country whose head of state is Beatrix ?",
        "concise pattern": "WHERE",
        "template": "what is the official {COLUMN0} spoken in the {TABLE0} whose head of state is beatrix ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "code",
          "{COLUMN0}": "language",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "headofstate",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = 'terminal'"
      },
      {
        "question": "What is the official language used in the country the name of whose head of state is Beatrix .",
        "concise pattern": "WHERE",
        "template": "what is the official {COLUMN0} used in the {TABLE0} the name of whose head of state is beatrix .",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "code",
          "{COLUMN0}": "language",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "headofstate",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = 'terminal'"
      },
      {
        "question": "Return the country codes for countries that do not speak English .",
        "concise pattern": "WHERE",
        "template": "return the {TABLE0} {COLUMN2} for countries that do not speak english .",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "countrycode",
          "{COLUMN0}": "name",
          "{COLUMN2}": "code",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "language",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT country.Name FROM country EXCEPT SELECT countrylanguage.CountryCode FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'"
      },
      {
        "question": "Return the grade for the high schooler named Kyle .",
        "concise pattern": "WHERE",
        "template": "return the {COLUMN0} for the high schooler {COLUMN1} kyle .",
        "name dict": {
          "{COLUMN1}": "name",
          "{COLUMN0}": "grade",
          "{TABLE0}": "high schooler",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.name = 'terminal'"
      },
      {
        "question": "Show the names of all high schoolers in grade 10 .",
        "concise pattern": "WHERE",
        "template": "show the {COLUMN0} of all high schoolers in {COLUMN1} 10 .",
        "name dict": {
          "{COLUMN1}": "grade",
          "{COLUMN0}": "name",
          "{TABLE0}": "high schooler",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 'terminal'"
      },
      {
        "question": "What are the names of all high schoolers in grade 10 ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} of all high schoolers in {COLUMN1} 10 ?",
        "name dict": {
          "{COLUMN1}": "grade",
          "{COLUMN0}": "name",
          "{TABLE0}": "high schooler",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 'terminal'"
      },
      {
        "question": "Show the ID of the high schooler named Kyle .",
        "concise pattern": "WHERE",
        "template": "show the {COLUMN0} of the high schooler {COLUMN1} kyle .",
        "name dict": {
          "{COLUMN1}": "name",
          "{COLUMN0}": "id",
          "{TABLE0}": "high schooler",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'terminal'"
      },
      {
        "question": "Show the names of all of the high schooler Kyle 's friends .",
        "concise pattern": "WHERE",
        "template": "show the {COLUMN0} of all of the high schooler kyle 's {TABLE1} .",
        "name dict": {
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "student_id",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = 'terminal'"
      },
      {
        "question": "How many friends does the high school student Kyle have ?",
        "concise pattern": "WHERE",
        "template": "how many {TABLE1} does the high school {COLUMN1} kyle have ?",
        "name dict": {
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "student_id",
          "{COLUMN0}": "id",
          "{COLUMN2}": "name",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Count(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = 'terminal'"
      },
      {
        "question": "Return the number of likes that the high schooler named Kyle has .",
        "concise pattern": "WHERE",
        "template": "return the number of {TABLE1} that the high schooler {COLUMN2} kyle has .",
        "name dict": {
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "liked_id",
          "{COLUMN0}": "id",
          "{COLUMN2}": "name",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "likes"
        },
        "query": "SELECT Count(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id WHERE Highschooler.name = 'terminal'"
      },
      {
        "question": "What are the names of the dogs for which the owner spent more than 1000 for treatment ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} of the {TABLE0} for which the owner spent more than 1000 for treatment ?",
        "name dict": {
          "{TABLE0}": "dogs",
          "{COLUMN1}": "dog_id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "cost_of_treatment",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Dogs.name FROM Dogs EXCEPT SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > 'terminal'"
      },
      {
        "question": "Which professionals live in a city containing the substring 'West ' ? List his or her role , street , city and state .",
        "concise pattern": "WHERE",
        "template": "which {TABLE0} live in a city containing the substring 'west ' ? list his or her role , street , city and {COLUMN0} .",
        "name dict": {
          "{COLUMN1}": "city",
          "{COLUMN0}": "state",
          "{TABLE0}": "professionals",
          "{VALUE1}": "0",
          "{OP0}": "LIKE",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.city LIKE 'terminal'"
      },
      {
        "question": "Find the role , street , city and state of the professionals living in a city that contains the substring 'West ' .",
        "concise pattern": "WHERE",
        "template": "find the role , street , city and {COLUMN0} of the {TABLE0} living in a city that contains the substring 'west ' .",
        "name dict": {
          "{COLUMN1}": "city",
          "{COLUMN0}": "state",
          "{TABLE0}": "professionals",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.city = 'terminal'"
      },
      {
        "question": "What is the feature type name of feature AirCon ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN2} type name of {COLUMN2} aircon ?",
        "name dict": {
          "{TABLE0}": "reference feature types",
          "{COLUMN1}": "feature_type_code",
          "{COLUMN0}": "feature_type_name",
          "{COLUMN2}": "feature_name",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "other available features"
        },
        "query": "SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = 'terminal'"
      },
      {
        "question": "Find number of pets owned by students who are older than 20 .",
        "concise pattern": "WHERE",
        "template": "find number of pets owned by {TABLE0} who are older than 20 .",
        "name dict": {
          "{COLUMN0}": "age",
          "{TABLE0}": "student",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Student WHERE Student.Age > 'terminal'"
      },
      {
        "question": "What major is every student who does not own a cat as a pet , and also how old are they ?",
        "concise pattern": "WHERE",
        "template": "what major is every {TABLE0} who does not own a cat as a pet , and also how old are they ?",
        "name dict": {
          "{TABLE0}": "student",
          "{COLUMN1}": "stuid",
          "{COLUMN0}": "lname",
          "{COLUMN2}": "petid",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "pettype",
          "{TABLE1}": "has pet",
          "{TABLE2}": "pets"
        },
        "query": "SELECT Student.Major, Student.LName FROM Student EXCEPT SELECT Student.Major, Student.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID AND Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal'"
      },
      {
        "question": "Find the id of students who do not have a cat pet .",
        "concise pattern": "WHERE",
        "template": "find the id of {TABLE0} who do not have a cat pet .",
        "name dict": {
          "{TABLE0}": "student",
          "{OP0}": "=",
          "{TABLE1}": "has pet",
          "{TABLE2}": "pets",
          "{COLUMN1}": "petid",
          "{COLUMN0}": "stuid",
          "{COLUMN2}": "pettype",
          "{VALUE1}": "0",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Student.StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal'"
      },
      {
        "question": "What is the id and weight of every pet who is older than 1 ?",
        "concise pattern": "WHERE",
        "template": "what is the id and {COLUMN0} of every pet who is older than 1 ?",
        "name dict": {
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "weight",
          "{TABLE0}": "pets",
          "{VALUE1}": "0",
          "{OP0}": ">"
        },
        "query": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.weight > 'terminal'"
      },
      {
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019 .",
        "concise pattern": "WHERE",
        "template": "find the id of the pet owned by {TABLE0} whose last name is \u2018smith\u2019 .",
        "name dict": {
          "{TABLE0}": "student",
          "{COLUMN1}": "stuid",
          "{COLUMN0}": "petid",
          "{COLUMN2}": "lname",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "has pet"
        },
        "query": "SELECT Has_Pet.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.LName = 'terminal'"
      },
      {
        "question": "What is the id of the pet owned by the student whose last name is 'Smith ' ?",
        "concise pattern": "WHERE",
        "template": "what is the id of the pet owned by the {TABLE0} whose last name is 'smith ' ?",
        "name dict": {
          "{TABLE0}": "student",
          "{COLUMN1}": "stuid",
          "{COLUMN0}": "petid",
          "{COLUMN2}": "lname",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "has pet"
        },
        "query": "SELECT Has_Pet.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.LName = 'terminal'"
      },
      {
        "question": "What is the name of the different car makers who produced a car in 1970 ?",
        "concise pattern": "WHERE",
        "template": "what is the name of the different car {COLUMN0} who produced a car in 1970 ?",
        "name dict": {
          "{OP0}": "=",
          "{TABLE3}": "cars data",
          "{COLUMN3}": "makeid",
          "{TABLE1}": "model list",
          "{TABLE2}": "car names",
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "maker",
          "{TABLE0}": "car makers",
          "{VALUE1}": "0",
          "{COLUMN4}": "year",
          "{COLUMN1}": "id",
          "{COLUMN2}": "model"
        },
        "query": "SELECT DISTINCT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 'terminal'"
      },
      {
        "question": "Which distinct car models are the produced after 1980 ?",
        "concise pattern": "WHERE",
        "template": "which distinct car {COLUMN0} are the produced after 1980 ?",
        "name dict": {
          "{TABLE0}": "model list",
          "{COLUMN1}": "makeid",
          "{COLUMN0}": "model",
          "{COLUMN2}": "id",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "year",
          "{TABLE1}": "car names",
          "{TABLE2}": "cars data"
        },
        "query": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 'terminal'"
      },
      {
        "question": "What are the different models for the cards produced after 1980 ?",
        "concise pattern": "WHERE",
        "template": "what are the different {COLUMN0} for the cards produced after 1980 ?",
        "name dict": {
          "{TABLE0}": "model list",
          "{COLUMN1}": "makeid",
          "{COLUMN0}": "model",
          "{COLUMN2}": "id",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "year",
          "{TABLE1}": "car names",
          "{TABLE2}": "cars data"
        },
        "query": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model AND model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 'terminal'"
      },
      {
        "question": "What is the number of makers of care in France ?",
        "concise pattern": "WHERE",
        "template": "what is the number of {COLUMN0} of care in france ?",
        "name dict": {
          "{TABLE0}": "countries",
          "{COLUMN1}": "countryid",
          "{COLUMN0}": "maker",
          "{COLUMN2}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "countryname",
          "{AGG0}": "COUNT",
          "{TABLE1}": "car makers"
        },
        "query": "SELECT Count(DISTINCT car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'terminal'"
      },
      {
        "question": "How many car models are produced in the usa ?",
        "concise pattern": "WHERE",
        "template": "how many car {COLUMN4} are produced in the usa ?",
        "name dict": {
          "{TABLE0}": "countries",
          "{OP0}": "=",
          "{TABLE3}": "car names",
          "{COLUMN3}": "maker",
          "{TABLE1}": "car makers",
          "{TABLE2}": "model list",
          "{COLUMN1}": "country",
          "{COLUMN0}": "countryid",
          "{COLUMN2}": "id",
          "{VALUE1}": "0",
          "{COLUMN4}": "model",
          "{VALUE0}": "'terminal'",
          "{COLUMN5}": "countryname",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country AND countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'terminal'"
      },
      {
        "question": "What is the average miles per gallon of all the cards with 4 cylinders ?",
        "concise pattern": "WHERE",
        "template": "what is the average miles per gallon of all the cards with 4 {COLUMN1} ?",
        "name dict": {
          "{COLUMN1}": "cylinders",
          "{COLUMN0}": "horsepower",
          "{TABLE0}": "cars data",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 'terminal'"
      },
      {
        "question": "What is the number of the cars with horsepower more than 150 ?",
        "concise pattern": "WHERE",
        "template": "what is the number of the cars with {COLUMN0} more than 150 ?",
        "name dict": {
          "{COLUMN0}": "horsepower",
          "{TABLE0}": "cars data",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM cars_data WHERE cars_data.Horsepower > 'terminal'"
      },
      {
        "question": "What is the number of cars with a horsepower greater than 150 ?",
        "concise pattern": "WHERE",
        "template": "what is the number of cars with a {COLUMN0} greater than 150 ?",
        "name dict": {
          "{COLUMN0}": "horsepower",
          "{TABLE0}": "cars data",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM cars_data WHERE cars_data.Horsepower > 'terminal'"
      },
      {
        "question": "What is the average horsepower of the cars before 1980 ?",
        "concise pattern": "WHERE",
        "template": "what is the average {COLUMN0} of the cars before 1980 ?",
        "name dict": {
          "{COLUMN1}": "year",
          "{COLUMN0}": "horsepower",
          "{TABLE0}": "cars data",
          "{VALUE1}": "0",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 'terminal'"
      },
      {
        "question": "What is the average horsepower for all cards produced before 1980 ?",
        "concise pattern": "WHERE",
        "template": "what is the average {COLUMN0} for all cards produced before 1980 ?",
        "name dict": {
          "{COLUMN1}": "year",
          "{COLUMN0}": "horsepower",
          "{TABLE0}": "cars data",
          "{VALUE1}": "0",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 'terminal'"
      },
      {
        "question": "What is the average edispl for all volvos ?",
        "concise pattern": "WHERE",
        "template": "what is the average {COLUMN0} for all volvos ?",
        "name dict": {
          "{TABLE0}": "car names",
          "{COLUMN1}": "makeid",
          "{COLUMN0}": "edispl",
          "{COLUMN2}": "id",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "accelerate",
          "{AGG0}": "AVG",
          "{TABLE1}": "cars data"
        },
        "query": "SELECT Avg(cars_data.Edispl) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Accelerate = 'terminal'"
      },
      {
        "question": "How many cars have more than 4 cylinders ?",
        "concise pattern": "WHERE",
        "template": "how many cars have more than 4 {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "cylinders",
          "{TABLE0}": "cars data",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM cars_data WHERE cars_data.Cylinders > 'terminal'"
      },
      {
        "question": "What is the number of cars with more than 4 cylinders ?",
        "concise pattern": "WHERE",
        "template": "what is the number of cars with more than 4 {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "cylinders",
          "{TABLE0}": "cars data",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM cars_data WHERE cars_data.Cylinders > 'terminal'"
      },
      {
        "question": "How many cars has over 6 cylinders ?",
        "concise pattern": "WHERE",
        "template": "how many cars has over 6 {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "cylinders",
          "{TABLE0}": "cars data",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM cars_data WHERE cars_data.Cylinders = 'terminal'"
      },
      {
        "question": "What is the number of carsw ith over 6 cylinders ?",
        "concise pattern": "WHERE",
        "template": "what is the number of carsw ith over 6 {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "cylinders",
          "{TABLE0}": "cars data",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM cars_data WHERE cars_data.Cylinders > 'terminal'"
      },
      {
        "question": "Which country does Airline `` JetBlue Airways '' belong to ?",
        "concise pattern": "WHERE",
        "template": "which country does {COLUMN1} `` jetblue airways '' belong to ?",
        "name dict": {
          "{COLUMN1}": "airline",
          "{COLUMN0}": "country",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "airports"
        },
        "query": "SELECT airlines.Country FROM airlines JOIN airports WHERE airlines.Airline = 'terminal'"
      },
      {
        "question": "Which abbreviation corresponds to Jetblue Airways ?",
        "concise pattern": "WHERE",
        "template": "which {COLUMN0} corresponds to jetblue airways ?",
        "name dict": {
          "{COLUMN1}": "airline",
          "{COLUMN0}": "abbreviation",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = 'terminal'"
      },
      {
        "question": "List all airline names and their abbreviations in `` USA '' .",
        "concise pattern": "WHERE",
        "template": "list all airline names and their {COLUMN0} in `` usa '' .",
        "name dict": {
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "abbreviation",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "="
        },
        "query": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Abbreviation = 'terminal'"
      },
      {
        "question": "How many airlines are from USA ?",
        "concise pattern": "WHERE",
        "template": "how many {TABLE0} are from usa ?",
        "name dict": {
          "{COLUMN0}": "country",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM airlines WHERE airlines.Country = 'terminal'"
      },
      {
        "question": "Return the number of airlines in the USA .",
        "concise pattern": "WHERE",
        "template": "return the number of {TABLE0} in the usa .",
        "name dict": {
          "{COLUMN0}": "country",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM airlines WHERE airlines.Country = 'terminal'"
      },
      {
        "question": "What are the names of airports in Aberdeen ?",
        "concise pattern": "WHERE",
        "template": "what are the names of {TABLE0} in aberdeen ?",
        "name dict": {
          "{COLUMN1}": "city",
          "{COLUMN0}": "airportname",
          "{TABLE0}": "airports",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT airports.AirportName FROM airports WHERE airports.City = 'terminal'"
      },
      {
        "question": "How many flights depart from 'APG ' ?",
        "concise pattern": "WHERE",
        "template": "how many {TABLE0} depart from 'apg ' ?",
        "name dict": {
          "{COLUMN0}": "sourceairport",
          "{TABLE0}": "flights",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM flights WHERE flights.SourceAirport = 'terminal'"
      },
      {
        "question": "Count the number of flights departing from 'APG ' .",
        "concise pattern": "WHERE",
        "template": "count the number of {TABLE0} departing from 'apg ' .",
        "name dict": {
          "{COLUMN0}": "sourceairport",
          "{TABLE0}": "flights",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM flights WHERE flights.SourceAirport = 'terminal'"
      },
      {
        "question": "How many flights have destination ATO ?",
        "concise pattern": "WHERE",
        "template": "how many {TABLE0} have destination ato ?",
        "name dict": {
          "{COLUMN0}": "destairport",
          "{TABLE0}": "flights",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM flights WHERE flights.DestAirport = 'terminal'"
      },
      {
        "question": "Count the number of flights into ATO .",
        "concise pattern": "WHERE",
        "template": "count the number of {TABLE0} into ato .",
        "name dict": {
          "{COLUMN0}": "sourceairport",
          "{TABLE0}": "flights",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM flights WHERE flights.SourceAirport = 'terminal'"
      },
      {
        "question": "How many flights depart from City Aberdeen ?",
        "concise pattern": "WHERE",
        "template": "how many {TABLE1} depart from city aberdeen ?",
        "name dict": {
          "{TABLE0}": "airports",
          "{COLUMN1}": "sourceairport",
          "{COLUMN0}": "airportcode",
          "{COLUMN2}": "city",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT Count(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = 'terminal'"
      },
      {
        "question": "Return the number of flights departing from Aberdeen .",
        "concise pattern": "WHERE",
        "template": "return the number of {TABLE1} departing from aberdeen .",
        "name dict": {
          "{TABLE0}": "airports",
          "{COLUMN1}": "sourceairport",
          "{COLUMN0}": "airportcode",
          "{COLUMN2}": "city",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT Count(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = 'terminal'"
      },
      {
        "question": "How many flights arriving in Aberdeen city ?",
        "concise pattern": "WHERE",
        "template": "how many {TABLE1} arriving in aberdeen city ?",
        "name dict": {
          "{TABLE0}": "airports",
          "{COLUMN1}": "sourceairport",
          "{COLUMN0}": "airportcode",
          "{COLUMN2}": "city",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT Count(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = 'terminal'"
      },
      {
        "question": "Return the number of flights arriving in Aberdeen .",
        "concise pattern": "WHERE",
        "template": "return the number of {TABLE1} arriving in aberdeen .",
        "name dict": {
          "{TABLE0}": "airports",
          "{COLUMN1}": "sourceairport",
          "{COLUMN0}": "airportcode",
          "{COLUMN2}": "city",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT Count(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = 'terminal'"
      },
      {
        "question": "Give the number of Jetblue Airways flights .",
        "concise pattern": "WHERE",
        "template": "give the number of jetblue airways {TABLE1} .",
        "name dict": {
          "{COLUMN0}": "airline",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT Count(*) FROM airlines JOIN flights WHERE airlines.Airline = 'terminal'"
      },
      {
        "question": "Count the number of United Airlines flights arriving in ASY Airport .",
        "concise pattern": "WHERE",
        "template": "count the number of united airlines {TABLE1} arriving in asy airport .",
        "name dict": {
          "{TABLE0}": "airports",
          "{COLUMN1}": "sourceairport",
          "{COLUMN0}": "airportcode",
          "{COLUMN2}": "airportname",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT Count(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportName = 'terminal'"
      },
      {
        "question": "Return the number of United Airlines flights leaving from AHD Airport .",
        "concise pattern": "WHERE",
        "template": "return the number of united airlines {TABLE1} leaving from ahd airport .",
        "name dict": {
          "{TABLE0}": "airports",
          "{COLUMN1}": "sourceairport",
          "{COLUMN0}": "airportcode",
          "{COLUMN2}": "airportname",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT Count(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportName = 'terminal'"
      },
      {
        "question": "How many United Airlines flights go to City 'Aberdeen ' ?",
        "concise pattern": "WHERE",
        "template": "how many united airlines {TABLE1} go to city 'aberdeen ' ?",
        "name dict": {
          "{TABLE0}": "airports",
          "{COLUMN1}": "sourceairport",
          "{COLUMN0}": "airportcode",
          "{COLUMN2}": "city",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT Count(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = 'terminal'"
      },
      {
        "question": "Count the number of United Airlines flights that arrive in Aberdeen .",
        "concise pattern": "WHERE",
        "template": "count the number of united airlines {TABLE1} that arrive in aberdeen .",
        "name dict": {
          "{TABLE0}": "airports",
          "{COLUMN1}": "sourceairport",
          "{COLUMN0}": "airportcode",
          "{COLUMN2}": "city",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT Count(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = 'terminal'"
      },
      {
        "question": "What are airlines that have some flight departing from airport 'AHD ' ?",
        "concise pattern": "WHERE",
        "template": "what are {COLUMN0} that have some flight departing from airport 'ahd ' ?",
        "name dict": {
          "{COLUMN1}": "airportcode",
          "{COLUMN0}": "airline",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "airports"
        },
        "query": "SELECT airlines.Airline FROM airlines JOIN airports WHERE airports.AirportCode = 'terminal'"
      },
      {
        "question": "Which airlines have a flight with source airport AHD ?",
        "concise pattern": "WHERE",
        "template": "which {COLUMN0} have a flight with source airport ahd ?",
        "name dict": {
          "{COLUMN1}": "sourceairport",
          "{COLUMN0}": "airline",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "flights"
        },
        "query": "SELECT airlines.Airline FROM airlines JOIN flights WHERE flights.SourceAirport = 'terminal'"
      },
      {
        "question": "What are airlines that have flights arriving at airport 'AHD ' ?",
        "concise pattern": "WHERE",
        "template": "what are {COLUMN0} that have flights arriving at airport 'ahd ' ?",
        "name dict": {
          "{COLUMN1}": "airportcode",
          "{COLUMN0}": "airline",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "airports"
        },
        "query": "SELECT airlines.Airline FROM airlines JOIN airports WHERE airports.AirportCode = 'terminal'"
      },
      {
        "question": "Which airlines have a flight with destination airport AHD ?",
        "concise pattern": "WHERE",
        "template": "which {COLUMN0} have a flight with destination airport ahd ?",
        "name dict": {
          "{COLUMN1}": "destairport",
          "{COLUMN0}": "airline",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "flights"
        },
        "query": "SELECT airlines.Airline FROM airlines JOIN flights WHERE flights.DestAirport = 'terminal'"
      },
      {
        "question": "What are flight numbers of flights departing from Airport `` APG '' ?",
        "concise pattern": "WHERE",
        "template": "what are flight numbers of {TABLE1} departing from airport `` apg '' ?",
        "name dict": {
          "{TABLE0}": "airports",
          "{COLUMN1}": "airportcode",
          "{COLUMN0}": "flightno",
          "{COLUMN2}": "sourceairport",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "flights"
        },
        "query": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = 'terminal'"
      },
      {
        "question": "Give the flight numbers of flights leaving from APG .",
        "concise pattern": "WHERE",
        "template": "give the flight numbers of {TABLE0} leaving from apg .",
        "name dict": {
          "{COLUMN1}": "sourceairport",
          "{COLUMN0}": "flightno",
          "{TABLE0}": "flights",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'terminal'"
      },
      {
        "question": "What are flight numbers of flights arriving at Airport `` APG '' ?",
        "concise pattern": "WHERE",
        "template": "what are flight numbers of {TABLE1} arriving at airport `` apg '' ?",
        "name dict": {
          "{TABLE0}": "airports",
          "{COLUMN1}": "airportcode",
          "{COLUMN0}": "flightno",
          "{COLUMN2}": "sourceairport",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "flights"
        },
        "query": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = 'terminal'"
      },
      {
        "question": "Give the flight numbers of flights landing at APG .",
        "concise pattern": "WHERE",
        "template": "give the flight numbers of {TABLE0} landing at apg .",
        "name dict": {
          "{COLUMN1}": "sourceairport",
          "{COLUMN0}": "flightno",
          "{TABLE0}": "flights",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'terminal'"
      },
      {
        "question": "What are flight numbers of flights departing from City `` Aberdeen `` ?",
        "concise pattern": "WHERE",
        "template": "what are flight numbers of {TABLE1} departing from city `` aberdeen `` ?",
        "name dict": {
          "{TABLE0}": "airports",
          "{COLUMN1}": "airportcode",
          "{COLUMN0}": "flightno",
          "{COLUMN2}": "sourceairport",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "city",
          "{TABLE1}": "flights"
        },
        "query": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = 'terminal'"
      },
      {
        "question": "Give the flight numbers of flights leaving from Aberdeen .",
        "concise pattern": "WHERE",
        "template": "give the flight numbers of {TABLE1} leaving from aberdeen .",
        "name dict": {
          "{TABLE0}": "airports",
          "{COLUMN1}": "airportcode",
          "{COLUMN0}": "flightno",
          "{COLUMN2}": "sourceairport",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "city",
          "{TABLE1}": "flights"
        },
        "query": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = 'terminal'"
      },
      {
        "question": "What are flight numbers of flights arriving at City `` Aberdeen '' ?",
        "concise pattern": "WHERE",
        "template": "what are flight numbers of {TABLE1} arriving at city `` aberdeen '' ?",
        "name dict": {
          "{TABLE0}": "airports",
          "{COLUMN1}": "airportcode",
          "{COLUMN0}": "flightno",
          "{COLUMN2}": "sourceairport",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "city",
          "{TABLE1}": "flights"
        },
        "query": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = 'terminal'"
      },
      {
        "question": "Give the flight numbers of flights arriving in Aberdeen .",
        "concise pattern": "WHERE",
        "template": "give the flight numbers of {TABLE1} arriving in aberdeen .",
        "name dict": {
          "{TABLE0}": "airports",
          "{COLUMN1}": "airportcode",
          "{COLUMN0}": "flightno",
          "{COLUMN2}": "sourceairport",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "city",
          "{TABLE1}": "flights"
        },
        "query": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = 'terminal'"
      },
      {
        "question": "Count the number of templates of the type CV .",
        "concise pattern": "WHERE",
        "template": "count the number of {TABLE0} of the type cv .",
        "name dict": {
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Templates WHERE Templates.Template_Type_Code = 'terminal'"
      },
      {
        "question": "Return the type code of the template type with the description `` Book '' .",
        "concise pattern": "WHERE",
        "template": "return the type code of the {COLUMN0} type with the description `` book '' .",
        "name dict": {
          "{COLUMN1}": "template_type_code",
          "{COLUMN0}": "template_type_description",
          "{TABLE0}": "reference template types",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "templates"
        },
        "query": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'terminal'"
      },
      {
        "question": "Return the ids corresponding to templates with the description 'Presentation ' .",
        "concise pattern": "WHERE",
        "template": "return the ids corresponding to {TABLE1} with the description 'presentation ' .",
        "name dict": {
          "{COLUMN1}": "template_type_description",
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "reference template types",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "templates"
        },
        "query": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'terminal'"
      },
      {
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "concise pattern": "WHERE",
        "template": "what are the details for the {COLUMN0} that includes the text 'korea ' ?",
        "name dict": {
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "paragraph_text",
          "{TABLE0}": "paragraphs",
          "{VALUE1}": "0",
          "{OP0}": "LIKE"
        },
        "query": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE 'terminal'"
      },
      {
        "question": "How many visitors below age 30 are there ?",
        "concise pattern": "WHERE",
        "template": "how many visitors below {COLUMN0} 30 are there ?",
        "name dict": {
          "{COLUMN0}": "age",
          "{TABLE0}": "customer",
          "{VALUE1}": "0",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM visitor WHERE visitor.Age < 'terminal'"
      },
      {
        "question": "What is the average age of the visitors whose membership level is not higher than 4 ?",
        "concise pattern": "WHERE",
        "template": "what is the average {COLUMN0} of the visitors whose membership level is not higher than 4 ?",
        "name dict": {
          "{COLUMN0}": "age",
          "{TABLE0}": "customer",
          "{VALUE1}": "0",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(visitor.Age) FROM visitor WHERE visitor.Age < 'terminal'"
      },
      {
        "question": "What is the total ticket expense of the visitors whose membership level is 1 ?",
        "concise pattern": "WHERE",
        "template": "what is the total ticket expense of the {TABLE1} whose membership level is 1 ?",
        "name dict": {
          "{TABLE0}": "museum",
          "{COLUMN1}": "museum_id",
          "{COLUMN0}": "num_of_staff",
          "{COLUMN2}": "num_of_ticket",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "SUM",
          "{TABLE1}": "visit"
        },
        "query": "SELECT Sum(museum.Num_of_Staff) FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE visit.Num_of_Ticket = 'terminal'"
      },
      {
        "question": "How is the math course described ?",
        "concise pattern": "WHERE",
        "template": "how is the math {COLUMN0} described ?",
        "name dict": {
          "{COLUMN1}": "course_name",
          "{COLUMN0}": "course_description",
          "{TABLE0}": "courses",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = 'terminal'"
      },
      {
        "question": "What are the descriptions for all the math courses ?",
        "concise pattern": "WHERE",
        "template": "what are the descriptions for all the math {TABLE0} ?",
        "name dict": {
          "{COLUMN1}": "course_name",
          "{COLUMN0}": "course_description",
          "{TABLE0}": "courses",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = 'terminal'"
      },
      {
        "question": "What is the zip code of the address in the city Port Chelsea ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} code of the address in the city port chelsea ?",
        "name dict": {
          "{COLUMN1}": "city",
          "{COLUMN0}": "zip_postcode",
          "{TABLE0}": "addresses",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = 'terminal'"
      },
      {
        "question": "What is the zip code for Port Chelsea ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} code for port chelsea ?",
        "name dict": {
          "{COLUMN1}": "city",
          "{COLUMN0}": "zip_postcode",
          "{TABLE0}": "addresses",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = 'terminal'"
      },
      {
        "question": "How many degrees does the engineering department offer ?",
        "concise pattern": "WHERE",
        "template": "how many degrees does the engineering {COLUMN0} offer ?",
        "name dict": {
          "{COLUMN1}": "department_name",
          "{COLUMN0}": "department_id",
          "{TABLE0}": "departments",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "degree programs"
        },
        "query": "SELECT Count(*) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id WHERE Departments.department_name = 'terminal'"
      },
      {
        "question": "How many degrees does the engineering department have ?",
        "concise pattern": "WHERE",
        "template": "how many degrees does the engineering {COLUMN0} have ?",
        "name dict": {
          "{COLUMN1}": "department_name",
          "{COLUMN0}": "department_id",
          "{TABLE0}": "departments",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "degree programs"
        },
        "query": "SELECT Count(*) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id WHERE Departments.department_name = 'terminal'"
      },
      {
        "question": "What is the description of the department whose name has the substring the computer ?",
        "concise pattern": "WHERE",
        "template": "what is the description of the {COLUMN0} whose name has the substring the computer ?",
        "name dict": {
          "{COLUMN1}": "department_name",
          "{COLUMN0}": "department_description",
          "{TABLE0}": "departments",
          "{VALUE1}": "0",
          "{OP0}": "LIKE",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE 'terminal'"
      },
      {
        "question": "What is the department description for the one whose name has the word computer ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} description for the one whose name has the word computer ?",
        "name dict": {
          "{COLUMN1}": "department_name",
          "{COLUMN0}": "department_description",
          "{TABLE0}": "departments",
          "{VALUE1}": "0",
          "{OP0}": "LIKE",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE 'terminal'"
      },
      {
        "question": "What are the first , middle , and last names for everybody enrolled in a Bachelors program ?",
        "concise pattern": "WHERE",
        "template": "what are the first , middle , and {COLUMN0} names for everybody enrolled in a bachelors program ?",
        "name dict": {
          "{TABLE0}": "degree programs",
          "{COLUMN1}": "degree_program_id",
          "{COLUMN0}": "last_name",
          "{COLUMN2}": "student_id",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "degree_summary_name",
          "{TABLE1}": "students",
          "{TABLE2}": "student enrolment"
        },
        "query": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Degree_Programs JOIN Students JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id AND Student_Enrolment.student_id = Students.student_id WHERE Degree_Programs.degree_summary_name = 'terminal'"
      },
      {
        "question": "Describe the section h .",
        "concise pattern": "WHERE",
        "template": "describe the {COLUMN0} h .",
        "name dict": {
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "section_name",
          "{TABLE0}": "sections",
          "{VALUE1}": "0",
          "{OP0}": "="
        },
        "query": "SELECT Sections.section_name FROM Sections WHERE Sections.section_name = 'terminal'"
      },
      {
        "question": "What is the description for the section named h ?",
        "concise pattern": "WHERE",
        "template": "what is the description for the {COLUMN0} named h ?",
        "name dict": {
          "{COLUMN1}": "section_name",
          "{COLUMN0}": "section_description",
          "{TABLE0}": "sections",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Sections.section_description FROM Sections WHERE Sections.section_name = 'terminal'"
      },
      {
        "question": "What is the content of TV Channel with serial name `` Sky Radio '' ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} of tv channel with serial name `` sky radio '' ?",
        "name dict": {
          "{COLUMN1}": "series_name",
          "{COLUMN0}": "content",
          "{TABLE0}": "tv channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = 'terminal'"
      },
      {
        "question": "What is the Package Option of TV Channel with serial name `` Sky Radio '' ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} option of tv channel with serial name `` sky radio '' ?",
        "name dict": {
          "{COLUMN1}": "series_name",
          "{COLUMN0}": "package_option",
          "{TABLE0}": "tv channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = 'terminal'"
      },
      {
        "question": "How many TV Channel using language English ?",
        "concise pattern": "WHERE",
        "template": "how many tv channel using {COLUMN0} english ?",
        "name dict": {
          "{COLUMN0}": "language",
          "{TABLE0}": "tv channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM TV_Channel WHERE TV_Channel.Language = 'terminal'"
      },
      {
        "question": "How many TV Channels use the English language ?",
        "concise pattern": "WHERE",
        "template": "how many tv channels use the english {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "language",
          "{TABLE0}": "tv channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM TV_Channel WHERE TV_Channel.Language = 'terminal'"
      },
      {
        "question": "Find the package choice and series name of the TV channel that has high definition TV .",
        "concise pattern": "WHERE",
        "template": "find the package choice and {COLUMN0} name of the tv channel that has high definition tv .",
        "name dict": {
          "{COLUMN1}": "pay_per_view_ppv",
          "{COLUMN0}": "series_name",
          "{TABLE0}": "tv channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT TV_Channel.series_name, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Pay_per_view_PPV = 'terminal'"
      },
      {
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV ?",
        "concise pattern": "WHERE",
        "template": "what are the package options and the name of the {COLUMN0} for the tv channel that supports high definition tv ?",
        "name dict": {
          "{COLUMN1}": "pay_per_view_ppv",
          "{COLUMN0}": "series_name",
          "{TABLE0}": "tv channel",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Pay_per_view_PPV = 'terminal'"
      },
      {
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English .",
        "concise pattern": "WHERE",
        "template": "find the {COLUMN0} aspect ratio and nation of the tv channels that do not use english .",
        "name dict": {
          "{COLUMN1}": "language",
          "{COLUMN0}": "pixel_aspect_ratio_par",
          "{TABLE0}": "tv channel",
          "{VALUE1}": "0",
          "{OP0}": "!=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Pixel_aspect_ratio_PAR FROM TV_Channel WHERE TV_Channel.Language != 'terminal'"
      },
      {
        "question": "Give average earnings of poker players who are taller than 200 .",
        "concise pattern": "WHERE",
        "template": "give average {COLUMN0} of poker players who are taller than 200 .",
        "name dict": {
          "{COLUMN0}": "earnings",
          "{TABLE0}": "poker player",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(poker_player.Earnings) FROM poker_player WHERE poker_player.Earnings > 'terminal'"
      },
      {
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway '",
        "concise pattern": "WHERE",
        "template": "what are the names of the {TABLE0} whose names are not 'jessie alloway '",
        "name dict": {
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "contestant_name",
          "{TABLE0}": "contestants",
          "{VALUE1}": "0",
          "{OP0}": "!="
        },
        "query": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name != 'terminal'"
      },
      {
        "question": "Return the names the contestants whose names contain the substring 'Al ' .",
        "concise pattern": "WHERE",
        "template": "return the names the {TABLE0} whose names contain the substring 'al ' .",
        "name dict": {
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "contestant_name",
          "{TABLE0}": "contestants",
          "{VALUE1}": "0",
          "{OP0}": "LIKE"
        },
        "query": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name LIKE 'terminal'"
      },
      {
        "question": "Give the names of the nations that were founded after 1950 .",
        "concise pattern": "WHERE",
        "template": "give the {COLUMN0} of the nations that were founded after 1950 .",
        "name dict": {
          "{COLUMN1}": "indepyear",
          "{COLUMN0}": "name",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT country.Name FROM country WHERE country.IndepYear > 'terminal'"
      },
      {
        "question": "What is the total surface area of the countries in the Caribbean region ?",
        "concise pattern": "WHERE",
        "template": "what is the total surface area of the countries in the caribbean {COLUMN1} ?",
        "name dict": {
          "{COLUMN1}": "region",
          "{COLUMN0}": "surfacearea",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "SUM"
        },
        "query": "SELECT Sum(country.SurfaceArea) FROM country WHERE country.Region = 'terminal'"
      },
      {
        "question": "Which continent is Anguilla in ?",
        "concise pattern": "WHERE",
        "template": "which {COLUMN0} is anguilla in ?",
        "name dict": {
          "{COLUMN1}": "name",
          "{COLUMN0}": "continent",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT country.Continent FROM country WHERE country.Name = 'terminal'"
      },
      {
        "question": "What is the continent name which Anguilla belongs to ?",
        "concise pattern": "WHERE",
        "template": "what is the {COLUMN0} name which anguilla belongs to ?",
        "name dict": {
          "{COLUMN1}": "localname",
          "{COLUMN0}": "continent",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT country.Continent FROM country WHERE country.LocalName = 'terminal'"
      },
      {
        "question": "What region is Kabul in ?",
        "concise pattern": "WHERE",
        "template": "what {COLUMN0} is kabul in ?",
        "name dict": {
          "{TABLE0}": "city",
          "{COLUMN1}": "countrycode",
          "{COLUMN0}": "region",
          "{COLUMN2}": "code",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "name",
          "{TABLE1}": "country"
        },
        "query": "SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'terminal'"
      },
      {
        "question": "What language is predominantly spoken in Aruba ?",
        "concise pattern": "WHERE",
        "template": "what {COLUMN0} is predominantly spoken in aruba ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "code",
          "{COLUMN0}": "language",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "localname",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.LocalName = 'terminal'"
      },
      {
        "question": "What are the region and population of Angola ?",
        "concise pattern": "WHERE",
        "template": "what are the region and {COLUMN0} of angola ?",
        "name dict": {
          "{COLUMN1}": "localname",
          "{COLUMN0}": "population",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT country.Region, country.Population FROM country WHERE country.LocalName = 'terminal'"
      },
      {
        "question": "What region does Angola belong to and what is its population ?",
        "concise pattern": "WHERE",
        "template": "what region does angola belong to and what is its {COLUMN0} ?",
        "name dict": {
          "{COLUMN1}": "localname",
          "{COLUMN0}": "population",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT country.Region, country.Population FROM country WHERE country.LocalName = 'terminal'"
      },
      {
        "question": "How many people live in Gelderland district ?",
        "concise pattern": "WHERE",
        "template": "how many people live in gelderland {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "district",
          "{TABLE0}": "city",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM city WHERE city.District = 'terminal'"
      },
      {
        "question": "What is the average GNP and total population in all nations whose government is US territory ?",
        "concise pattern": "WHERE",
        "template": "what is the average gnp and total {COLUMN0} in all nations whose government is us territory ?",
        "name dict": {
          "{OP0}": "=",
          "{AGG1}": "AVG",
          "{COLUMN1}": "governmentform",
          "{COLUMN0}": "population",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(country.Population), Avg(country.Population) FROM country WHERE country.GovernmentForm = 'terminal'"
      },
      {
        "question": "What is the total number of languages used in Aruba ?",
        "concise pattern": "WHERE",
        "template": "what is the total number of {COLUMN0} used in aruba ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "code",
          "{COLUMN0}": "language",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "name",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT Count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = 'terminal'"
      },
      {
        "question": "How many languages are spoken in Aruba ?",
        "concise pattern": "WHERE",
        "template": "how many {COLUMN0} are spoken in aruba ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "code",
          "{COLUMN0}": "language",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "name",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT Count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = 'terminal'"
      },
      {
        "question": "How many official languages does Afghanistan have ?",
        "concise pattern": "WHERE",
        "template": "how many official {COLUMN0} does afghanistan have ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "code",
          "{COLUMN0}": "language",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "name",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT Count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = 'terminal'"
      },
      {
        "question": "How many official languages are spoken in Afghanistan ?",
        "concise pattern": "WHERE",
        "template": "how many official {COLUMN0} are spoken in afghanistan ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "code",
          "{COLUMN0}": "language",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "name",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT Count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = 'terminal'"
      },
      {
        "question": "What is the number of distinct continents where Chinese is spoken ?",
        "concise pattern": "WHERE",
        "template": "what is the number of distinct {COLUMN0} where chinese is spoken ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "code",
          "{COLUMN0}": "continent",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "language",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT Count(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'"
      },
      {
        "question": "How many continents speak Chinese ?",
        "concise pattern": "WHERE",
        "template": "how many {COLUMN0} speak chinese ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "code",
          "{COLUMN0}": "continent",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "language",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT Count(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'"
      },
      {
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930 ?",
        "concise pattern": "WHERE",
        "template": "what is the total number of unique official {COLUMN0} spoken in the countries that are founded before 1930 ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "code",
          "{COLUMN0}": "language",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "0",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "indepyear",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT Count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 'terminal'"
      },
      {
        "question": "For the countries founded before 1930 , what is the total number of distinct official languages ?",
        "concise pattern": "WHERE",
        "template": "for the countries founded before 1930 , what is the total number of distinct official {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "language",
          "{TABLE0}": "countrylanguage",
          "{VALUE1}": "0",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM countrylanguage WHERE countrylanguage.Language < 'terminal'"
      },
      {
        "question": "What are the country codes for countries that do not speak English ?",
        "concise pattern": "WHERE",
        "template": "what are the {TABLE0} codes for countries that do not speak english ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "countrycode",
          "{COLUMN0}": "name",
          "{COLUMN2}": "language",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT country.Name FROM country EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'terminal'"
      },
      {
        "question": "Whic`h unique cities are in Asian countries where Chinese is the official language ?",
        "concise pattern": "WHERE",
        "template": "whic`h unique cities are in asian countries where chinese is the official {COLUMN3} ?",
        "name dict": {
          "{TABLE0}": "city",
          "{COLUMN1}": "countrycode",
          "{COLUMN0}": "name",
          "{COLUMN2}": "code",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "language",
          "{TABLE1}": "country",
          "{TABLE2}": "countrylanguage"
        },
        "query": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'"
      },
      {
        "question": "Count the number of countries for which Spanish is the predominantly spoken language .",
        "concise pattern": "WHERE",
        "template": "count the number of countries for which spanish is the predominantly spoken {COLUMN0} .",
        "name dict": {
          "{COLUMN0}": "language",
          "{TABLE0}": "countrylanguage",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM countrylanguage WHERE countrylanguage.Language = 'terminal'"
      },
      {
        "question": "What grade is Kyle in ?",
        "concise pattern": "WHERE",
        "template": "what {COLUMN0} is kyle in ?",
        "name dict": {
          "{COLUMN1}": "name",
          "{COLUMN0}": "grade",
          "{TABLE0}": "high schooler",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.name = 'terminal'"
      },
      {
        "question": "What is Kyle 's id ?",
        "concise pattern": "WHERE",
        "template": "what is kyle 's {COLUMN0} ?",
        "name dict": {
          "{COLUMN1}": "name",
          "{COLUMN0}": "id",
          "{TABLE0}": "high schooler",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'terminal'"
      },
      {
        "question": "Count the number of friends Kyle has .",
        "concise pattern": "WHERE",
        "template": "count the number of {TABLE1} kyle has .",
        "name dict": {
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "student_id",
          "{COLUMN0}": "id",
          "{COLUMN2}": "name",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Count(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = 'terminal'"
      },
      {
        "question": "How many likes does Kyle have ?",
        "concise pattern": "WHERE",
        "template": "how many {TABLE1} does kyle have ?",
        "name dict": {
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "id",
          "{COLUMN0}": "student_id",
          "{COLUMN2}": "liked_id",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "name",
          "{AGG0}": "COUNT",
          "{TABLE1}": "likes"
        },
        "query": "SELECT Count(DISTINCT Likes.student_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id WHERE Highschooler.name = 'terminal'"
      },
      {
        "question": "How many car makers are there in france ?",
        "concise pattern": "WHERE",
        "template": "how many car makers are there in france ?",
        "name dict": {
          "{TABLE0}": "countries",
          "{COLUMN1}": "country",
          "{COLUMN0}": "countryid",
          "{COLUMN2}": "countryname",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "car makers"
        },
        "query": "SELECT Count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'terminal'"
      },
      {
        "question": "What is the count of the car models produced in the United States ?",
        "concise pattern": "WHERE",
        "template": "what is the count of the car models produced in the united states ?",
        "name dict": {
          "{COLUMN0}": "maker",
          "{TABLE0}": "model list",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM model_list WHERE model_list.Maker = 'terminal'"
      },
      {
        "question": "how many cars were produced in 1980 ?",
        "concise pattern": "WHERE",
        "template": "how many cars were produced in 1980 ?",
        "name dict": {
          "{COLUMN0}": "year",
          "{TABLE0}": "cars data",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM cars_data WHERE cars_data.Year = 'terminal'"
      },
      {
        "question": "In 1980 , how many cars were made ?",
        "concise pattern": "WHERE",
        "template": "in 1980 , how many cars were made ?",
        "name dict": {
          "{COLUMN0}": "year",
          "{TABLE0}": "cars data",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM cars_data WHERE cars_data.Year = 'terminal'"
      },
      {
        "question": "What country is Jetblue Airways affiliated with ?",
        "concise pattern": "WHERE",
        "template": "what country is jetblue airways affiliated with ?",
        "name dict": {
          "{COLUMN1}": "airline",
          "{COLUMN0}": "country",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "airports"
        },
        "query": "SELECT airports.Country FROM airlines JOIN airports WHERE airlines.Airline = 'terminal'"
      },
      {
        "question": "List the airport code and name in the city of Anthony .",
        "concise pattern": "WHERE",
        "template": "list the airport code and name in the city of anthony .",
        "name dict": {
          "{COLUMN1}": "city",
          "{COLUMN0}": "airportname",
          "{TABLE0}": "airports",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'terminal'"
      },
      {
        "question": "Give the airport code and airport name corresonding to the city Anthony .",
        "concise pattern": "WHERE",
        "template": "give the airport code and airport name corresonding to the city anthony .",
        "name dict": {
          "{COLUMN1}": "city",
          "{COLUMN0}": "airportname",
          "{TABLE0}": "airports",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'terminal'"
      },
      {
        "question": "Which city and country is the Alton airport at ?",
        "concise pattern": "WHERE",
        "template": "which city and country is the alton airport at ?",
        "name dict": {
          "{COLUMN1}": "airportname",
          "{COLUMN0}": "country",
          "{TABLE0}": "airports",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'terminal'"
      },
      {
        "question": "Give the city and country for the Alton airport .",
        "concise pattern": "WHERE",
        "template": "give the city and country for the alton airport .",
        "name dict": {
          "{COLUMN1}": "airportname",
          "{COLUMN0}": "country",
          "{TABLE0}": "airports",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'terminal'"
      },
      {
        "question": "What is the airport name for airport 'AKO ' ?",
        "concise pattern": "WHERE",
        "template": "what is the airport name for airport 'ako ' ?",
        "name dict": {
          "{COLUMN1}": "airportcode",
          "{COLUMN0}": "airportname",
          "{TABLE0}": "airports",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = 'terminal'"
      },
      {
        "question": "Return the name of the airport with code 'AKO ' .",
        "concise pattern": "WHERE",
        "template": "return the name of the airport with code 'ako ' .",
        "name dict": {
          "{COLUMN1}": "airportcode",
          "{COLUMN0}": "airportname",
          "{TABLE0}": "airports",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = 'terminal'"
      },
      {
        "question": "What are airport names at City 'Aberdeen ' ?",
        "concise pattern": "WHERE",
        "template": "what are airport names at city 'aberdeen ' ?",
        "name dict": {
          "{COLUMN1}": "city",
          "{COLUMN0}": "airportname",
          "{TABLE0}": "airports",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT airports.AirportName FROM airports WHERE airports.City = 'terminal'"
      },
      {
        "question": "Find the number of left handed winners who participated in the WTA Championships .",
        "concise pattern": "WHERE",
        "template": "find the number of left handed winners who participated in the wta championships .",
        "name dict": {
          "{COLUMN0}": "tourney_name",
          "{TABLE0}": "matches",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM matches WHERE matches.tourney_name = 'terminal'"
      },
      {
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English ?",
        "concise pattern": "WHERE",
        "template": "what is the pixel aspect ratio and country of origin for all tv channels that do not use english ?",
        "name dict": {
          "{COLUMN1}": "language",
          "{COLUMN0}": "country",
          "{TABLE0}": "tv channel",
          "{VALUE1}": "0",
          "{OP0}": "!=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != 'terminal'"
      },
      {
        "question": "How many countries have a republic as their form of government ?",
        "concise pattern": "WHERE",
        "template": "how many countries have a republic as their form of government ?",
        "name dict": {
          "{COLUMN0}": "governmentform",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM country WHERE country.GovernmentForm = 'terminal'"
      },
      {
        "question": "How many countries have governments that are republics ?",
        "concise pattern": "WHERE",
        "template": "how many countries have governments that are republics ?",
        "name dict": {
          "{COLUMN0}": "governmentform",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM country WHERE country.GovernmentForm = 'terminal'"
      },
      {
        "question": "How much surface area do the countires in the Carribean cover together ?",
        "concise pattern": "WHERE",
        "template": "how much surface area do the countires in the carribean cover together ?",
        "name dict": {
          "{COLUMN1}": "region",
          "{COLUMN0}": "surfacearea",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "SUM"
        },
        "query": "SELECT Sum(country.SurfaceArea) FROM country WHERE country.Region = 'terminal'"
      },
      {
        "question": "What are the population and life expectancies in Brazil ?",
        "concise pattern": "WHERE",
        "template": "what are the population and life expectancies in brazil ?",
        "name dict": {
          "{COLUMN1}": "region",
          "{COLUMN0}": "lifeexpectancy",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Region = 'terminal'"
      },
      {
        "question": "Give me Brazil\u2019s population and life expectancies .",
        "concise pattern": "WHERE",
        "template": "give me brazil\u2019s population and life expectancies .",
        "name dict": {
          "{COLUMN1}": "name",
          "{COLUMN0}": "lifeexpectancy",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = 'terminal'"
      },
      {
        "question": "How long is the people\u2019s average life expectancy in Central Africa ?",
        "concise pattern": "WHERE",
        "template": "how long is the people\u2019s average life expectancy in central africa ?",
        "name dict": {
          "{COLUMN1}": "region",
          "{COLUMN0}": "lifeexpectancy",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(country.LifeExpectancy) FROM country WHERE country.Region = 'terminal'"
      },
      {
        "question": "What is the average life expectancy in African countries that are republics ?",
        "concise pattern": "WHERE",
        "template": "what is the average life expectancy in african countries that are republics ?",
        "name dict": {
          "{COLUMN1}": "governmentform",
          "{COLUMN0}": "lifeexpectancy",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(country.LifeExpectancy) FROM country WHERE country.GovernmentForm = 'terminal'"
      },
      {
        "question": "How many type of governments are in Africa ?",
        "concise pattern": "WHERE",
        "template": "how many type of governments are in africa ?",
        "name dict": {
          "{COLUMN1}": "region",
          "{COLUMN0}": "governmentform",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT country.GovernmentForm) FROM country WHERE country.Region = 'terminal'"
      },
      {
        "question": "How many different forms of governments are there in Africa ?",
        "concise pattern": "WHERE",
        "template": "how many different forms of governments are there in africa ?",
        "name dict": {
          "{COLUMN1}": "region",
          "{COLUMN0}": "governmentform",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT country.GovernmentForm) FROM country WHERE country.Region = 'terminal'"
      },
      {
        "question": "how many countries are in Asia ?",
        "concise pattern": "WHERE",
        "template": "how many countries are in asia ?",
        "name dict": {
          "{COLUMN0}": "region",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM country WHERE country.Region = 'terminal'"
      },
      {
        "question": "Count the number of countries in Asia .",
        "concise pattern": "WHERE",
        "template": "count the number of countries in asia .",
        "name dict": {
          "{COLUMN0}": "region",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM country WHERE country.Region = 'terminal'"
      }
    ]
  ],
  [
    "{SELECT0} {FROM}",
    [
      {
        "question": "List document IDs , document names , and document descriptions for all documents .",
        "concise pattern": "",
        "template": "list {COLUMN0} ids , {COLUMN0} names , and {COLUMN0} descriptions for all {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "document_description",
          "{TABLE0}": "documents"
        },
        "query": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents"
      },
      {
        "question": "List pairs of the owner 's first name and the dogs 's name .",
        "concise pattern": "",
        "template": "list pairs of the {COLUMN1} 's first {COLUMN0} and the {TABLE1} 's {COLUMN0} .",
        "name dict": {
          "{COLUMN1}": "owner_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "owners",
          "{TABLE1}": "dogs"
        },
        "query": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id"
      },
      {
        "question": "What are each owner 's first name and their dogs 's name ?",
        "concise pattern": "",
        "template": "what are each {COLUMN1} 's first {COLUMN0} and their {TABLE1} 's {COLUMN0} ?",
        "name dict": {
          "{COLUMN1}": "owner_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "owners",
          "{TABLE1}": "dogs"
        },
        "query": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id"
      },
      {
        "question": "What is the average and the maximum capacity of all stadiums ?",
        "concise pattern": "",
        "template": "what is the {COLUMN1} and the maximum {COLUMN0} of all {TABLE0} ?",
        "name dict": {
          "{COLUMN1}": "average",
          "{COLUMN0}": "capacity",
          "{TABLE0}": "stadium",
          "{AGG1}": "MAX",
          "{AGG0}": "MAX"
        },
        "query": "SELECT Max(stadium.Capacity), Max(stadium.Average) FROM stadium"
      },
      {
        "question": "Show template ids , version numbers , and template type codes for all templates .",
        "concise pattern": "",
        "template": "show {COLUMN0} ids , version numbers , and {COLUMN0} type codes for all {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates"
        },
        "query": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates"
      },
      {
        "question": "Whose permanent address is different from his or her current address ? List his or her first name .",
        "concise pattern": "",
        "template": "whose permanent {COLUMN1} is different from his or her {COLUMN0} {COLUMN1} ? list his or her first name .",
        "name dict": {
          "{COLUMN1}": "address_id",
          "{COLUMN0}": "current_address_id",
          "{TABLE0}": "addresses",
          "{TABLE1}": "students"
        },
        "query": "SELECT Students.first_name, Students.current_address_id FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id"
      },
      {
        "question": "What are the ids of students who both have friends and are liked ?",
        "concise pattern": "",
        "template": "what are the {COLUMN1} of students who both have {TABLE1} and are {COLUMN2} ?",
        "name dict": {
          "{COLUMN0}": "student_id",
          "{COLUMN2}": "liked_id",
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "id",
          "{TABLE1}": "friend",
          "{TABLE2}": "likes"
        },
        "query": "SELECT Friend.student_id FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID JOIN Likes ON Highschooler.ID = Likes.liked_id INTERSECT SELECT Likes.student_id FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID JOIN Likes ON Highschooler.ID = Likes.liked_id"
      },
      {
        "question": "Which first names are used for professionals or owners but are not used as dog names ?",
        "concise pattern": "",
        "template": "which {COLUMN0} names are used for {TABLE0} or owners but are not used as {COLUMN1} names ?",
        "name dict": {
          "{COLUMN0}": "first_name",
          "{COLUMN2}": "professional_id",
          "{TABLE0}": "professionals",
          "{COLUMN1}": "dog_id",
          "{TABLE1}": "dogs",
          "{TABLE2}": "treatments"
        },
        "query": "SELECT Professionals.first_name FROM Professionals EXCEPT SELECT Professionals.first_name FROM Dogs JOIN Professionals JOIN Treatments ON Dogs.dog_id = Treatments.dog_id AND Treatments.professional_id = Professionals.professional_id"
      },
      {
        "question": "Find the first names that are used for professionals or owners but are not used as dog names .",
        "concise pattern": "",
        "template": "find the {COLUMN0} names that are used for {TABLE0} or owners but are not used as {COLUMN1} names .",
        "name dict": {
          "{COLUMN0}": "first_name",
          "{COLUMN2}": "professional_id",
          "{TABLE0}": "professionals",
          "{COLUMN1}": "dog_id",
          "{TABLE1}": "dogs",
          "{TABLE2}": "treatments"
        },
        "query": "SELECT Professionals.first_name FROM Professionals EXCEPT SELECT Professionals.first_name FROM Dogs JOIN Professionals JOIN Treatments ON Dogs.dog_id = Treatments.dog_id AND Treatments.professional_id = Professionals.professional_id"
      },
      {
        "question": "Which professional did not operate any treatment on dogs ? List the professional 's id , role and email .",
        "concise pattern": "",
        "template": "which {COLUMN1} did not operate any treatment on dogs ? list the {COLUMN1} 's id , role and {COLUMN0} .",
        "name dict": {
          "{COLUMN1}": "professional_id",
          "{COLUMN0}": "email_address",
          "{TABLE0}": "professionals",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals EXCEPT SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id"
      },
      {
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment ?",
        "concise pattern": "",
        "template": "what are the arriving {COLUMN0} and the departing {COLUMN0} of the {TABLE0} who have gone through a treatment ?",
        "name dict": {
          "{COLUMN1}": "dog_id",
          "{COLUMN0}": "date_of_birth",
          "{TABLE0}": "dogs",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Dogs.date_of_birth, Dogs.date_of_birth FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id"
      },
      {
        "question": "Find the arriving date and the departing date of the dogs that received a treatment .",
        "concise pattern": "",
        "template": "find the arriving {COLUMN0} and the departing {COLUMN0} of the {TABLE0} that received a treatment .",
        "name dict": {
          "{COLUMN1}": "dog_id",
          "{COLUMN0}": "date_of_birth",
          "{TABLE0}": "dogs",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Dogs.date_of_birth, Dogs.date_of_birth FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id"
      },
      {
        "question": "What are the arriving date and the departing date of all the dogs ?",
        "concise pattern": "",
        "template": "what are the arriving {COLUMN0} and the departing {COLUMN0} of all the {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "date_arrived",
          "{TABLE0}": "dogs"
        },
        "query": "SELECT Dogs.date_arrived, Dogs.date_arrived FROM Dogs"
      },
      {
        "question": "List the arrival date and the departure date for all the dogs .",
        "concise pattern": "",
        "template": "list the arrival {COLUMN0} and the departure {COLUMN0} for all the {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "date_departed",
          "{TABLE0}": "dogs"
        },
        "query": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs"
      },
      {
        "question": "Show titles of songs and names of singers .",
        "concise pattern": "",
        "template": "show titles of {TABLE1} and {COLUMN0} of {TABLE0} .",
        "name dict": {
          "{COLUMN1}": "singer_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "singer",
          "{TABLE1}": "song"
        },
        "query": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID"
      },
      {
        "question": "What are the song titles and singer names ?",
        "concise pattern": "",
        "template": "what are the {TABLE1} titles and {COLUMN1} {COLUMN0} ?",
        "name dict": {
          "{COLUMN1}": "singer_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "singer",
          "{TABLE1}": "song"
        },
        "query": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID"
      },
      {
        "question": "Find the first name and age of students who have a pet .",
        "concise pattern": "",
        "template": "find the first name and {COLUMN0} of {TABLE0} who have a pet .",
        "name dict": {
          "{COLUMN1}": "stuid",
          "{COLUMN0}": "age",
          "{TABLE0}": "student",
          "{TABLE1}": "has pet"
        },
        "query": "SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID"
      },
      {
        "question": "What are the different first names and ages of the students who do have pets ?",
        "concise pattern": "",
        "template": "what are the different first names and {COLUMN0} of the {TABLE0} who do have pets ?",
        "name dict": {
          "{COLUMN1}": "stuid",
          "{COLUMN0}": "age",
          "{TABLE0}": "student",
          "{TABLE1}": "has pet"
        },
        "query": "SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID"
      },
      {
        "question": "What is the maximum accelerate for all the different cylinders ?",
        "concise pattern": "",
        "template": "what is the maximum {COLUMN0} for all the different {COLUMN1} ?",
        "name dict": {
          "{COLUMN1}": "cylinders",
          "{COLUMN0}": "accelerate",
          "{TABLE0}": "cars data",
          "{AGG0}": "MAX"
        },
        "query": "SELECT Max(cars_data.Accelerate), cars_data.Cylinders FROM cars_data"
      },
      {
        "question": "Which airports do not have departing or arriving flights ?",
        "concise pattern": "",
        "template": "which {TABLE0} do not have departing or arriving {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "airportcode",
          "{COLUMN0}": "airportname",
          "{COLUMN2}": "sourceairport",
          "{TABLE0}": "airports",
          "{TABLE1}": "flights"
        },
        "query": "SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport"
      },
      {
        "question": "What are the minimum and maximum number of products across all the shops ?",
        "concise pattern": "",
        "template": "what are the minimum and maximum {COLUMN0} of products across all the {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "number_products",
          "{TABLE0}": "shop",
          "{AGG1}": "MIN",
          "{AGG0}": "MIN"
        },
        "query": "SELECT Min(shop.Number_products), Min(shop.Number_products) FROM shop"
      },
      {
        "question": "What is total bonus given in all evaluations ?",
        "concise pattern": "",
        "template": "what is total {COLUMN0} given in all {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "bonus",
          "{TABLE0}": "evaluation",
          "{AGG0}": "SUM"
        },
        "query": "SELECT Sum(evaluation.Bonus) FROM evaluation"
      },
      {
        "question": "Find the total amount of bonus given in all the evaluations .",
        "concise pattern": "",
        "template": "find the total amount of {COLUMN0} given in all the {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "bonus",
          "{TABLE0}": "evaluation",
          "{AGG0}": "SUM"
        },
        "query": "SELECT Sum(evaluation.Bonus) FROM evaluation"
      },
      {
        "question": "What are the ids for templates that are not used in any documents ?",
        "concise pattern": "",
        "template": "what are the ids for {TABLE0} that are not used in any {TABLE1} ?",
        "name dict": {
          "{COLUMN0}": "template_id",
          "{TABLE0}": "templates",
          "{TABLE1}": "documents"
        },
        "query": "SELECT Templates.Template_ID FROM Templates EXCEPT SELECT Documents.Template_ID FROM Documents"
      },
      {
        "question": "Show all distinct template type codes for all templates .",
        "concise pattern": "",
        "template": "show all distinct {COLUMN0} type codes for all {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates"
        },
        "query": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates"
      },
      {
        "question": "What are the distinct template type descriptions for the templates ever used by any document ?",
        "concise pattern": "",
        "template": "what are the distinct {COLUMN0} type descriptions for the {TABLE1} ever used by any document ?",
        "name dict": {
          "{COLUMN1}": "template_type_code",
          "{COLUMN0}": "template_type_description",
          "{TABLE0}": "reference template types",
          "{TABLE1}": "templates"
        },
        "query": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code"
      },
      {
        "question": "What are the age and hometown of teachers ?",
        "concise pattern": "",
        "template": "what are the age and {COLUMN0} of {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "hometown",
          "{TABLE0}": "teacher"
        },
        "query": "SELECT teacher.Age, teacher.Hometown FROM teacher"
      },
      {
        "question": "What is the age and hometown of every teacher ?",
        "concise pattern": "",
        "template": "what is the age and {COLUMN0} of every {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "hometown",
          "{TABLE0}": "teacher"
        },
        "query": "SELECT teacher.Age, teacher.Hometown FROM teacher"
      },
      {
        "question": "Show names of teachers and the courses they are arranged to teach .",
        "concise pattern": "",
        "template": "show names of {TABLE0} and the {COLUMN0} they are arranged to teach .",
        "name dict": {
          "{COLUMN1}": "course_id",
          "{COLUMN0}": "course",
          "{COLUMN2}": "teacher_id",
          "{TABLE0}": "teacher",
          "{TABLE1}": "course arrange"
        },
        "query": "SELECT teacher.Name, course.Course FROM course JOIN teacher JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID AND course_arrange.Teacher_ID = teacher.Teacher_ID AND course.Course_ID = course_arrange.Course_ID"
      },
      {
        "question": "What is the name of each teacher and what course they teach ?",
        "concise pattern": "",
        "template": "what is the name of each {COLUMN2} and what {COLUMN0} they teach ?",
        "name dict": {
          "{COLUMN1}": "course_id",
          "{COLUMN0}": "course",
          "{COLUMN2}": "teacher_id",
          "{TABLE0}": "teacher",
          "{TABLE1}": "course arrange"
        },
        "query": "SELECT teacher.Name, course.Course FROM course JOIN teacher JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID AND course_arrange.Teacher_ID = teacher.Teacher_ID AND course.Course_ID = course_arrange.Course_ID"
      },
      {
        "question": "find the number of distinct country codes of all players .",
        "concise pattern": "",
        "template": "find the number of distinct {COLUMN0} codes of all {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "country_code",
          "{TABLE0}": "players",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT players.country_code) FROM players"
      },
      {
        "question": "List the name , date and result of each battle .",
        "concise pattern": "",
        "template": "list the name , date and {COLUMN0} of each {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "result",
          "{TABLE0}": "battle"
        },
        "query": "SELECT battle.name, battle.date, battle.result FROM battle"
      },
      {
        "question": "How many different results are there for the battles ?",
        "concise pattern": "",
        "template": "how many different {COLUMN0} are there for the {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "result",
          "{TABLE0}": "battle",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT battle.result) FROM battle"
      },
      {
        "question": "Which semesters do not have any student enrolled ? List the semester name .",
        "concise pattern": "",
        "template": "which {TABLE0} do not have any student enrolled ? list the {COLUMN0} name .",
        "name dict": {
          "{COLUMN1}": "semester_id",
          "{COLUMN0}": "semester_name",
          "{TABLE0}": "semesters",
          "{TABLE1}": "student enrolment"
        },
        "query": "SELECT Semesters.semester_name FROM Semesters EXCEPT SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id"
      },
      {
        "question": "What are all the course names of the courses which ever have students enrolled in ?",
        "concise pattern": "",
        "template": "what are all the {COLUMN0} names of the {TABLE0} which ever have students enrolled in ?",
        "name dict": {
          "{COLUMN1}": "course_id",
          "{COLUMN0}": "course_name",
          "{TABLE0}": "courses",
          "{TABLE1}": "student enrolment courses"
        },
        "query": "SELECT Courses.course_name FROM Courses INTERSECT SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id"
      },
      {
        "question": "What are the different addresses that have students living there ?",
        "concise pattern": "",
        "template": "what are the different {TABLE0} that have {TABLE1} living there ?",
        "name dict": {
          "{COLUMN1}": "current_address_id",
          "{COLUMN0}": "address_id",
          "{TABLE0}": "addresses",
          "{TABLE1}": "students"
        },
        "query": "SELECT DISTINCT Addresses.address_id FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id"
      },
      {
        "question": "List the vote ids , phone numbers and states of all votes .",
        "concise pattern": "",
        "template": "list the vote ids , phone numbers and {COLUMN0} of all {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "state",
          "{TABLE0}": "votes"
        },
        "query": "SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES"
      },
      {
        "question": "What are the distinct states and create time of all votes ?",
        "concise pattern": "",
        "template": "what are the distinct states and {COLUMN0} time of all {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "created",
          "{TABLE0}": "votes"
        },
        "query": "SELECT DISTINCT VOTES.state, VOTES.created FROM VOTES"
      },
      {
        "question": "What is the average attendance of shows ?",
        "concise pattern": "",
        "template": "what is the average {COLUMN0} of {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "attendance",
          "{TABLE0}": "show",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(show.Attendance) FROM show"
      },
      {
        "question": "Return the average attendance across all shows .",
        "concise pattern": "",
        "template": "return the average {COLUMN0} across all {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "attendance",
          "{TABLE0}": "show",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(show.Attendance) FROM show"
      },
      {
        "question": "How many different nationalities do conductors have ?",
        "concise pattern": "",
        "template": "how many different {COLUMN0} do {TABLE0} have ?",
        "name dict": {
          "{COLUMN0}": "nationality",
          "{TABLE0}": "conductor",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT conductor.Nationality) FROM conductor"
      },
      {
        "question": "Count the number of different nationalities of conductors .",
        "concise pattern": "",
        "template": "count the number of different {COLUMN0} of {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "nationality",
          "{TABLE0}": "conductor",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT conductor.Nationality) FROM conductor"
      },
      {
        "question": "Show the names of conductors and the orchestras they have conducted .",
        "concise pattern": "",
        "template": "show the names of {TABLE0} and the {COLUMN0} they have conducted .",
        "name dict": {
          "{COLUMN1}": "conductor_id",
          "{COLUMN0}": "orchestra",
          "{TABLE0}": "conductor"
        },
        "query": "SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID"
      },
      {
        "question": "Show ids of all students who do not have any friends .",
        "concise pattern": "",
        "template": "show {COLUMN0} of all students who do not have any {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "student_id",
          "{COLUMN0}": "id",
          "{TABLE0}": "high schooler",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Highschooler.ID FROM Highschooler EXCEPT SELECT Friend.student_id FROM Friend"
      },
      {
        "question": "What are the ids of high school students who do not have friends ?",
        "concise pattern": "",
        "template": "what are the {COLUMN0} of high school students who do not have {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "student_id",
          "{COLUMN0}": "id",
          "{TABLE0}": "high schooler",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Highschooler.ID FROM Highschooler EXCEPT SELECT Friend.student_id FROM Friend"
      },
      {
        "question": "Show name of all students who have some friends and also are liked by someone else .",
        "concise pattern": "",
        "template": "show {COLUMN0} of all students who have some friends and also are {COLUMN2} by someone else .",
        "name dict": {
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "liked_id",
          "{TABLE0}": "high schooler",
          "{TABLE1}": "likes"
        },
        "query": "SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id"
      },
      {
        "question": "What are the names of high schoolers who both have friends and are liked ?",
        "concise pattern": "",
        "template": "what are the {COLUMN0} of high schoolers who both have {TABLE1} and are liked ?",
        "name dict": {
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "student_id",
          "{TABLE0}": "high schooler",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id"
      },
      {
        "question": "Which states have both owners and professionals living there ?",
        "concise pattern": "",
        "template": "which {COLUMN0} have both owners and {TABLE0} living there ?",
        "name dict": {
          "{COLUMN0}": "state",
          "{TABLE0}": "professionals"
        },
        "query": "SELECT Professionals.state FROM Professionals INTERSECT SELECT Professionals.state FROM Professionals"
      },
      {
        "question": "Find the states where both owners and professionals live .",
        "concise pattern": "",
        "template": "find the {COLUMN0} where both owners and {TABLE0} live .",
        "name dict": {
          "{COLUMN0}": "state",
          "{TABLE0}": "professionals"
        },
        "query": "SELECT Professionals.state FROM Professionals INTERSECT SELECT Professionals.state FROM Professionals"
      },
      {
        "question": "Give me the id , role and email of the professionals who did not perform any treatment on dogs .",
        "concise pattern": "",
        "template": "give me the id , role and {COLUMN0} of the {TABLE0} who did not perform any treatment on dogs .",
        "name dict": {
          "{COLUMN1}": "professional_id",
          "{COLUMN0}": "email_address",
          "{TABLE0}": "professionals",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals EXCEPT SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id"
      },
      {
        "question": "List the date of each treatment , together with the first name of the professional who operated it .",
        "concise pattern": "",
        "template": "list the date of each treatment , together with the {COLUMN0} name of the {COLUMN1} who operated it .",
        "name dict": {
          "{COLUMN1}": "professional_id",
          "{COLUMN0}": "first_name",
          "{TABLE0}": "professionals",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id"
      },
      {
        "question": "What are the date and the operating professional 's first name of each treatment ?",
        "concise pattern": "",
        "template": "what are the date and the operating {COLUMN1} 's {COLUMN0} name of each treatment ?",
        "name dict": {
          "{COLUMN1}": "professional_id",
          "{COLUMN0}": "first_name",
          "{TABLE0}": "professionals",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id"
      },
      {
        "question": "List the cost of each treatment and the corresponding treatment type description .",
        "concise pattern": "",
        "template": "list the cost of each {COLUMN0} and the corresponding {COLUMN0} type description .",
        "name dict": {
          "{COLUMN1}": "treatment_type_code",
          "{COLUMN0}": "treatment_type_description",
          "{TABLE0}": "treatment types",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code"
      },
      {
        "question": "What are the cost and treatment type description of each treatment ?",
        "concise pattern": "",
        "template": "what are the cost and {COLUMN0} type description of each {COLUMN0} ?",
        "name dict": {
          "{COLUMN1}": "treatment_type_code",
          "{COLUMN0}": "treatment_type_description",
          "{TABLE0}": "treatment types",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code"
      },
      {
        "question": "List each owner 's first name , last name , and the size of his for her dog .",
        "concise pattern": "",
        "template": "list each {COLUMN2} 's first name , last name , and the {COLUMN0} of his for her dog .",
        "name dict": {
          "{COLUMN0}": "size_description",
          "{COLUMN2}": "owner_id",
          "{TABLE0}": "sizes",
          "{COLUMN1}": "size_code",
          "{TABLE1}": "owners",
          "{TABLE2}": "dogs"
        },
        "query": "SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Sizes JOIN Owners JOIN Dogs ON Sizes.size_code = Dogs.size_code AND Dogs.owner_id = Owners.owner_id"
      },
      {
        "question": "What are each owner 's first name , last name , and the size of their dog ?",
        "concise pattern": "",
        "template": "what are each {COLUMN2} 's first name , last name , and the {COLUMN0} of their dog ?",
        "name dict": {
          "{COLUMN0}": "size_description",
          "{COLUMN2}": "owner_id",
          "{TABLE0}": "sizes",
          "{COLUMN1}": "size_code",
          "{TABLE1}": "owners",
          "{TABLE2}": "dogs"
        },
        "query": "SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Sizes JOIN Owners JOIN Dogs ON Sizes.size_code = Dogs.size_code AND Dogs.owner_id = Owners.owner_id"
      },
      {
        "question": "What is the average age of all the dogs ?",
        "concise pattern": "",
        "template": "what is the average {COLUMN0} of all the {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "age",
          "{TABLE0}": "dogs",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(Dogs.age) FROM Dogs"
      },
      {
        "question": "Compute the average age of all the dogs .",
        "concise pattern": "",
        "template": "compute the average {COLUMN0} of all the {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "age",
          "{TABLE0}": "dogs",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(Dogs.age) FROM Dogs"
      },
      {
        "question": "List the email , cell phone and home phone of all the professionals .",
        "concise pattern": "",
        "template": "list the email , cell phone and {COLUMN0} phone of all the {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "home_phone",
          "{TABLE0}": "professionals"
        },
        "query": "SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals"
      },
      {
        "question": "What are all the possible breed type and size type combinations ?",
        "concise pattern": "",
        "template": "what are all the possible {COLUMN1} type and {COLUMN2} type combinations ?",
        "name dict": {
          "{COLUMN0}": "size_description",
          "{COLUMN2}": "size_code",
          "{TABLE0}": "breeds",
          "{COLUMN1}": "breed_code",
          "{TABLE1}": "sizes",
          "{TABLE2}": "dogs"
        },
        "query": "SELECT Sizes.size_description FROM Breeds JOIN Sizes JOIN Dogs ON Breeds.breed_code = Dogs.breed_code AND Dogs.size_code = Sizes.size_code INTERSECT SELECT Sizes.size_description FROM Sizes"
      },
      {
        "question": "Find the distinct breed type and size type combinations for dogs .",
        "concise pattern": "",
        "template": "find the distinct breed type and {COLUMN0} type combinations for {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "size_code",
          "{COLUMN0}": "size_description",
          "{TABLE0}": "sizes",
          "{TABLE1}": "dogs"
        },
        "query": "SELECT DISTINCT Dogs.breed_code, Sizes.size_description FROM Sizes JOIN Dogs ON Sizes.size_code = Dogs.size_code"
      },
      {
        "question": "List the first name of all the professionals along with the description of the treatment they have done .",
        "concise pattern": "",
        "template": "list the first name of all the {TABLE1} along with the description of the {COLUMN0} they have done .",
        "name dict": {
          "{COLUMN0}": "treatment_type_description",
          "{COLUMN2}": "professional_id",
          "{TABLE0}": "treatment types",
          "{COLUMN1}": "treatment_type_code",
          "{TABLE1}": "professionals",
          "{TABLE2}": "treatments"
        },
        "query": "SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Treatment_Types JOIN Professionals JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code AND Treatments.professional_id = Professionals.professional_id AND Treatment_Types.treatment_type_code = Treatments.treatment_type_code"
      },
      {
        "question": "What are each professional 's first name and description of the treatment they have performed ?",
        "concise pattern": "",
        "template": "what are each {COLUMN2} 's first name and description of the {COLUMN0} they have performed ?",
        "name dict": {
          "{COLUMN0}": "treatment_type_description",
          "{COLUMN2}": "professional_id",
          "{TABLE0}": "treatment types",
          "{COLUMN1}": "treatment_type_code",
          "{TABLE1}": "professionals",
          "{TABLE2}": "treatments"
        },
        "query": "SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Treatment_Types JOIN Professionals JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code AND Treatments.professional_id = Professionals.professional_id AND Treatment_Types.treatment_type_code = Treatments.treatment_type_code"
      },
      {
        "question": "What are the birth year and citizenship of singers ?",
        "concise pattern": "",
        "template": "what are the birth year and {COLUMN0} of {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "citizenship",
          "{TABLE0}": "singer"
        },
        "query": "SELECT singer.Birth_Year, singer.Citizenship FROM singer"
      },
      {
        "question": "What are the birth years and citizenships of the singers ?",
        "concise pattern": "",
        "template": "what are the birth years and {COLUMN0} of the {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "citizenship",
          "{TABLE0}": "singer"
        },
        "query": "SELECT singer.Birth_Year, singer.Citizenship FROM singer"
      },
      {
        "question": "How many singers do we have ?",
        "concise pattern": "",
        "template": "how many {TABLE0} do we have ?",
        "name dict": {
          "{TABLE0}": "singer",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM singer"
      },
      {
        "question": "What is the total number of singers ?",
        "concise pattern": "",
        "template": "what is the total number of {TABLE0} ?",
        "name dict": {
          "{TABLE0}": "singer",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM singer"
      },
      {
        "question": "What is the average and maximum capacities for all stations ?",
        "concise pattern": "",
        "template": "what is the average and maximum {COLUMN0} for all stations ?",
        "name dict": {
          "{COLUMN0}": "capacity",
          "{TABLE0}": "stadium",
          "{AGG1}": "MIN",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(stadium.Capacity), Min(stadium.Capacity) FROM stadium"
      },
      {
        "question": "Find the number of distinct type of pets .",
        "concise pattern": "",
        "template": "find the number of distinct type of {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "pettype",
          "{TABLE0}": "pets",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT Pets.PetType) FROM Pets"
      },
      {
        "question": "How many continents are there ?",
        "concise pattern": "",
        "template": "how many {COLUMN0} are there ?",
        "name dict": {
          "{COLUMN0}": "continent",
          "{TABLE0}": "continents",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT continents.Continent) FROM continents"
      },
      {
        "question": "What is the number of continents ?",
        "concise pattern": "",
        "template": "what is the number of {TABLE0} ?",
        "name dict": {
          "{TABLE0}": "continents",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM continents"
      },
      {
        "question": "How many countries are listed ?",
        "concise pattern": "",
        "template": "how many {TABLE0} are listed ?",
        "name dict": {
          "{TABLE0}": "countries",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM countries"
      },
      {
        "question": "How many countries exist ?",
        "concise pattern": "",
        "template": "how many {TABLE0} exist ?",
        "name dict": {
          "{TABLE0}": "countries",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM countries"
      },
      {
        "question": "What are all the makers and models ?",
        "concise pattern": "",
        "template": "what are all the makers and {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "model",
          "{TABLE0}": "model list"
        },
        "query": "SELECT model_list.Maker, model_list.Model FROM model_list"
      },
      {
        "question": "What are the makers and models ?",
        "concise pattern": "",
        "template": "what are the makers and {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "model",
          "{TABLE0}": "model list"
        },
        "query": "SELECT model_list.Maker, model_list.Model FROM model_list"
      },
      {
        "question": "What is the maximum accelerate for different number of cylinders ?",
        "concise pattern": "",
        "template": "what is the maximum {COLUMN0} for different number of cylinders ?",
        "name dict": {
          "{COLUMN0}": "accelerate",
          "{TABLE0}": "cars data",
          "{AGG0}": "MAX"
        },
        "query": "SELECT Max(cars_data.Accelerate) FROM cars_data"
      },
      {
        "question": "How many airlines do we have ?",
        "concise pattern": "",
        "template": "how many {TABLE0} do we have ?",
        "name dict": {
          "{TABLE0}": "airlines",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM airlines"
      },
      {
        "question": "What is the total number of airlines ?",
        "concise pattern": "",
        "template": "what is the total number of {TABLE0} ?",
        "name dict": {
          "{TABLE0}": "airlines",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM airlines"
      },
      {
        "question": "How many airports do we have ?",
        "concise pattern": "",
        "template": "how many {TABLE0} do we have ?",
        "name dict": {
          "{TABLE0}": "airports",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM airports"
      },
      {
        "question": "Return the number of airports .",
        "concise pattern": "",
        "template": "return the number of {TABLE0} .",
        "name dict": {
          "{TABLE0}": "airports",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM airports"
      },
      {
        "question": "How many flights do we have ?",
        "concise pattern": "",
        "template": "how many {TABLE0} do we have ?",
        "name dict": {
          "{TABLE0}": "flights",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM flights"
      },
      {
        "question": "Return the number of flights .",
        "concise pattern": "",
        "template": "return the number of {TABLE0} .",
        "name dict": {
          "{TABLE0}": "flights",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM flights"
      },
      {
        "question": "How many employees are there ?",
        "concise pattern": "",
        "template": "how many {TABLE0} are there ?",
        "name dict": {
          "{TABLE0}": "employee",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM employee"
      },
      {
        "question": "Count the number of employees",
        "concise pattern": "",
        "template": "count the number of {TABLE0}",
        "name dict": {
          "{TABLE0}": "employee",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM employee"
      },
      {
        "question": "Give me all the information about hiring .",
        "concise pattern": "",
        "template": "give me all the information about {TABLE0} .",
        "name dict": {
          "{TABLE0}": "hiring"
        },
        "query": "SELECT * FROM hiring"
      },
      {
        "question": "What is all the information about hiring ?",
        "concise pattern": "",
        "template": "what is all the information about {TABLE0} ?",
        "name dict": {
          "{TABLE0}": "hiring"
        },
        "query": "SELECT * FROM hiring"
      },
      {
        "question": "How many different store locations are there ?",
        "concise pattern": "",
        "template": "how many different store {COLUMN0} are there ?",
        "name dict": {
          "{COLUMN0}": "location",
          "{TABLE0}": "shop",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT shop.Location) FROM shop"
      },
      {
        "question": "Count the number of distinct store locations .",
        "concise pattern": "",
        "template": "count the number of distinct store {COLUMN0} .",
        "name dict": {
          "{COLUMN0}": "location",
          "{TABLE0}": "shop",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT shop.Location) FROM shop"
      },
      {
        "question": "How many documents do we have ?",
        "concise pattern": "",
        "template": "how many {TABLE0} do we have ?",
        "name dict": {
          "{TABLE0}": "documents",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Documents"
      },
      {
        "question": "Count the number of documents .",
        "concise pattern": "",
        "template": "count the number of {TABLE0} .",
        "name dict": {
          "{TABLE0}": "documents",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Documents"
      },
      {
        "question": "What are the ids , names , and descriptions for all documents ?",
        "concise pattern": "",
        "template": "what are the ids , names , and descriptions for all {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "document_description",
          "{TABLE0}": "documents"
        },
        "query": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents"
      },
      {
        "question": "Count the number of different templates used for documents .",
        "concise pattern": "",
        "template": "count the number of different templates used for {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "template_id",
          "{TABLE0}": "documents",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT Documents.Template_ID) FROM Documents"
      },
      {
        "question": "Show ids for all templates not used by any document .",
        "concise pattern": "",
        "template": "show ids for all {TABLE0} not used by any document .",
        "name dict": {
          "{COLUMN0}": "template_id",
          "{TABLE0}": "templates",
          "{TABLE1}": "documents"
        },
        "query": "SELECT Templates.Template_ID FROM Templates EXCEPT SELECT Documents.Template_ID FROM Documents"
      },
      {
        "question": "How many templates do we have ?",
        "concise pattern": "",
        "template": "how many {TABLE0} do we have ?",
        "name dict": {
          "{TABLE0}": "templates",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Templates"
      },
      {
        "question": "Count the number of templates .",
        "concise pattern": "",
        "template": "count the number of {TABLE0} .",
        "name dict": {
          "{TABLE0}": "templates",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Templates"
      },
      {
        "question": "What are the ids , version numbers , and type codes for each template ?",
        "concise pattern": "",
        "template": "what are the ids , version numbers , and type codes for each {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates"
        },
        "query": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates"
      },
      {
        "question": "What are the different template type codes ?",
        "concise pattern": "",
        "template": "what are the different {COLUMN0} type codes ?",
        "name dict": {
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "reference template types"
        },
        "query": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types"
      },
      {
        "question": "Show all template type codes that are not used by any document .",
        "concise pattern": "",
        "template": "show all {COLUMN0} type codes that are not used by any document .",
        "name dict": {
          "{COLUMN1}": "template_id",
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates",
          "{TABLE1}": "documents"
        },
        "query": "SELECT Templates.Template_Type_Code FROM Templates EXCEPT SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID"
      },
      {
        "question": "What are the codes of template types that are not used for any document ?",
        "concise pattern": "",
        "template": "what are the codes of {COLUMN0} types that are not used for any document ?",
        "name dict": {
          "{COLUMN1}": "template_id",
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates",
          "{TABLE1}": "documents"
        },
        "query": "SELECT Templates.Template_Type_Code FROM Templates EXCEPT SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID"
      },
      {
        "question": "Show all template type codes and descriptions .",
        "concise pattern": "",
        "template": "show all {COLUMN0} type codes and descriptions .",
        "name dict": {
          "{COLUMN0}": "template_type_description",
          "{TABLE0}": "reference template types"
        },
        "query": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types"
      },
      {
        "question": "What are the type codes and descriptions for all template types ?",
        "concise pattern": "",
        "template": "what are the type codes and descriptions for all {COLUMN0} types ?",
        "name dict": {
          "{COLUMN0}": "template_type_description",
          "{TABLE0}": "reference template types"
        },
        "query": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types"
      },
      {
        "question": "Return the different descriptions for templates that have been used in a document .",
        "concise pattern": "",
        "template": "return the different descriptions for {TABLE0} that have been used in a document .",
        "name dict": {
          "{COLUMN0}": "template_id",
          "{TABLE0}": "templates",
          "{TABLE1}": "documents"
        },
        "query": "SELECT DISTINCT * FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID"
      },
      {
        "question": "How many paragraphs in total ?",
        "concise pattern": "",
        "template": "how many {TABLE0} in total ?",
        "name dict": {
          "{TABLE0}": "paragraphs",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Paragraphs"
      },
      {
        "question": "Count the number of paragraphs .",
        "concise pattern": "",
        "template": "count the number of {TABLE0} .",
        "name dict": {
          "{TABLE0}": "paragraphs",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Paragraphs"
      },
      {
        "question": "How many teachers are there ?",
        "concise pattern": "",
        "template": "how many {TABLE0} are there ?",
        "name dict": {
          "{TABLE0}": "teacher",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM teacher"
      },
      {
        "question": "What is the total count of teachers ?",
        "concise pattern": "",
        "template": "what is the total count of {TABLE0} ?",
        "name dict": {
          "{TABLE0}": "teacher",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM teacher"
      },
      {
        "question": "What are the average and maximum number of tickets bought in all visits ?",
        "concise pattern": "",
        "template": "what are the average and maximum number of tickets bought in all {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "num_of_ticket",
          "{TABLE0}": "visit",
          "{AGG1}": "MIN",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(visit.Num_of_Ticket), Min(visit.Num_of_Ticket) FROM visit"
      },
      {
        "question": "Find the total number of players .",
        "concise pattern": "",
        "template": "find the total number of {TABLE0} .",
        "name dict": {
          "{TABLE0}": "players",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM players"
      },
      {
        "question": "How many players are there ?",
        "concise pattern": "",
        "template": "how many {TABLE0} are there ?",
        "name dict": {
          "{TABLE0}": "players",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM players"
      },
      {
        "question": "Find the total number of matches .",
        "concise pattern": "",
        "template": "find the total number of {TABLE0} .",
        "name dict": {
          "{TABLE0}": "matches",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM matches"
      },
      {
        "question": "Count the number of matches .",
        "concise pattern": "",
        "template": "count the number of {TABLE0} .",
        "name dict": {
          "{TABLE0}": "matches",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM matches"
      },
      {
        "question": "Find the average age of losers and winners of all matches .",
        "concise pattern": "",
        "template": "find the average age of losers and winners of all {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "loser_rank_points",
          "{TABLE0}": "matches",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(matches.loser_rank_points) FROM matches"
      },
      {
        "question": "What are the average ages of losers and winners across matches ?",
        "concise pattern": "",
        "template": "what are the average ages of losers and winners across {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "loser_rank_points",
          "{TABLE0}": "matches",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(matches.loser_rank_points) FROM matches"
      },
      {
        "question": "Find the average rank of winners in all matches .",
        "concise pattern": "",
        "template": "find the average {COLUMN0} of winners in all matches .",
        "name dict": {
          "{COLUMN0}": "ranking",
          "{TABLE0}": "rankings",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(rankings.ranking) FROM rankings"
      },
      {
        "question": "What is the average rank for winners in all matches ?",
        "concise pattern": "",
        "template": "what is the average {COLUMN0} for winners in all matches ?",
        "name dict": {
          "{COLUMN0}": "ranking",
          "{TABLE0}": "rankings",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(rankings.ranking) FROM rankings"
      },
      {
        "question": "How many distinct countries do players come from ?",
        "concise pattern": "",
        "template": "how many distinct countries do {TABLE0} come from ?",
        "name dict": {
          "{COLUMN0}": "country_code",
          "{TABLE0}": "players",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT players.country_code) FROM players"
      },
      {
        "question": "How many different loser names are there ?",
        "concise pattern": "",
        "template": "how many different {COLUMN0} names are there ?",
        "name dict": {
          "{COLUMN0}": "loser_name",
          "{TABLE0}": "matches",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT matches.loser_name) FROM matches"
      },
      {
        "question": "How many ships ended up being 'Captured ' ?",
        "concise pattern": "",
        "template": "how many {TABLE0} ended up being 'captured ' ?",
        "name dict": {
          "{TABLE0}": "ship",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM ship"
      },
      {
        "question": "How many courses in total are listed ?",
        "concise pattern": "",
        "template": "how many {TABLE0} in total are listed ?",
        "name dict": {
          "{TABLE0}": "courses",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Courses"
      },
      {
        "question": "How many courses are there ?",
        "concise pattern": "",
        "template": "how many {TABLE0} are there ?",
        "name dict": {
          "{TABLE0}": "courses",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Courses"
      },
      {
        "question": "How many different degree names are offered ?",
        "concise pattern": "",
        "template": "how many different {COLUMN0} names are offered ?",
        "name dict": {
          "{COLUMN0}": "degree_summary_name",
          "{TABLE0}": "degree programs",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs"
      },
      {
        "question": "What are the names and descriptions of all the sections ?",
        "concise pattern": "",
        "template": "what are the names and descriptions of all the {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "section_description",
          "{TABLE0}": "sections"
        },
        "query": "SELECT Sections.section_name, Sections.section_description FROM Sections"
      },
      {
        "question": "What are the names and descriptions for all the sections ?",
        "concise pattern": "",
        "template": "what are the names and descriptions for all the {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "section_description",
          "{TABLE0}": "sections"
        },
        "query": "SELECT Sections.section_name, Sections.section_description FROM Sections"
      },
      {
        "question": "What is the name of the semester with no students enrolled ?",
        "concise pattern": "",
        "template": "what is the name of the {COLUMN0} with no students enrolled ?",
        "name dict": {
          "{COLUMN1}": "semester_id",
          "{COLUMN0}": "semester_name",
          "{TABLE0}": "semesters",
          "{TABLE1}": "student enrolment"
        },
        "query": "SELECT Semesters.semester_name FROM Semesters EXCEPT SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id"
      },
      {
        "question": "What are the names of all courses that have some students enrolled ?",
        "concise pattern": "",
        "template": "what are the names of all {TABLE0} that have some students enrolled ?",
        "name dict": {
          "{COLUMN1}": "course_id",
          "{COLUMN0}": "course_name",
          "{TABLE0}": "courses",
          "{TABLE1}": "student enrolment courses"
        },
        "query": "SELECT Courses.course_name FROM Courses INTERSECT SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id"
      },
      {
        "question": "Who is the first student to register ? List the first name , middle name and last name .",
        "concise pattern": "",
        "template": "who is the first student to register ? list the first name , middle name and {COLUMN0} name .",
        "name dict": {
          "{COLUMN0}": "last_name",
          "{TABLE0}": "students"
        },
        "query": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students"
      },
      {
        "question": "On average , when were the transcripts printed ?",
        "concise pattern": "",
        "template": "on average , when were the {TABLE0} printed ?",
        "name dict": {
          "{COLUMN0}": "transcript_date",
          "{TABLE0}": "transcripts",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(Transcripts.transcript_date) FROM Transcripts"
      },
      {
        "question": "What is the average transcript date ?",
        "concise pattern": "",
        "template": "what is the average {COLUMN0} date ?",
        "name dict": {
          "{COLUMN0}": "transcript_date",
          "{TABLE0}": "transcripts",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(Transcripts.transcript_date) FROM Transcripts"
      },
      {
        "question": "How many transcripts are released ?",
        "concise pattern": "",
        "template": "how many {TABLE0} are released ?",
        "name dict": {
          "{TABLE0}": "transcripts",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Transcripts"
      },
      {
        "question": "How many transcripts are listed ?",
        "concise pattern": "",
        "template": "how many {TABLE0} are listed ?",
        "name dict": {
          "{TABLE0}": "transcripts",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Transcripts"
      },
      {
        "question": "How many different addresses do the students currently live ?",
        "concise pattern": "",
        "template": "how many different {TABLE0} do the students currently live ?",
        "name dict": {
          "{COLUMN0}": "address_id",
          "{TABLE0}": "addresses",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT Addresses.address_id) FROM Addresses"
      },
      {
        "question": "List the number of different series names and contents in the TV Channel table .",
        "concise pattern": "",
        "template": "list the number of different {COLUMN0} names and contents in the tv channel table .",
        "name dict": {
          "{COLUMN1}": "pay_per_view_ppv",
          "{COLUMN0}": "series_name",
          "{TABLE0}": "tv channel",
          "{AGG1}": "COUNT",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT TV_Channel.series_name), Count(DISTINCT TV_Channel.Pay_per_view_PPV) FROM TV_Channel"
      },
      {
        "question": "How many different series and contents are listed in the TV Channel table ?",
        "concise pattern": "",
        "template": "how many different {COLUMN0} and contents are listed in the tv channel table ?",
        "name dict": {
          "{COLUMN1}": "pay_per_view_ppv",
          "{COLUMN0}": "series_name",
          "{TABLE0}": "tv channel",
          "{AGG1}": "COUNT",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT TV_Channel.series_name), Count(DISTINCT TV_Channel.Pay_per_view_PPV) FROM TV_Channel"
      },
      {
        "question": "What is minimum and maximum share of TV series ?",
        "concise pattern": "",
        "template": "what is minimum and maximum {COLUMN0} of tv series ?",
        "name dict": {
          "{COLUMN0}": "share",
          "{TABLE0}": "tv series",
          "{AGG1}": "MIN",
          "{AGG0}": "MAX"
        },
        "query": "SELECT Max(TV_series.Share), Min(TV_series.Share) FROM TV_series"
      },
      {
        "question": "What is the maximum and minimum share for the TV series ?",
        "concise pattern": "",
        "template": "what is the maximum and minimum {COLUMN0} for the tv series ?",
        "name dict": {
          "{COLUMN0}": "share",
          "{TABLE0}": "tv series",
          "{AGG1}": "MIN",
          "{AGG0}": "MAX"
        },
        "query": "SELECT Max(TV_series.Share), Min(TV_series.Share) FROM TV_series"
      },
      {
        "question": "List the final tables made and the best finishes of poker players .",
        "concise pattern": "",
        "template": "list the {COLUMN0} tables made and the best finishes of poker players .",
        "name dict": {
          "{COLUMN0}": "final_table_made",
          "{TABLE0}": "poker player"
        },
        "query": "SELECT poker_player.Final_Table_Made, poker_player.Final_Table_Made FROM poker_player"
      },
      {
        "question": "What are the final tables made and best finishes for all poker players ?",
        "concise pattern": "",
        "template": "what are the final tables made and {COLUMN0} finishes for all poker players ?",
        "name dict": {
          "{COLUMN0}": "best_finish",
          "{TABLE0}": "poker player"
        },
        "query": "SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player"
      },
      {
        "question": "What is the average earnings of poker players ?",
        "concise pattern": "",
        "template": "what is the average {COLUMN0} of poker players ?",
        "name dict": {
          "{COLUMN0}": "earnings",
          "{TABLE0}": "poker player",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(poker_player.Earnings) FROM poker_player"
      },
      {
        "question": "Return the average earnings across all poker players .",
        "concise pattern": "",
        "template": "return the average {COLUMN0} across all poker players .",
        "name dict": {
          "{COLUMN0}": "earnings",
          "{TABLE0}": "poker player",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(poker_player.Earnings) FROM poker_player"
      },
      {
        "question": "What are the names of poker players ?",
        "concise pattern": "",
        "template": "what are the {COLUMN0} of poker players ?",
        "name dict": {
          "{COLUMN1}": "people_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "poker player",
          "{TABLE1}": "people"
        },
        "query": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID"
      },
      {
        "question": "Return the names of all the poker players .",
        "concise pattern": "",
        "template": "return the {COLUMN0} of all the poker players .",
        "name dict": {
          "{COLUMN1}": "people_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "poker player",
          "{TABLE1}": "people"
        },
        "query": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID"
      },
      {
        "question": "How many distinct nationalities are there ?",
        "concise pattern": "",
        "template": "how many distinct {COLUMN0} are there ?",
        "name dict": {
          "{COLUMN0}": "nationality",
          "{TABLE0}": "people",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT people.Nationality) FROM people"
      },
      {
        "question": "Count the number of different nationalities .",
        "concise pattern": "",
        "template": "count the number of different {COLUMN0} .",
        "name dict": {
          "{COLUMN0}": "nationality",
          "{TABLE0}": "people",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT people.Nationality) FROM people"
      },
      {
        "question": "How many states are there ?",
        "concise pattern": "",
        "template": "how many {COLUMN0} are there ?",
        "name dict": {
          "{COLUMN0}": "state",
          "{TABLE0}": "votes",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT VOTES.state) FROM VOTES"
      },
      {
        "question": "How many unique languages are spoken in the world ?",
        "concise pattern": "",
        "template": "how many unique {COLUMN0} are spoken in the world ?",
        "name dict": {
          "{COLUMN0}": "language",
          "{TABLE0}": "countrylanguage",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT countrylanguage.Language) FROM countrylanguage"
      },
      {
        "question": "What is the number of distinct languages used around the world ?",
        "concise pattern": "",
        "template": "what is the number of distinct {COLUMN0} used around the world ?",
        "name dict": {
          "{COLUMN0}": "language",
          "{TABLE0}": "countrylanguage",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT countrylanguage.Language) FROM countrylanguage"
      },
      {
        "question": "How many conductors are there ?",
        "concise pattern": "",
        "template": "how many {TABLE0} are there ?",
        "name dict": {
          "{TABLE0}": "conductor",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM conductor"
      },
      {
        "question": "Count the number of conductors .",
        "concise pattern": "",
        "template": "count the number of {TABLE0} .",
        "name dict": {
          "{TABLE0}": "conductor",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM conductor"
      },
      {
        "question": "Show the names and grades of each high schooler .",
        "concise pattern": "",
        "template": "show the names and {COLUMN0} of each high schooler .",
        "name dict": {
          "{COLUMN0}": "grade",
          "{TABLE0}": "high schooler"
        },
        "query": "SELECT Highschooler.name, Highschooler.grade FROM Highschooler"
      },
      {
        "question": "What are the names and grades for each high schooler ?",
        "concise pattern": "",
        "template": "what are the names and {COLUMN0} for each high schooler ?",
        "name dict": {
          "{COLUMN0}": "grade",
          "{TABLE0}": "high schooler"
        },
        "query": "SELECT Highschooler.name, Highschooler.grade FROM Highschooler"
      },
      {
        "question": "Show all the grades of the high schoolers .",
        "concise pattern": "",
        "template": "show all the {COLUMN0} of the high schoolers .",
        "name dict": {
          "{COLUMN0}": "grade",
          "{TABLE0}": "high schooler"
        },
        "query": "SELECT DISTINCT Highschooler.grade FROM Highschooler"
      },
      {
        "question": "What is the grade of each high schooler ?",
        "concise pattern": "",
        "template": "what is the {COLUMN0} of each high schooler ?",
        "name dict": {
          "{COLUMN0}": "grade",
          "{TABLE0}": "high schooler"
        },
        "query": "SELECT Highschooler.grade FROM Highschooler"
      },
      {
        "question": "How many dogs went through any treatments ?",
        "concise pattern": "",
        "template": "how many dogs went through any {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "dog_id",
          "{TABLE0}": "treatments",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT Treatments.dog_id) FROM Treatments"
      },
      {
        "question": "What are the email , cell phone and home phone of each professional ?",
        "concise pattern": "",
        "template": "what are the email , cell phone and {COLUMN0} phone of each professional ?",
        "name dict": {
          "{COLUMN0}": "home_phone",
          "{TABLE0}": "professionals"
        },
        "query": "SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals"
      },
      {
        "question": "How many singers are there ?",
        "concise pattern": "",
        "template": "how many {TABLE0} are there ?",
        "name dict": {
          "{TABLE0}": "singer",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM singer"
      },
      {
        "question": "What is the count of singers ?",
        "concise pattern": "",
        "template": "what is the count of {TABLE0} ?",
        "name dict": {
          "{TABLE0}": "singer",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM singer"
      },
      {
        "question": "Show the property type descriptions of properties belonging to that code .",
        "concise pattern": "",
        "template": "show the {COLUMN0} type descriptions of properties belonging to that code .",
        "name dict": {
          "{COLUMN0}": "property_type_description",
          "{TABLE0}": "reference property types"
        },
        "query": "SELECT Ref_Property_Types.property_type_description FROM Ref_Property_Types"
      },
      {
        "question": "How many different types of pet are there ?",
        "concise pattern": "",
        "template": "how many different types of pet are there ?",
        "name dict": {
          "{COLUMN0}": "pettype",
          "{TABLE0}": "pets",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT Pets.PetType) FROM Pets"
      },
      {
        "question": "find the minimum and maximum number of products of all stores .",
        "concise pattern": "",
        "template": "find the minimum and maximum number of products of all stores .",
        "name dict": {
          "{COLUMN0}": "bonus",
          "{TABLE0}": "evaluation",
          "{AGG1}": "MIN",
          "{AGG0}": "MIN"
        },
        "query": "SELECT Min(evaluation.Bonus), Min(evaluation.Bonus) FROM evaluation"
      },
      {
        "question": "How many different templates do all document use ?",
        "concise pattern": "",
        "template": "how many different templates do all document use ?",
        "name dict": {
          "{COLUMN0}": "template_id",
          "{TABLE0}": "documents",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT Documents.Template_ID) FROM Documents"
      },
      {
        "question": "Find the number of distinct name of losers .",
        "concise pattern": "",
        "template": "find the number of distinct name of losers .",
        "name dict": {
          "{TABLE0}": "matches",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM matches"
      },
      {
        "question": "How many departments offer any degree ?",
        "concise pattern": "",
        "template": "how many departments offer any degree ?",
        "name dict": {
          "{COLUMN0}": "department_id",
          "{TABLE0}": "degree programs",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT Degree_Programs.department_id) FROM Degree_Programs"
      },
      {
        "question": "How many different departments offer degrees ?",
        "concise pattern": "",
        "template": "how many different departments offer degrees ?",
        "name dict": {
          "{COLUMN0}": "department_id",
          "{TABLE0}": "degree programs",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT Degree_Programs.department_id) FROM Degree_Programs"
      },
      {
        "question": "How many different degrees are offered ?",
        "concise pattern": "",
        "template": "how many different degrees are offered ?",
        "name dict": {
          "{COLUMN0}": "degree_summary_name",
          "{TABLE0}": "degree programs",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs"
      },
      {
        "question": "How many poker players are there ?",
        "concise pattern": "",
        "template": "how many poker players are there ?",
        "name dict": {
          "{TABLE0}": "poker player",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM poker_player"
      },
      {
        "question": "Count the number of poker players .",
        "concise pattern": "",
        "template": "count the number of poker players .",
        "name dict": {
          "{TABLE0}": "poker player",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM poker_player"
      },
      {
        "question": "What are the maximum and minimum values of area codes ?",
        "concise pattern": "",
        "template": "what are the maximum and minimum values of area codes ?",
        "name dict": {
          "{COLUMN0}": "created",
          "{TABLE0}": "votes",
          "{AGG1}": "MIN",
          "{AGG0}": "MAX"
        },
        "query": "SELECT Max(VOTES.created), Min(VOTES.created) FROM VOTES"
      },
      {
        "question": "How many high schoolers are there ?",
        "concise pattern": "",
        "template": "how many high schoolers are there ?",
        "name dict": {
          "{TABLE0}": "high schooler",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Highschooler"
      },
      {
        "question": "Count the number of high schoolers .",
        "concise pattern": "",
        "template": "count the number of high schoolers .",
        "name dict": {
          "{TABLE0}": "high schooler",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Highschooler"
      },
      {
        "question": "Count the number of dogs that went through a treatment .",
        "concise pattern": "",
        "template": "count the number of dogs that went through a treatment .",
        "name dict": {
          "{COLUMN0}": "dog_id",
          "{TABLE0}": "treatments",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT Treatments.dog_id) FROM Treatments"
      },
      {
        "question": "How many professionals have performed any treatment to dogs ?",
        "concise pattern": "",
        "template": "how many professionals have performed any treatment to dogs ?",
        "name dict": {
          "{COLUMN0}": "professional_id",
          "{TABLE0}": "treatments",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT Treatments.professional_id) FROM Treatments"
      },
      {
        "question": "Find the number of professionals who have ever treated dogs .",
        "concise pattern": "",
        "template": "find the number of professionals who have ever treated dogs .",
        "name dict": {
          "{COLUMN0}": "professional_id",
          "{TABLE0}": "treatments",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT Treatments.professional_id) FROM Treatments"
      },
      {
        "question": "How many available features are there in total ?",
        "concise pattern": "",
        "template": "how many available features are there in total ?",
        "name dict": {
          "{TABLE0}": "other available features",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Other_Available_Features"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} GROUP BY {COLUMN0} ORDER BY {AGG0} ( * ) {SC0} LIMIT {VALUE0}",
    [
      {
        "question": "What is the id , line 1 , and line 2 of the address with the most students ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the id , {COLUMN0} {VALUE0} , and {COLUMN0} {VALUE1} of the {COLUMN1} with the most {TABLE1} ?",
        "name dict": {
          "{TABLE0}": "addresses",
          "{VALUE2}": "1",
          "{COLUMN0}": "line_2",
          "{COLUMN2}": "current_address_id",
          "{VALUE1}": "2",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{COLUMN1}": "address_id",
          "{AGG0}": "COUNT",
          "{TABLE1}": "students"
        },
        "query": "SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which employee received the most awards in evaluations ? Give me the employee name .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN1} received the most awards in {TABLE1} ? give me the {COLUMN1} {COLUMN0} .",
        "name dict": {
          "{COLUMN1}": "employee_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "employee",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "evaluation"
        },
        "query": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Of all the contestants who got voted , what is the contestant number and name of the contestant who got least votes ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "of all the {TABLE0} who got voted , what is the {COLUMN0} number and name of the {COLUMN0} who got least {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "contestant_number",
          "{COLUMN0}": "contestant_name",
          "{TABLE0}": "contestants",
          "{SC0}": "ASC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "votes"
        },
        "query": "SELECT VOTES.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY VOTES.contestant_number ORDER BY Count(*) Asc LIMIT 1"
      },
      {
        "question": "Which owner owns the most dogs ? List the owner id , first name and last name .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN1} owns the most {TABLE1} ? list the {COLUMN1} id , first name and {COLUMN0} name .",
        "name dict": {
          "{COLUMN1}": "owner_id",
          "{COLUMN0}": "last_name",
          "{TABLE0}": "owners",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "dogs"
        },
        "query": "SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Return the owner id , first name and last name of the owner who has the most dogs .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "return the {COLUMN1} id , first name and {COLUMN0} name of the {COLUMN1} who has the most {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "owner_id",
          "{COLUMN0}": "last_name",
          "{TABLE0}": "owners",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "dogs"
        },
        "query": "SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which owner has paid for the most treatments on his or her dogs ? List the owner id and last name .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN1} has paid for the most treatments on his or her {TABLE1} ? list the {COLUMN1} id and {COLUMN0} name .",
        "name dict": {
          "{COLUMN1}": "owner_id",
          "{COLUMN0}": "last_name",
          "{TABLE0}": "owners",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "dogs"
        },
        "query": "SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "tell me the {COLUMN1} id and {COLUMN0} name of the {COLUMN1} who spent the most on treatments of his or her {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "owner_id",
          "{COLUMN0}": "last_name",
          "{TABLE0}": "owners",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "dogs"
        },
        "query": "SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the name and {COLUMN0} of the {COLUMN1} with the most {TABLE1} after 2013 ?",
        "name dict": {
          "{COLUMN1}": "stadium_id",
          "{COLUMN0}": "capacity",
          "{TABLE0}": "stadium",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "concert"
        },
        "query": "SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Stadium_ID ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "find the name of employee who was awarded the most times in the evaluation .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "find the {COLUMN0} of {COLUMN1} who was awarded the most times in the {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "employee_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "employee",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "evaluation"
        },
        "query": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the name of the shop that is hiring the largest number of employees ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the {COLUMN0} of the {COLUMN1} that is {TABLE1} the largest number of employees ?",
        "name dict": {
          "{COLUMN1}": "shop_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "shop",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "hiring"
        },
        "query": "SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY hiring.Shop_ID ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which shop has the most employees ? Give me the shop name .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN1} has the most employees ? give me the {COLUMN1} {COLUMN0} .",
        "name dict": {
          "{COLUMN1}": "shop_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "shop",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "hiring"
        },
        "query": "SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY hiring.Shop_ID ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What are the id and name of the museum visited most times ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what are the id and {COLUMN0} of the {COLUMN1} {TABLE1} most times ?",
        "name dict": {
          "{COLUMN1}": "museum_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "museum",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "visit"
        },
        "query": "SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the ship id and name that caused most total injuries ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the {TABLE0} {COLUMN1} and {COLUMN0} that caused most total injuries ?",
        "name dict": {
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{TABLE0}": "ship",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT ship.id, ship.name FROM ship GROUP BY ship.id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which student has enrolled for the most times in any program ? List the id , first name , middle name , last name , the number of enrollments and student id .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN1} has enrolled for the most times in any program ? list the id , first name , middle name , {COLUMN0} name , the number of enrollments and {COLUMN1} id .",
        "name dict": {
          "{COLUMN1}": "student_id",
          "{COLUMN0}": "last_name",
          "{TABLE0}": "students",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "student enrolment"
        },
        "query": "SELECT Student_Enrolment.student_id, Students.first_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Student_Enrolment.student_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which address holds the most number of students currently ? List the address id and all lines .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN0} holds the most number of {TABLE1} currently ? list the {COLUMN0} id and all lines .",
        "name dict": {
          "{COLUMN1}": "current_address_id",
          "{COLUMN0}": "address_id",
          "{TABLE0}": "addresses",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "students"
        },
        "query": "SELECT Addresses.address_id, Addresses.address_id FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Show the name of the conductor that has conducted the most number of orchestras .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "show the {COLUMN0} of the {COLUMN2} that has conducted the most number of {COLUMN1} .",
        "name dict": {
          "{COLUMN1}": "orchestra",
          "{COLUMN0}": "name",
          "{COLUMN2}": "conductor_id",
          "{TABLE0}": "conductor",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY orchestra.Conductor_ID ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the name of the conductor who has conducted the most orchestras ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the {COLUMN0} of the {COLUMN2} who has conducted the most {COLUMN1} ?",
        "name dict": {
          "{COLUMN1}": "orchestra",
          "{COLUMN0}": "name",
          "{COLUMN2}": "conductor_id",
          "{TABLE0}": "conductor",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Return the name of the high school student with the most friends .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "return the {COLUMN0} of the high school {COLUMN2} with the most {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "student_id",
          "{TABLE0}": "high schooler",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Give the name of the student with the most likes .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "give the {COLUMN0} of the {COLUMN3} with the most {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "liked_id",
          "{TABLE0}": "high schooler",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{COLUMN3}": "student_id",
          "{AGG0}": "COUNT",
          "{TABLE1}": "likes"
        },
        "query": "SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Likes.student_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which breed do the most dogs have ? Give me the breed name .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN0} do the most {TABLE1} have ? give me the {COLUMN0} name .",
        "name dict": {
          "{COLUMN1}": "breed_code",
          "{COLUMN0}": "breed_name",
          "{TABLE0}": "breeds",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "dogs"
        },
        "query": "SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_name ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which year has most number of concerts ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN0} has most number of {TABLE0} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "year",
          "{TABLE0}": "concert",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT concert.Year FROM concert GROUP BY concert.Year ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the year that had the most concerts ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the {COLUMN0} that had the most {TABLE0} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "year",
          "{TABLE0}": "concert",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT concert.Year FROM concert GROUP BY concert.Year ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which airline has most number of flights ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN0} has most number of {TABLE1} ?",
        "name dict": {
          "{COLUMN0}": "airline",
          "{TABLE0}": "airlines",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT airlines.Airline FROM airlines JOIN flights GROUP BY airlines.Airline ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What airline serves the most flights ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what {COLUMN0} serves the most {TABLE1} ?",
        "name dict": {
          "{COLUMN0}": "airline",
          "{TABLE0}": "airlines",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT airlines.Airline FROM airlines JOIN flights GROUP BY airlines.Airline ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Find the abbreviation and country of the airline that has fewest number of flights ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "find the {COLUMN1} and country of the airline that has fewest number of {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "abbreviation",
          "{COLUMN0}": "country",
          "{TABLE0}": "airlines",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT airlines.Abbreviation, airlines.Country FROM airlines JOIN flights GROUP BY airlines.Abbreviation ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the id and type code for the template used by the most documents ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the id and type code for the {COLUMN0} used by the most {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "template_id",
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "documents"
        },
        "query": "SELECT Documents.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Documents.Template_ID ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Return the id and type code of the template that is used for the greatest number of documents .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "return the id and type code of the {COLUMN0} that is used for the greatest number of {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "template_id",
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "documents"
        },
        "query": "SELECT Documents.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Documents.Template_ID ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which template type code has most number of templates ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN0} type code has most number of {TABLE0} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Return the type code of the template type that the most templates belong to .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "return the type code of the {COLUMN0} type that the most {TABLE0} belong to .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the document id and name with greatest number of paragraphs ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the {COLUMN0} id and name with greatest number of {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "document_id",
          "{COLUMN0}": "document_name",
          "{TABLE0}": "documents",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "paragraphs"
        },
        "query": "SELECT Paragraphs.Document_ID, Documents.Document_Name FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Paragraphs.Document_ID ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Return the id and name of the document with the most paragraphs .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "return the id and name of the {COLUMN0} with the most {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "document_id",
          "{COLUMN0}": "document_name",
          "{TABLE0}": "documents",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "paragraphs"
        },
        "query": "SELECT Paragraphs.Document_ID, Documents.Document_Name FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Paragraphs.Document_ID ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the document id with least number of paragraphs ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the {COLUMN0} id with least number of {TABLE0} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "document_id",
          "{TABLE0}": "paragraphs",
          "{AGG0}": "COUNT",
          "{SC0}": "ASC"
        },
        "query": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY Count(*) Asc LIMIT 1"
      },
      {
        "question": "Return the id of the document with the fewest paragraphs .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "return the id of the {COLUMN0} with the fewest {TABLE0} .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "document_id",
          "{TABLE0}": "paragraphs",
          "{AGG0}": "COUNT",
          "{SC0}": "ASC"
        },
        "query": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY Count(*) Asc LIMIT 1"
      },
      {
        "question": "List the most common hometown of teachers .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "list the most common {COLUMN0} of {TABLE0} .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "hometown",
          "{TABLE0}": "teacher",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the most commmon hometowns for teachers ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the most commmon {COLUMN0} for {TABLE0} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "hometown",
          "{TABLE0}": "teacher",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Find the name and age of the visitor who bought the most tickets at once .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "find the name and {COLUMN0} of the {COLUMN2} who bought the most tickets at once .",
        "name dict": {
          "{COLUMN1}": "id",
          "{COLUMN0}": "age",
          "{COLUMN2}": "visitor_id",
          "{TABLE0}": "customer",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "visit"
        },
        "query": "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Find the first name and country code of the player who did the most number of tours .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "find the first name and {COLUMN0} code of the {COLUMN1} who did the most number of tours .",
        "name dict": {
          "{COLUMN1}": "player_id",
          "{COLUMN0}": "country_code",
          "{TABLE0}": "players",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "rankings"
        },
        "query": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.player_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the first name and country code of the player with the most tours ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the first name and {COLUMN0} code of the {COLUMN1} with the most tours ?",
        "name dict": {
          "{COLUMN1}": "player_id",
          "{COLUMN0}": "country_code",
          "{TABLE0}": "players",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "rankings"
        },
        "query": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.player_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Find the year that has the most number of matches .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "find the {COLUMN0} that has the most number of {TABLE0} .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "year",
          "{TABLE0}": "matches",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT matches.year FROM matches GROUP BY matches.year ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which year had the most matches ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN0} had the most {TABLE0} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "year",
          "{TABLE0}": "matches",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT matches.year FROM matches GROUP BY matches.year ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the name of the winner who has won the most matches , and how many rank points does this player have ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the name of the {COLUMN0} who has won the most {TABLE0} , and how many rank points does this player have ?",
        "name dict": {
          "{COLUMN0}": "winner_hand",
          "{TABLE0}": "matches",
          "{VALUE0}": "1",
          "{AGG1}": "COUNT",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT matches.winner_name, Count(*) FROM matches GROUP BY matches.winner_hand ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "find the code of the country where has the greatest number of players .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "find the code of the {COLUMN0} where has the greatest number of {TABLE0} .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "country_code",
          "{TABLE0}": "players",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT players.country_code FROM players GROUP BY players.country_code ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the code of the country with the most players ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the code of the {COLUMN0} with the most {TABLE0} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "country_code",
          "{TABLE0}": "players",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT players.country_code FROM players GROUP BY players.country_code ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the first name , country code , and birth date of the player with the most winner rank points across all matches ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the first name , country code , and {COLUMN0} date of the {COLUMN1} with the most winner rank points across all matches ?",
        "name dict": {
          "{COLUMN1}": "player_id",
          "{COLUMN0}": "birth_date",
          "{TABLE0}": "players",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "rankings"
        },
        "query": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.player_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the first and second line for all addresses ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the first and second {COLUMN0} for all {TABLE0} ?",
        "name dict": {
          "{VALUE2}": "1",
          "{COLUMN0}": "line_1",
          "{TABLE0}": "addresses",
          "{VALUE1}": "1",
          "{VALUE0}": "1",
          "{VALUE3}": "1",
          "{AGG0}": "COUNT",
          "{SC0}": "ASC"
        },
        "query": "SELECT Addresses.line_1, Addresses.line_1 FROM Addresses GROUP BY Addresses.line_1 ORDER BY Count(*) Asc LIMIT 1"
      },
      {
        "question": "Which department offers the most number of degrees ? List department name and id .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN0} offers the most number of degrees ? list {COLUMN0} name and id .",
        "name dict": {
          "{COLUMN0}": "department_id",
          "{TABLE0}": "departments",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "degree programs"
        },
        "query": "SELECT Departments.department_name, Degree_Programs.department_id FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Degree_Programs.department_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "For each department id , what is the name of the department with the most number of degrees ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "for each {COLUMN0} id , what is the name of the {COLUMN0} with the most number of degrees ?",
        "name dict": {
          "{COLUMN0}": "department_id",
          "{TABLE0}": "departments",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "degree programs"
        },
        "query": "SELECT Departments.department_name, Degree_Programs.department_id FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Degree_Programs.department_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "List the language used least number of TV Channel . List language and number of TV Channel .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "list the {COLUMN0} used least number of tv channel . list {COLUMN0} and number of tv channel .",
        "name dict": {
          "{COLUMN0}": "language",
          "{TABLE0}": "tv channel",
          "{VALUE0}": "1",
          "{AGG1}": "COUNT",
          "{AGG0}": "COUNT",
          "{SC0}": "ASC"
        },
        "query": "SELECT TV_Channel.Language, Count(*) FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY Count(*) Asc LIMIT 1"
      },
      {
        "question": "What is the most common nationality of people ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the most common {COLUMN0} of {TABLE0} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "nationality",
          "{TABLE0}": "people",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT people.Nationality FROM people GROUP BY people.Nationality ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Give the nationality that is most common across all people .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "give the {COLUMN0} that is most common across all {TABLE0} .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "nationality",
          "{TABLE0}": "people",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT people.Nationality FROM people GROUP BY people.Nationality ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is name of the country that speaks the largest number of languages ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is {COLUMN0} of the {TABLE0} that speaks the largest number of languages ?",
        "name dict": {
          "{COLUMN1}": "code",
          "{COLUMN0}": "name",
          "{COLUMN2}": "countrycode",
          "{TABLE0}": "country",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "List the record company shared by the most number of orchestras .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "list the {COLUMN0} company shared by the most number of {COLUMN1} .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "orchestra",
          "{COLUMN0}": "record_company",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT orchestra.Record_Company FROM orchestra GROUP BY orchestra.Record_Company ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the record company used by the greatest number of orchestras ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the {COLUMN0} company used by the greatest number of {COLUMN1} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "orchestra",
          "{COLUMN0}": "record_company",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT orchestra.Record_Company FROM orchestra GROUP BY orchestra.Record_Company ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the name of the high schooler who has the greatest number of friends ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the {COLUMN0} of the high schooler who has the greatest number of {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "student_id",
          "{TABLE0}": "high schooler",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Friend.student_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the name of the high schooler who has the greatest number of likes ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the {COLUMN0} of the high schooler who has the greatest number of {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "liked_id",
          "{TABLE0}": "high schooler",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "likes"
        },
        "query": "SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Likes.liked_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the name of the breed with the most dogs ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the name of the {COLUMN0} with the most {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "breed_code",
          "{COLUMN0}": "breed_name",
          "{TABLE0}": "breeds",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "dogs"
        },
        "query": "SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Dogs.breed_code ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "list the names of the {TABLE1} of the rarest {COLUMN1} and the treatment dates of them .",
        "name dict": {
          "{COLUMN1}": "breed_code",
          "{COLUMN0}": "date_of_birth",
          "{TABLE0}": "breeds",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "dogs"
        },
        "query": "SELECT Dogs.name, Dogs.date_of_birth FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Dogs.breed_code ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which dogs are of the rarest breed ? Show their names and treatment dates .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {TABLE1} are of the rarest {COLUMN1} ? show their names and treatment dates .",
        "name dict": {
          "{COLUMN1}": "breed_code",
          "{COLUMN0}": "date_of_birth",
          "{TABLE0}": "breeds",
          "{SC0}": "ASC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "dogs"
        },
        "query": "SELECT Dogs.name, Dogs.date_of_birth FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Dogs.breed_code ORDER BY Count(*) Asc LIMIT 1"
      },
      {
        "question": "Please show the most common citizenship of singers .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "please show the most common {COLUMN0} of {TABLE0} .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "citizenship",
          "{TABLE0}": "singer",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT singer.Citizenship FROM singer GROUP BY singer.Citizenship ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the msot common singer citizenship ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the msot common {TABLE0} {COLUMN0} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "citizenship",
          "{TABLE0}": "singer",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT singer.Citizenship FROM singer GROUP BY singer.Citizenship ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which of the countries has the most car makers ? List the country name .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which of the {COLUMN2} has the most car makers ? list the country name .",
        "name dict": {
          "{COLUMN1}": "countryid",
          "{COLUMN0}": "countryname",
          "{COLUMN2}": "country",
          "{TABLE0}": "countries",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "car makers"
        },
        "query": "SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which model has the most version ( make ) of cars ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN0} has the most version ( make ) of cars ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "model",
          "{TABLE0}": "car names",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT car_names.Model FROM car_names GROUP BY car_names.Model ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What model has the most different versions ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what {COLUMN0} has the most different versions ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "model",
          "{TABLE0}": "car names",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT car_names.Model FROM car_names GROUP BY car_names.Model ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which city has most number of arriving flights ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which city has most number of arriving {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "airportcode",
          "{COLUMN0}": "city",
          "{COLUMN2}": "sourceairport",
          "{TABLE0}": "airports",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which city has most number of departing flights ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which city has most number of departing {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "airportcode",
          "{COLUMN0}": "city",
          "{COLUMN2}": "sourceairport",
          "{TABLE0}": "airports",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the code of airport that has the highest number of flights ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the code of airport that has the highest number of {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "airportcode",
          "{COLUMN0}": "airportname",
          "{COLUMN2}": "sourceairport",
          "{TABLE0}": "airports",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY flights.SourceAirport ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the airport code of the airport with the most flights ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the airport code of the airport with the most {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "sourceairport",
          "{COLUMN0}": "airportcode",
          "{TABLE0}": "airports",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT airports.AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY flights.SourceAirport ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the code of airport that has fewest number of flights ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the code of airport that has fewest number of {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "airportcode",
          "{COLUMN0}": "airportname",
          "{COLUMN2}": "sourceairport",
          "{TABLE0}": "airports",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY flights.SourceAirport ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Give the code of the airport with the least flights .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "give the code of the airport with the least {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "sourceairport",
          "{COLUMN0}": "airportcode",
          "{TABLE0}": "airports",
          "{SC0}": "ASC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT airports.AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY flights.SourceAirport ORDER BY Count(*) Asc LIMIT 1"
      },
      {
        "question": "What the smallest version number and its template type code ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what the smallest version number and its {COLUMN0} type code ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates",
          "{AGG0}": "COUNT",
          "{SC0}": "ASC"
        },
        "query": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY Count(*) Asc LIMIT 1"
      },
      {
        "question": "Which template type code is used by most number of documents ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN0} type code is used by most number of documents ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Return the code of the template type that is most commonly used in documents .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "return the code of the {COLUMN0} type that is most commonly used in documents .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Find the name and rank points of the winner who won the most times .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "find the name and rank points of the {COLUMN3} who won the most times .",
        "name dict": {
          "{TABLE0}": "players",
          "{COLUMN3}": "winner_ioc",
          "{TABLE1}": "matches",
          "{TABLE2}": "rankings",
          "{COLUMN1}": "loser_id",
          "{COLUMN0}": "ranking_points",
          "{COLUMN2}": "player_id",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT matches.winner_name, rankings.ranking_points FROM players JOIN matches ON matches.loser_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY matches.winner_ioc ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the semester which most student registered in ? Show both the name and the id .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the {COLUMN0} which most student registered in ? show both the name and the id .",
        "name dict": {
          "{COLUMN0}": "semester_id",
          "{TABLE0}": "semesters",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "student enrolment"
        },
        "query": "SELECT Semesters.semester_name, Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "For each semester , what is the name and id of the one with the most students registered ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "for each {COLUMN0} , what is the name and id of the one with the most students registered ?",
        "name dict": {
          "{COLUMN0}": "semester_id",
          "{TABLE0}": "semesters",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "student enrolment"
        },
        "query": "SELECT Semesters.semester_name, Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the degree summary name that has the most number of students enrolled ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the {COLUMN0} summary name that has the most number of students enrolled ?",
        "name dict": {
          "{COLUMN1}": "degree_program_id",
          "{COLUMN0}": "degree_summary_name",
          "{TABLE0}": "degree programs",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "student enrolment"
        },
        "query": "SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the program id and the summary of the degree that has the most students enrolled ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the program id and the summary of the {COLUMN0} that has the most students enrolled ?",
        "name dict": {
          "{COLUMN1}": "degree_program_id",
          "{COLUMN0}": "degree_summary_description",
          "{TABLE0}": "degree programs",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "student enrolment"
        },
        "query": "SELECT Student_Enrolment.degree_program_id, Degree_Programs.degree_summary_description FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Student_Enrolment.degree_program_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the first , middle , and last name , along with the id and number of enrollments , for the student who enrolled the most in any program ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the first , middle , and last name , along with the id and number of enrollments , for the {COLUMN0} who enrolled the most in any program ?",
        "name dict": {
          "{COLUMN0}": "student_id",
          "{TABLE0}": "students",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "student enrolment"
        },
        "query": "SELECT Students.first_name, Students.middle_name, Student_Enrolment.student_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Student_Enrolment.student_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What 's the name of the course with most number of enrollments ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what 's the name of the {COLUMN0} with most number of enrollments ?",
        "name dict": {
          "{COLUMN1}": "course_id",
          "{COLUMN0}": "course_name",
          "{TABLE0}": "courses",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "student enrolment courses"
        },
        "query": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the name of the course with the most students enrolled ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the name of the {COLUMN0} with the most students enrolled ?",
        "name dict": {
          "{COLUMN1}": "course_id",
          "{COLUMN0}": "course_name",
          "{TABLE0}": "courses",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "student enrolment courses"
        },
        "query": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course 's enrollment id ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the maximum number of times that a course shows up in different {TABLE0} and what is that course 's enrollment id ?",
        "name dict": {
          "{COLUMN0}": "transcript_id",
          "{TABLE0}": "transcripts",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG1}": "COUNT",
          "{AGG0}": "COUNT",
          "{TABLE1}": "transcript contents"
        },
        "query": "SELECT Count(*), Transcript_Contents.transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Transcript_Contents.transcript_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Show the date of the transcript which shows the least number of results , also list the id .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "show the date of the {COLUMN0} which shows the least number of results , also list the id .",
        "name dict": {
          "{TABLE0}": "students",
          "{TABLE3}": "transcripts",
          "{COLUMN3}": "student_course_id",
          "{TABLE1}": "student enrolment",
          "{TABLE2}": "student enrolment courses",
          "{COLUMN1}": "student_id",
          "{COLUMN0}": "transcript_id",
          "{COLUMN2}": "student_enrolment_id",
          "{TABLE4}": "transcript contents",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{SC0}": "ASC"
        },
        "query": "SELECT Students.date_left, Transcripts.transcript_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id AND Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id AND Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Transcripts JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id AND Transcript_Contents.transcript_id = Transcripts.transcript_id AND Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id GROUP BY Transcripts.transcript_id ORDER BY Count(*) Asc LIMIT 1"
      },
      {
        "question": "What is the date and id of the transcript with the least number of results ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the date and id of the {COLUMN0} with the least number of results ?",
        "name dict": {
          "{TABLE0}": "students",
          "{TABLE3}": "transcripts",
          "{COLUMN3}": "student_course_id",
          "{TABLE1}": "student enrolment",
          "{TABLE2}": "student enrolment courses",
          "{COLUMN1}": "student_id",
          "{COLUMN0}": "transcript_id",
          "{COLUMN2}": "student_enrolment_id",
          "{TABLE4}": "transcript contents",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{SC0}": "ASC"
        },
        "query": "SELECT Students.date_left, Transcripts.transcript_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Transcripts JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id AND Transcript_Contents.transcript_id = Transcripts.transcript_id GROUP BY Transcripts.transcript_id ORDER BY Count(*) Asc LIMIT 1"
      },
      {
        "question": "What are the languages used by the least number of TV Channels and how many channels use it ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what are the {COLUMN0} used by the least number of tv channels and how many channels use it ?",
        "name dict": {
          "{COLUMN0}": "language",
          "{TABLE0}": "tv channel",
          "{VALUE0}": "1",
          "{AGG1}": "COUNT",
          "{AGG0}": "COUNT",
          "{SC0}": "ASC"
        },
        "query": "SELECT TV_Channel.Language, Count(*) FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY Count(*) Asc LIMIT 1"
      },
      {
        "question": "What is the area code in which the most voters voted ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the {COLUMN0} code in which the most voters voted ?",
        "name dict": {
          "{COLUMN1}": "state",
          "{COLUMN0}": "area_code",
          "{TABLE0}": "area code state",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "votes"
        },
        "query": "SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state GROUP BY AREA_CODE_STATE.area_code ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Give the name of the nation that uses the greatest amount of languages .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "give the {COLUMN0} of the nation that uses the greatest amount of languages .",
        "name dict": {
          "{COLUMN1}": "code",
          "{COLUMN0}": "name",
          "{COLUMN2}": "countrycode",
          "{TABLE0}": "country",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which continent has the most diverse languages ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN0} has the most diverse languages ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "continent",
          "{TABLE0}": "country",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT country.Continent FROM country GROUP BY country.Continent ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which continent speaks the most languages ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN0} speaks the most languages ?",
        "name dict": {
          "{COLUMN1}": "code",
          "{COLUMN0}": "continent",
          "{COLUMN2}": "countrycode",
          "{TABLE0}": "country",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT country.Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Return the names of the 3 countries with the fewest people .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "return the {COLUMN0} of the 3 countries with the fewest people .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "name",
          "{TABLE0}": "country",
          "{AGG0}": "COUNT",
          "{SC0}": "ASC"
        },
        "query": "SELECT country.Name FROM country GROUP BY country.Name ORDER BY Count(*) Asc LIMIT 1"
      },
      {
        "question": "Which language is spoken by the largest number of countries ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN0} is spoken by the largest number of countries ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "language",
          "{TABLE0}": "countrylanguage",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Give the language that is spoken in the most countries .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "give the {COLUMN0} that is spoken in the most countries .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "language",
          "{TABLE0}": "countrylanguage",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which grade has the most high schoolers ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN0} has the most high schoolers ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "grade",
          "{TABLE0}": "high schooler",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Return the grade that has the greatest number of high schoolers .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "return the {COLUMN0} that has the greatest number of high schoolers .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "grade",
          "{TABLE0}": "high schooler",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the name of the country with the most car makers ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the name of the country with the most car makers ?",
        "name dict": {
          "{COLUMN1}": "countryid",
          "{COLUMN0}": "countryname",
          "{COLUMN2}": "country",
          "{TABLE0}": "countries",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "car makers"
        },
        "query": "SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which city has the most frequent destination airport ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which city has the most frequent destination airport ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "city",
          "{TABLE0}": "airports",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT airports.City FROM airports GROUP BY airports.City ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which city is the most frequent source airport ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which city is the most frequent source airport ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "city",
          "{TABLE0}": "airports",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT airports.City FROM airports GROUP BY airports.City ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Find the kind of program which most number of students are enrolled in ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "find the kind of program which most number of students are enrolled in ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "transcript_id",
          "{TABLE0}": "transcript contents",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT Transcript_Contents.transcript_id FROM Transcript_Contents GROUP BY Transcript_Contents.transcript_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Find the program which most number of students are enrolled in . List both the id and the summary .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "find the program which most number of students are enrolled in . list both the id and the summary .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "student_id",
          "{TABLE0}": "student enrolment",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT Student_Enrolment.student_id, * FROM Student_Enrolment GROUP BY Student_Enrolment.student_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "How many times at most can a course enrollment result show in different transcripts ? Also show the course enrollment id .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "how many times at most can a course enrollment result show in different transcripts ? also show the course enrollment id .",
        "name dict": {
          "{COLUMN0}": "transcript_id",
          "{TABLE0}": "transcript contents",
          "{VALUE0}": "1",
          "{AGG1}": "COUNT",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT Count(*), Transcript_Contents.transcript_id FROM Transcript_Contents GROUP BY Transcript_Contents.transcript_id ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which country has the most of TV Channels ? List the country and number of TV Channels it has .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which country has the most of tv channels ? list the country and number of tv channels it has .",
        "name dict": {
          "{COLUMN0}": "country",
          "{TABLE0}": "tv channel",
          "{VALUE0}": "1",
          "{AGG1}": "COUNT",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT TV_Channel.Country, Count(*) FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the country with the most number of TV Channels and how many does it have ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the country with the most number of tv channels and how many does it have ?",
        "name dict": {
          "{COLUMN0}": "country",
          "{TABLE0}": "tv channel",
          "{VALUE0}": "1",
          "{AGG1}": "COUNT",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT TV_Channel.Country, Count(*) FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY Count(*) Desc LIMIT 1"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} GROUP BY {COLUMN0}",
    [
      {
        "question": "How many countries does each continent have ? List the continent id , continent name and the number of countries .",
        "concise pattern": "GROUP BY",
        "template": "how many {TABLE1} does each {COLUMN0} have ? list the {COLUMN0} id , {COLUMN0} name and the number of {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "contid",
          "{COLUMN0}": "continent",
          "{TABLE0}": "continents",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countries"
        },
        "query": "SELECT continents.Continent, Count(*), continents.Continent FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId"
      },
      {
        "question": "Show different hometown of teachers and the number of teachers from each hometown .",
        "concise pattern": "GROUP BY",
        "template": "show different {COLUMN0} of {TABLE0} and the number of {TABLE0} from each {COLUMN0} .",
        "name dict": {
          "{COLUMN0}": "hometown",
          "{TABLE0}": "teacher",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT teacher.Hometown, Count(*) FROM teacher GROUP BY teacher.Hometown"
      },
      {
        "question": "What are different nationalities of people and the corresponding number of people from each nation ?",
        "concise pattern": "GROUP BY",
        "template": "what are different {COLUMN0} of {TABLE0} and the corresponding number of {TABLE0} from each {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "nationality",
          "{TABLE0}": "people",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT people.Nationality, Count(*) FROM people GROUP BY people.Nationality"
      },
      {
        "question": "Show different citizenship of singers and the number of singers of each citizenship .",
        "concise pattern": "GROUP BY",
        "template": "show different {COLUMN0} of {TABLE0} and the number of {TABLE0} of each {COLUMN0} .",
        "name dict": {
          "{COLUMN0}": "citizenship",
          "{TABLE0}": "singer",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT singer.Citizenship, Count(*) FROM singer GROUP BY singer.Citizenship"
      },
      {
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship .",
        "concise pattern": "GROUP BY",
        "template": "show different {COLUMN1} and the maximum {COLUMN0} worth of {TABLE0} of each {COLUMN1} .",
        "name dict": {
          "{COLUMN1}": "citizenship",
          "{COLUMN0}": "net_worth_millions",
          "{TABLE0}": "singer",
          "{AGG0}": "MAX"
        },
        "query": "SELECT singer.Citizenship, Max(singer.Net_Worth_Millions) FROM singer GROUP BY singer.Citizenship"
      },
      {
        "question": "Show the names of singers and the total sales of their songs .",
        "concise pattern": "GROUP BY",
        "template": "show the {COLUMN1} of {TABLE0} and the total {COLUMN0} of their {TABLE1} .",
        "name dict": {
          "{COLUMN0}": "sales",
          "{COLUMN2}": "singer_id",
          "{TABLE0}": "singer",
          "{COLUMN1}": "name",
          "{AGG0}": "SUM",
          "{TABLE1}": "song"
        },
        "query": "SELECT Sum(song.Sales), singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name"
      },
      {
        "question": "For each singer name , what is the total sales for their songs ?",
        "concise pattern": "GROUP BY",
        "template": "for each {COLUMN2} {COLUMN1} , what is the total {COLUMN0} for their {TABLE1} ?",
        "name dict": {
          "{COLUMN0}": "sales",
          "{COLUMN2}": "singer_id",
          "{TABLE0}": "singer",
          "{COLUMN1}": "name",
          "{AGG0}": "SUM",
          "{TABLE1}": "song"
        },
        "query": "SELECT Sum(song.Sales), singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name"
      },
      {
        "question": "Show the stadium name and the number of concerts in each stadium .",
        "concise pattern": "GROUP BY",
        "template": "show the {COLUMN0} name and the number of {TABLE1} in each {COLUMN0} .",
        "name dict": {
          "{COLUMN0}": "stadium_id",
          "{TABLE0}": "stadium",
          "{AGG0}": "COUNT",
          "{TABLE1}": "concert"
        },
        "query": "SELECT stadium.Name, Count(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY concert.Stadium_ID"
      },
      {
        "question": "How many models does each car maker produce ? List maker full name , id and the number .",
        "concise pattern": "GROUP BY",
        "template": "how many models does each car {COLUMN1} produce ? list {COLUMN1} full name , {COLUMN0} and the number .",
        "name dict": {
          "{COLUMN1}": "maker",
          "{COLUMN0}": "id",
          "{TABLE0}": "car makers",
          "{AGG0}": "COUNT",
          "{TABLE1}": "model list"
        },
        "query": "SELECT car_makers.FullName, car_makers.Id, Count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker"
      },
      {
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker ?",
        "concise pattern": "GROUP BY",
        "template": "what is the number of car models that are produced by each {COLUMN1} and what is the {COLUMN0} and full name of each {COLUMN1} ?",
        "name dict": {
          "{COLUMN1}": "maker",
          "{COLUMN0}": "id",
          "{TABLE0}": "car makers",
          "{AGG0}": "COUNT",
          "{TABLE1}": "model list"
        },
        "query": "SELECT car_makers.Id, car_makers.FullName, Count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker"
      },
      {
        "question": "What is the average weight and year for each year ?",
        "concise pattern": "GROUP BY",
        "template": "what is the average {COLUMN0} and {COLUMN1} for each {COLUMN1} ?",
        "name dict": {
          "{COLUMN1}": "year",
          "{COLUMN0}": "weight",
          "{TABLE0}": "cars data",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year"
      },
      {
        "question": "Find the number of employees hired in each shop ; show the shop name as well .",
        "concise pattern": "GROUP BY",
        "template": "find the number of employees hired in each {COLUMN1} ; show the {COLUMN1} {COLUMN0} as well .",
        "name dict": {
          "{COLUMN1}": "shop_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "shop",
          "{AGG0}": "COUNT",
          "{TABLE1}": "hiring"
        },
        "query": "SELECT Count(*), shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name"
      },
      {
        "question": "For each shop , return the number of employees working there and the name of the shop .",
        "concise pattern": "GROUP BY",
        "template": "for each {COLUMN1} , return the number of employees working there and the {COLUMN0} of the {COLUMN1} .",
        "name dict": {
          "{COLUMN1}": "shop_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "shop",
          "{AGG0}": "COUNT",
          "{TABLE1}": "hiring"
        },
        "query": "SELECT Count(*), shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name"
      },
      {
        "question": "Show all template ids and number of documents using each template .",
        "concise pattern": "GROUP BY",
        "template": "show all {COLUMN0} ids and number of {TABLE0} using each {COLUMN0} .",
        "name dict": {
          "{COLUMN0}": "template_id",
          "{TABLE0}": "documents",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Documents.Template_ID, Count(*) FROM Documents GROUP BY Documents.Template_ID"
      },
      {
        "question": "Show all document ids , names and the number of paragraphs in each document .",
        "concise pattern": "GROUP BY",
        "template": "show all {COLUMN0} ids , names and the number of {TABLE1} in each {COLUMN0} .",
        "name dict": {
          "{COLUMN0}": "document_id",
          "{TABLE0}": "documents",
          "{AGG0}": "COUNT",
          "{TABLE1}": "paragraphs"
        },
        "query": "SELECT Paragraphs.Document_ID, Documents.Document_Name, Count(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Paragraphs.Document_ID"
      },
      {
        "question": "Find the average ranking for each player and their first name .",
        "concise pattern": "GROUP BY",
        "template": "find the average {COLUMN0} for each {COLUMN2} and their {COLUMN1} name .",
        "name dict": {
          "{COLUMN0}": "ranking",
          "{COLUMN2}": "player_id",
          "{TABLE0}": "players",
          "{COLUMN1}": "first_name",
          "{AGG0}": "AVG",
          "{TABLE1}": "rankings"
        },
        "query": "SELECT Avg(rankings.ranking), players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name"
      },
      {
        "question": "What are the first names of all players , and their average rankings ?",
        "concise pattern": "GROUP BY",
        "template": "what are the {COLUMN0} names of all {TABLE0} , and their average {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "player_id",
          "{COLUMN0}": "first_name",
          "{TABLE0}": "players",
          "{AGG0}": "AVG",
          "{TABLE1}": "rankings"
        },
        "query": "SELECT Avg(*), players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name"
      },
      {
        "question": "Find the total ranking points for each player and their first name .",
        "concise pattern": "GROUP BY",
        "template": "find the total {COLUMN0} points for each {COLUMN2} and their {COLUMN1} name .",
        "name dict": {
          "{COLUMN0}": "ranking_points",
          "{COLUMN2}": "player_id",
          "{TABLE0}": "players",
          "{COLUMN1}": "first_name",
          "{AGG0}": "SUM",
          "{TABLE1}": "rankings"
        },
        "query": "SELECT Sum(rankings.ranking_points), players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name"
      },
      {
        "question": "What are the first names of all players , and their total ranking points ?",
        "concise pattern": "GROUP BY",
        "template": "what are the {COLUMN1} names of all {TABLE0} , and their total {COLUMN0} points ?",
        "name dict": {
          "{COLUMN0}": "ranking_points",
          "{COLUMN2}": "player_id",
          "{TABLE0}": "players",
          "{COLUMN1}": "first_name",
          "{AGG0}": "SUM",
          "{TABLE1}": "rankings"
        },
        "query": "SELECT Sum(rankings.ranking_points), players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name"
      },
      {
        "question": "Show the names of high schoolers who have likes , and numbers of likes for each .",
        "concise pattern": "GROUP BY",
        "template": "show the {COLUMN2} of high schoolers who have {TABLE1} , and numbers of {TABLE1} for each .",
        "name dict": {
          "{COLUMN0}": "id",
          "{COLUMN2}": "name",
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "liked_id",
          "{AGG0}": "COUNT",
          "{TABLE1}": "likes"
        },
        "query": "SELECT Highschooler.name, Count(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.name"
      },
      {
        "question": "What are the names of high schoolers who have likes , and how many likes does each have ?",
        "concise pattern": "GROUP BY",
        "template": "what are the {COLUMN0} of high schoolers who have {TABLE1} , and how many {TABLE1} does each have ?",
        "name dict": {
          "{COLUMN0}": "name",
          "{COLUMN2}": "liked_id",
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "id",
          "{AGG0}": "COUNT",
          "{TABLE1}": "likes"
        },
        "query": "SELECT Count(*), Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.name"
      },
      {
        "question": "Show all countries and the number of singers in each country .",
        "concise pattern": "GROUP BY",
        "template": "show all {COLUMN0} and the number of {TABLE0} in each country .",
        "name dict": {
          "{COLUMN0}": "country",
          "{TABLE0}": "singer",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT singer.Country, Count(*) FROM singer GROUP BY singer.Country"
      },
      {
        "question": "For each stadium , how many concerts play there ?",
        "concise pattern": "GROUP BY",
        "template": "for each {COLUMN0} , how many {TABLE1} play there ?",
        "name dict": {
          "{COLUMN0}": "stadium_id",
          "{TABLE0}": "stadium",
          "{AGG0}": "COUNT",
          "{TABLE1}": "concert"
        },
        "query": "SELECT stadium.Name, Count(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY concert.Stadium_ID"
      },
      {
        "question": "Show the name and theme for all concerts and the number of singers in each concert .",
        "concise pattern": "GROUP BY",
        "template": "show the name and theme for all {TABLE0} and the number of singers in each {COLUMN0} .",
        "name dict": {
          "{COLUMN0}": "concert_id",
          "{TABLE0}": "concert",
          "{AGG0}": "COUNT",
          "{TABLE1}": "singer in concert"
        },
        "query": "SELECT concert.concert_Name, concert.Theme, Count(*) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY singer_in_concert.concert_ID"
      },
      {
        "question": "List singer names and number of concerts for each singer .",
        "concise pattern": "GROUP BY",
        "template": "list {COLUMN0} names and number of concerts for each {COLUMN0} .",
        "name dict": {
          "{COLUMN0}": "singer_id",
          "{TABLE0}": "singer",
          "{AGG0}": "COUNT",
          "{TABLE1}": "singer in concert"
        },
        "query": "SELECT singer.Name, Count(*) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer_in_concert.Singer_ID"
      },
      {
        "question": "What are the names of the singers and number of concerts for each person ?",
        "concise pattern": "GROUP BY",
        "template": "what are the {COLUMN1} of the {TABLE0} and number of concerts for each person ?",
        "name dict": {
          "{COLUMN1}": "name",
          "{COLUMN0}": "singer_id",
          "{TABLE0}": "singer",
          "{AGG0}": "COUNT",
          "{TABLE1}": "singer in concert"
        },
        "query": "SELECT singer.Name, Count(*) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name"
      },
      {
        "question": "Find the maximum weight for each type of pet . List the maximum weight and pet type .",
        "concise pattern": "GROUP BY",
        "template": "find the maximum {COLUMN0} for each type of pet . list the maximum {COLUMN0} and pet type .",
        "name dict": {
          "{COLUMN1}": "pettype",
          "{COLUMN0}": "weight",
          "{TABLE0}": "pets",
          "{AGG0}": "MAX"
        },
        "query": "SELECT Max(Pets.weight), Pets.PetType FROM Pets GROUP BY Pets.PetType"
      },
      {
        "question": "Find the average and maximum age for each type of pet .",
        "concise pattern": "GROUP BY",
        "template": "find the average and maximum {COLUMN0} for each type of {COLUMN1} .",
        "name dict": {
          "{COLUMN0}": "age",
          "{COLUMN2}": "stuid",
          "{TABLE0}": "student",
          "{COLUMN1}": "pet_age",
          "{COLUMN3}": "petid",
          "{AGG0}": "AVG",
          "{TABLE1}": "has pet",
          "{TABLE2}": "pets"
        },
        "query": "SELECT Avg(Student.Age), Pets.pet_age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID AND Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY Pets.pet_age"
      },
      {
        "question": "For students who have pets , how many pets does each student have ?",
        "concise pattern": "GROUP BY",
        "template": "for {TABLE0} who have pets , how many pets does each {TABLE0} have ?",
        "name dict": {
          "{COLUMN0}": "stuid",
          "{TABLE0}": "student",
          "{AGG0}": "COUNT",
          "{TABLE1}": "has pet"
        },
        "query": "SELECT Has_Pet.StuID, Count(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID"
      },
      {
        "question": "For each continent , list its id , name , and how many countries it has ?",
        "concise pattern": "GROUP BY",
        "template": "for each {COLUMN1} , list its id , name , and how many {TABLE1} it has ?",
        "name dict": {
          "{COLUMN1}": "continent",
          "{COLUMN0}": "contid",
          "{TABLE0}": "continents",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countries"
        },
        "query": "SELECT continents.ContId, continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId"
      },
      {
        "question": "What is the full name of each car maker , along with its id and how many models it produces ?",
        "concise pattern": "GROUP BY",
        "template": "what is the full name of each car {COLUMN1} , along with its {COLUMN0} and how many models it produces ?",
        "name dict": {
          "{COLUMN1}": "maker",
          "{COLUMN0}": "id",
          "{TABLE0}": "car makers",
          "{AGG0}": "COUNT",
          "{TABLE1}": "model list"
        },
        "query": "SELECT car_makers.FullName, car_makers.FullName, Count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id"
      },
      {
        "question": "How many car makers are there in each continents ? List the continent name and the count .",
        "concise pattern": "GROUP BY",
        "template": "how many car makers are there in each {COLUMN1} ? list the {COLUMN1} name and the count .",
        "name dict": {
          "{COLUMN1}": "continent",
          "{COLUMN0}": "contid",
          "{TABLE0}": "continents",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countries"
        },
        "query": "SELECT continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.Continent"
      },
      {
        "question": "How many car models are produced by each maker ? List the count and the maker full name .",
        "concise pattern": "GROUP BY",
        "template": "how many car models are produced by each {COLUMN1} ? list the count and the {COLUMN1} full name .",
        "name dict": {
          "{COLUMN1}": "maker",
          "{COLUMN0}": "id",
          "{TABLE0}": "car makers",
          "{AGG0}": "COUNT",
          "{TABLE1}": "model list"
        },
        "query": "SELECT car_makers.FullName, Count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker"
      },
      {
        "question": "What is the average weight of cars each year ?",
        "concise pattern": "GROUP BY",
        "template": "what is the average {COLUMN0} of cars each {COLUMN1} ?",
        "name dict": {
          "{COLUMN1}": "year",
          "{COLUMN0}": "weight",
          "{TABLE0}": "cars data",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year"
      },
      {
        "question": "Find the number of shops in each location .",
        "concise pattern": "GROUP BY",
        "template": "find the number of {TABLE0} in each {COLUMN0} .",
        "name dict": {
          "{COLUMN0}": "location",
          "{TABLE0}": "shop",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT shop.Location, Count(*) FROM shop GROUP BY shop.Location"
      },
      {
        "question": "How many shops are there in each location ?",
        "concise pattern": "GROUP BY",
        "template": "how many {TABLE0} are there in each {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "location",
          "{TABLE0}": "shop",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT shop.Location, Count(*) FROM shop GROUP BY shop.Location"
      },
      {
        "question": "What are all different template ids used for documents , and how many times were each of them used ?",
        "concise pattern": "GROUP BY",
        "template": "what are all different {COLUMN0} ids used for {TABLE0} , and how many times were each of them used ?",
        "name dict": {
          "{COLUMN0}": "template_id",
          "{TABLE0}": "documents",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Documents.Template_ID, Count(*) FROM Documents GROUP BY Documents.Template_ID"
      },
      {
        "question": "Show all template type codes and number of templates for each .",
        "concise pattern": "GROUP BY",
        "template": "show all {COLUMN0} type codes and number of {TABLE0} for each .",
        "name dict": {
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Templates.Template_Type_Code, Count(*) FROM Templates GROUP BY Templates.Template_Type_Code"
      },
      {
        "question": "What are the different template type codes , and how many templates correspond to each ?",
        "concise pattern": "GROUP BY",
        "template": "what are the different {COLUMN0} type codes , and how many {TABLE0} correspond to each ?",
        "name dict": {
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Templates.Template_Type_Code, Count(*) FROM Templates GROUP BY Templates.Template_Type_Code"
      },
      {
        "question": "Show all template type codes and the number of documents using each type .",
        "concise pattern": "GROUP BY",
        "template": "show all {COLUMN0} type codes and the number of {TABLE1} using each type .",
        "name dict": {
          "{COLUMN1}": "template_type_code",
          "{COLUMN0}": "template_id",
          "{TABLE0}": "templates",
          "{AGG0}": "COUNT",
          "{TABLE1}": "documents"
        },
        "query": "SELECT Templates.Template_Type_Code, Count(*) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code"
      },
      {
        "question": "What are the different template type codes , and how many documents use each type ?",
        "concise pattern": "GROUP BY",
        "template": "what are the different {COLUMN0} type codes , and how many {TABLE1} use each type ?",
        "name dict": {
          "{COLUMN1}": "template_type_code",
          "{COLUMN0}": "template_id",
          "{TABLE0}": "templates",
          "{AGG0}": "COUNT",
          "{TABLE1}": "documents"
        },
        "query": "SELECT Templates.Template_Type_Code, Count(*) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code"
      },
      {
        "question": "What are the ids and names of each document , as well as the number of paragraphs in each ?",
        "concise pattern": "GROUP BY",
        "template": "what are the ids and names of each {COLUMN0} , as well as the number of {TABLE1} in each ?",
        "name dict": {
          "{COLUMN0}": "document_id",
          "{TABLE0}": "documents",
          "{AGG0}": "COUNT",
          "{TABLE1}": "paragraphs"
        },
        "query": "SELECT Paragraphs.Document_ID, Documents.Document_Name, Count(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Paragraphs.Document_ID"
      },
      {
        "question": "For each hometown , how many teachers are there ?",
        "concise pattern": "GROUP BY",
        "template": "for each {COLUMN0} , how many {TABLE0} are there ?",
        "name dict": {
          "{COLUMN0}": "hometown",
          "{TABLE0}": "teacher",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT teacher.Hometown, Count(*) FROM teacher GROUP BY teacher.Hometown"
      },
      {
        "question": "Show names of teachers and the number of courses they teach .",
        "concise pattern": "GROUP BY",
        "template": "show {COLUMN1} of {TABLE0} and the number of courses they teach .",
        "name dict": {
          "{COLUMN1}": "name",
          "{COLUMN0}": "teacher_id",
          "{TABLE0}": "teacher",
          "{AGG0}": "COUNT",
          "{TABLE1}": "course arrange"
        },
        "query": "SELECT teacher.Name, Count(*) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name"
      },
      {
        "question": "What are the names of the teachers and how many courses do they teach ?",
        "concise pattern": "GROUP BY",
        "template": "what are the {COLUMN1} of the {TABLE0} and how many courses do they teach ?",
        "name dict": {
          "{COLUMN1}": "name",
          "{COLUMN0}": "teacher_id",
          "{TABLE0}": "teacher",
          "{AGG0}": "COUNT",
          "{TABLE1}": "course arrange"
        },
        "query": "SELECT teacher.Name, Count(*) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name"
      },
      {
        "question": "find the number of players for each country .",
        "concise pattern": "GROUP BY",
        "template": "find the number of {TABLE0} for each {COLUMN0} .",
        "name dict": {
          "{COLUMN0}": "country_code",
          "{TABLE0}": "players",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*), players.country_code FROM players GROUP BY players.country_code"
      },
      {
        "question": "How many players are from each country ?",
        "concise pattern": "GROUP BY",
        "template": "how many {TABLE0} are from each {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "country_code",
          "{TABLE0}": "players",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT players.country_code, Count(*) FROM players GROUP BY players.country_code"
      },
      {
        "question": "Find the total number of tours for each ranking date .",
        "concise pattern": "GROUP BY",
        "template": "find the total number of {COLUMN0} for each {COLUMN1} date .",
        "name dict": {
          "{COLUMN1}": "ranking_date",
          "{COLUMN0}": "tours",
          "{TABLE0}": "rankings",
          "{AGG0}": "SUM"
        },
        "query": "SELECT Sum(rankings.tours), rankings.ranking_date FROM rankings GROUP BY rankings.ranking_date"
      },
      {
        "question": "How many total tours were there for each ranking date ?",
        "concise pattern": "GROUP BY",
        "template": "how many total {COLUMN0} were there for each {COLUMN1} date ?",
        "name dict": {
          "{COLUMN1}": "ranking_date",
          "{COLUMN0}": "tours",
          "{TABLE0}": "rankings",
          "{AGG0}": "SUM"
        },
        "query": "SELECT Sum(rankings.tours), rankings.ranking_date FROM rankings GROUP BY rankings.ranking_date"
      },
      {
        "question": "Find the number of matches happened in each year .",
        "concise pattern": "GROUP BY",
        "template": "find the number of {TABLE0} happened in each {COLUMN0} .",
        "name dict": {
          "{COLUMN0}": "year",
          "{TABLE0}": "matches",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*), matches.year FROM matches GROUP BY matches.year"
      },
      {
        "question": "How many matches were played in each year ?",
        "concise pattern": "GROUP BY",
        "template": "how many {TABLE0} were played in each {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "year",
          "{TABLE0}": "matches",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*), matches.year FROM matches GROUP BY matches.year"
      },
      {
        "question": "Find the number of players for each hand type .",
        "concise pattern": "GROUP BY",
        "template": "find the number of {TABLE0} for each {COLUMN0} type .",
        "name dict": {
          "{COLUMN0}": "hand",
          "{TABLE0}": "players",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT players.hand, Count(*) FROM players GROUP BY players.hand"
      },
      {
        "question": "How many players are there for each hand type ?",
        "concise pattern": "GROUP BY",
        "template": "how many {TABLE0} are there for each {COLUMN0} type ?",
        "name dict": {
          "{COLUMN0}": "hand",
          "{TABLE0}": "players",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT players.hand, Count(*) FROM players GROUP BY players.hand"
      },
      {
        "question": "Find the number of cartoons directed by each of the listed directors .",
        "concise pattern": "GROUP BY",
        "template": "find the number of {TABLE0} {COLUMN0} by each of the listed directors .",
        "name dict": {
          "{COLUMN0}": "directed_by",
          "{TABLE0}": "cartoon",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*), Cartoon.Directed_by FROM Cartoon GROUP BY Cartoon.Directed_by"
      },
      {
        "question": "How many people are there of each nationality ?",
        "concise pattern": "GROUP BY",
        "template": "how many {TABLE0} are there of each {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "nationality",
          "{TABLE0}": "people",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT people.Nationality, Count(*) FROM people GROUP BY people.Nationality"
      },
      {
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted ?",
        "concise pattern": "GROUP BY",
        "template": "what are the names of {TABLE0} as well as the corresonding {COLUMN0} that they have conducted ?",
        "name dict": {
          "{COLUMN1}": "conductor_id",
          "{COLUMN0}": "orchestra",
          "{TABLE0}": "conductor",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT conductor.Name, Count(*) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY orchestra.Conductor_ID"
      },
      {
        "question": "Please show the different record companies and the corresponding number of orchestras .",
        "concise pattern": "GROUP BY",
        "template": "please show the different {COLUMN1} companies and the corresponding number of {COLUMN0} .",
        "name dict": {
          "{COLUMN1}": "record_company",
          "{COLUMN0}": "orchestra",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT orchestra.Record_Company, Count(*) FROM orchestra GROUP BY orchestra.Record_Company"
      },
      {
        "question": "How many orchestras does each record company manage ?",
        "concise pattern": "GROUP BY",
        "template": "how many {COLUMN0} does each {COLUMN1} company manage ?",
        "name dict": {
          "{COLUMN1}": "record_company",
          "{COLUMN0}": "orchestra",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT orchestra.Record_Company, Count(*) FROM orchestra GROUP BY orchestra.Record_Company"
      },
      {
        "question": "Show the student IDs and numbers of friends corresponding to each .",
        "concise pattern": "GROUP BY",
        "template": "show the {COLUMN0} ids and numbers of {TABLE0} corresponding to each .",
        "name dict": {
          "{COLUMN0}": "student_id",
          "{TABLE0}": "friend",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Friend.student_id, Count(*) FROM Friend GROUP BY Friend.student_id"
      },
      {
        "question": "How many friends does each student have ?",
        "concise pattern": "GROUP BY",
        "template": "how many {TABLE0} does each {COLUMN0} have ?",
        "name dict": {
          "{COLUMN0}": "student_id",
          "{TABLE0}": "friend",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*), Friend.student_id FROM Friend GROUP BY Friend.student_id"
      },
      {
        "question": "Show the names of high school students and their corresponding number of friends .",
        "concise pattern": "GROUP BY",
        "template": "show the {COLUMN2} of high school students and their corresponding number of {TABLE1} .",
        "name dict": {
          "{COLUMN0}": "id",
          "{COLUMN2}": "name",
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "student_id",
          "{AGG0}": "COUNT",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Highschooler.name, Count(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name"
      },
      {
        "question": "What are the names of the high schoolers and how many friends does each have ?",
        "concise pattern": "GROUP BY",
        "template": "what are the {COLUMN2} of the high schoolers and how many {TABLE1} does each have ?",
        "name dict": {
          "{COLUMN0}": "id",
          "{COLUMN2}": "name",
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "student_id",
          "{AGG0}": "COUNT",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Highschooler.name, Count(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name"
      },
      {
        "question": "Count the number of likes for each student id .",
        "concise pattern": "GROUP BY",
        "template": "count the number of {TABLE0} for each {COLUMN0} id .",
        "name dict": {
          "{COLUMN0}": "student_id",
          "{TABLE0}": "likes",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(DISTINCT Likes.student_id), Likes.student_id FROM Likes GROUP BY Likes.student_id"
      },
      {
        "question": "How many likes correspond to each student id ?",
        "concise pattern": "GROUP BY",
        "template": "how many {TABLE0} correspond to each {COLUMN0} id ?",
        "name dict": {
          "{COLUMN0}": "student_id",
          "{TABLE0}": "likes",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*), Likes.student_id FROM Likes GROUP BY Likes.student_id"
      },
      {
        "question": "How much does each charge type costs ? List both charge type and amount .",
        "concise pattern": "GROUP BY",
        "template": "how much does each {COLUMN0} type costs ? list both {COLUMN0} type and amount .",
        "name dict": {
          "{COLUMN1}": "charge_type",
          "{COLUMN0}": "charge_amount",
          "{TABLE0}": "charges",
          "{AGG0}": "SUM"
        },
        "query": "SELECT Charges.charge_type, Sum(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type"
      },
      {
        "question": "For each citizenship , how many singers are from that country ?",
        "concise pattern": "GROUP BY",
        "template": "for each {COLUMN0} , how many {TABLE0} are from that country ?",
        "name dict": {
          "{COLUMN0}": "citizenship",
          "{TABLE0}": "singer",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT singer.Citizenship, Count(*) FROM singer GROUP BY singer.Citizenship"
      },
      {
        "question": "For each citizenship , what is the maximum net worth ?",
        "concise pattern": "GROUP BY",
        "template": "for each {COLUMN1} , what is the maximum {COLUMN0} worth ?",
        "name dict": {
          "{COLUMN1}": "citizenship",
          "{COLUMN0}": "net_worth_millions",
          "{TABLE0}": "singer",
          "{AGG0}": "MAX"
        },
        "query": "SELECT Max(singer.Net_Worth_Millions), singer.Citizenship FROM singer GROUP BY singer.Citizenship"
      },
      {
        "question": "How many singers are from each country ?",
        "concise pattern": "GROUP BY",
        "template": "how many {TABLE0} are from each country ?",
        "name dict": {
          "{COLUMN0}": "country",
          "{TABLE0}": "singer",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT singer.Country, Count(*) FROM singer GROUP BY singer.Country"
      },
      {
        "question": "What are the names , themes , and number of singers for each and every concert ?",
        "concise pattern": "GROUP BY",
        "template": "what are the names , themes , and number of singers for each and every {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "concert_id",
          "{TABLE0}": "concert",
          "{AGG0}": "COUNT",
          "{TABLE1}": "singer in concert"
        },
        "query": "SELECT concert.concert_Name, concert.Theme, Count(*) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY singer_in_concert.concert_ID"
      },
      {
        "question": "List the maximum weight and type for each type of pet .",
        "concise pattern": "GROUP BY",
        "template": "list the maximum {COLUMN0} and type for each type of pet .",
        "name dict": {
          "{COLUMN1}": "pettype",
          "{COLUMN0}": "weight",
          "{TABLE0}": "pets",
          "{AGG1}": "MAX",
          "{AGG0}": "MAX"
        },
        "query": "SELECT Max(Pets.weight), Pets.PetType, Max(Pets.weight) FROM Pets GROUP BY Pets.PetType"
      },
      {
        "question": "What is the average and maximum age for each pet type ?",
        "concise pattern": "GROUP BY",
        "template": "what is the average and maximum {COLUMN0} for each pet type ?",
        "name dict": {
          "{COLUMN0}": "age",
          "{COLUMN2}": "stuid",
          "{TABLE0}": "student",
          "{COLUMN1}": "pettype",
          "{COLUMN3}": "petid",
          "{AGG0}": "AVG",
          "{TABLE1}": "has pet",
          "{TABLE2}": "pets"
        },
        "query": "SELECT Avg(Student.Age), Pets.PetType FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY Pets.PetType"
      },
      {
        "question": "Find the average weight for each pet type .",
        "concise pattern": "GROUP BY",
        "template": "find the average {COLUMN0} for each pet type .",
        "name dict": {
          "{COLUMN1}": "pettype",
          "{COLUMN0}": "weight",
          "{TABLE0}": "pets",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Pets.PetType, Avg(Pets.weight) FROM Pets GROUP BY Pets.PetType"
      },
      {
        "question": "What is the average weight for each type of pet ?",
        "concise pattern": "GROUP BY",
        "template": "what is the average {COLUMN0} for each type of pet ?",
        "name dict": {
          "{COLUMN1}": "pettype",
          "{COLUMN0}": "weight",
          "{TABLE0}": "pets",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(Pets.weight), Pets.PetType FROM Pets GROUP BY Pets.PetType"
      },
      {
        "question": "Find the number of pets for each student who has any pet and student id .",
        "concise pattern": "GROUP BY",
        "template": "find the number of {TABLE1} for each student who has any pet and student id .",
        "name dict": {
          "{COLUMN1}": "petid",
          "{COLUMN0}": "stuid",
          "{TABLE0}": "has pet",
          "{AGG0}": "COUNT",
          "{TABLE1}": "pets"
        },
        "query": "SELECT Count(*), Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY Has_Pet.StuID"
      },
      {
        "question": "What is the name of each continent and how many car makers are there in each one ?",
        "concise pattern": "GROUP BY",
        "template": "what is the name of each {COLUMN1} and how many car makers are there in each one ?",
        "name dict": {
          "{COLUMN1}": "continent",
          "{COLUMN0}": "contid",
          "{TABLE0}": "continents",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countries"
        },
        "query": "SELECT continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.Continent"
      },
      {
        "question": "What is the number of employees from each city ?",
        "concise pattern": "GROUP BY",
        "template": "what is the number of {TABLE0} from each city ?",
        "name dict": {
          "{COLUMN0}": "city",
          "{TABLE0}": "employee",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*), employee.City FROM employee GROUP BY employee.City"
      },
      {
        "question": "Count the number of employees for each city .",
        "concise pattern": "GROUP BY",
        "template": "count the number of {TABLE0} for each city .",
        "name dict": {
          "{COLUMN0}": "city",
          "{TABLE0}": "employee",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*), employee.City FROM employee GROUP BY employee.City"
      },
      {
        "question": "What is maximum and minimum death toll caused each time ?",
        "concise pattern": "GROUP BY",
        "template": "what is maximum and minimum {TABLE0} toll caused each time ?",
        "name dict": {
          "{COLUMN1}": "killed",
          "{COLUMN0}": "injured",
          "{TABLE0}": "death",
          "{AGG1}": "MIN",
          "{AGG0}": "MAX"
        },
        "query": "SELECT Max(death.injured), Min(death.injured), death.killed FROM death GROUP BY death.killed"
      },
      {
        "question": "List each language and the number of TV Channels using it .",
        "concise pattern": "GROUP BY",
        "template": "list each {COLUMN0} and the number of tv channels using it .",
        "name dict": {
          "{COLUMN0}": "language",
          "{TABLE0}": "tv channel",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT TV_Channel.Language, Count(*) FROM TV_Channel GROUP BY TV_Channel.Language"
      },
      {
        "question": "For each language , list the number of TV Channels that use it .",
        "concise pattern": "GROUP BY",
        "template": "for each {COLUMN0} , list the number of tv channels that use it .",
        "name dict": {
          "{COLUMN0}": "language",
          "{TABLE0}": "tv channel",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT TV_Channel.Language, Count(*) FROM TV_Channel GROUP BY TV_Channel.Language"
      },
      {
        "question": "How many cartoons did each director create ?",
        "concise pattern": "GROUP BY",
        "template": "how many {TABLE0} did each director create ?",
        "name dict": {
          "{COLUMN0}": "directed_by",
          "{TABLE0}": "cartoon",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*), Cartoon.Directed_by FROM Cartoon GROUP BY Cartoon.Directed_by"
      },
      {
        "question": "Show the number of high schoolers for each grade .",
        "concise pattern": "GROUP BY",
        "template": "show the number of high schoolers for each {COLUMN0} .",
        "name dict": {
          "{COLUMN0}": "grade",
          "{TABLE0}": "high schooler",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*), Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade"
      },
      {
        "question": "How many high schoolers are in each grade ?",
        "concise pattern": "GROUP BY",
        "template": "how many high schoolers are in each {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "grade",
          "{TABLE0}": "high schooler",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*), Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade"
      },
      {
        "question": "List each charge type and its amount .",
        "concise pattern": "GROUP BY",
        "template": "list each {COLUMN0} type and its amount .",
        "name dict": {
          "{COLUMN1}": "charge_type",
          "{COLUMN0}": "charge_amount",
          "{TABLE0}": "charges",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Charges.charge_type, Count(DISTINCT Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type"
      },
      {
        "question": "What is the average number of injuries caused each time ?",
        "concise pattern": "GROUP BY",
        "template": "what is the average number of injuries caused each time ?",
        "name dict": {
          "{COLUMN1}": "killed",
          "{COLUMN0}": "injured",
          "{TABLE0}": "death",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(death.injured), death.killed FROM death GROUP BY death.killed"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} ORDER BY {COLUMN0} {SC0} LIMIT {VALUE0}",
    [
      {
        "question": "Which employee received the biggest bonus ? Give me the employee name .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "which {COLUMN1} received the biggest {COLUMN2} ? give me the {COLUMN1} {COLUMN0} .",
        "name dict": {
          "{COLUMN1}": "employee_id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "bonus",
          "{TABLE0}": "employee",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{TABLE1}": "evaluation"
        },
        "query": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus Desc LIMIT 1"
      },
      {
        "question": "List all song names by singers above the average age .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "list all {COLUMN0} names by {TABLE0} above the average {COLUMN1} .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "age",
          "{COLUMN0}": "song_name",
          "{TABLE0}": "singer",
          "{SC0}": "DESC"
        },
        "query": "SELECT singer.Song_Name FROM singer ORDER BY singer.Age Desc LIMIT 1"
      },
      {
        "question": "What is the name and capacity for the stadium with highest average attendance ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the name and {COLUMN0} for the {TABLE0} with highest {COLUMN1} attendance ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "average",
          "{COLUMN0}": "capacity",
          "{TABLE0}": "stadium",
          "{SC0}": "DESC"
        },
        "query": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Average Desc LIMIT 1"
      },
      {
        "question": "What is the name and capacity for the stadium with the highest average attendance ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the name and {COLUMN0} for the {TABLE0} with the highest {COLUMN1} attendance ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "average",
          "{COLUMN0}": "capacity",
          "{TABLE0}": "stadium",
          "{SC0}": "DESC"
        },
        "query": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Average Desc LIMIT 1"
      },
      {
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "find the number of {TABLE1} happened in the {COLUMN0} with the highest {COLUMN1} .",
        "name dict": {
          "{COLUMN1}": "capacity",
          "{COLUMN0}": "stadium_id",
          "{TABLE0}": "stadium",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "concert"
        },
        "query": "SELECT Count(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID ORDER BY stadium.Capacity Desc LIMIT 1"
      },
      {
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what are the number of {TABLE1} that occurred in the {COLUMN0} with the largest {COLUMN1} ?",
        "name dict": {
          "{COLUMN1}": "capacity",
          "{COLUMN0}": "stadium_id",
          "{TABLE0}": "stadium",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{TABLE1}": "concert"
        },
        "query": "SELECT Count(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID ORDER BY stadium.Capacity Desc LIMIT 1"
      },
      {
        "question": "What is the maker of the carr produced in the earliest year and what year was it ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the {COLUMN2} of the carr produced in the earliest {COLUMN0} and what {COLUMN0} was it ?",
        "name dict": {
          "{SC0}": "ASC",
          "{COLUMN1}": "id",
          "{COLUMN0}": "year",
          "{COLUMN2}": "maker",
          "{TABLE0}": "car makers",
          "{TABLE1}": "model list",
          "{COLUMN4}": "makeid",
          "{VALUE0}": "1",
          "{COLUMN3}": "model",
          "{TABLE3}": "cars data",
          "{TABLE2}": "car names"
        },
        "query": "SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Year Asc LIMIT 1"
      },
      {
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the maximum {COLUMN0} and the {COLUMN1} of the car models with 3 {COLUMN4} ?",
        "name dict": {
          "{COLUMN1}": "make",
          "{COLUMN0}": "horsepower",
          "{COLUMN2}": "makeid",
          "{TABLE0}": "car names",
          "{SC0}": "DESC",
          "{COLUMN4}": "cylinders",
          "{VALUE0}": "1",
          "{COLUMN3}": "id",
          "{AGG0}": "MAX",
          "{TABLE1}": "cars data"
        },
        "query": "SELECT Max(cars_data.Horsepower), car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Cylinders Desc LIMIT 1"
      },
      {
        "question": "Find the manager name and district of the shop whose number of products is the largest .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "find the manager name and {COLUMN0} of the {TABLE0} whose {COLUMN1} of products is the largest .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "number_products",
          "{COLUMN0}": "district",
          "{TABLE0}": "shop",
          "{SC0}": "DESC"
        },
        "query": "SELECT shop.Manager_name, shop.District FROM shop ORDER BY shop.Number_products Desc LIMIT 1"
      },
      {
        "question": "What are the manager name and district of the shop that sells the largest number of products ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what are the manager name and {COLUMN0} of the {TABLE0} that sells the largest {COLUMN1} of products ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "number_products",
          "{COLUMN0}": "district",
          "{TABLE0}": "shop",
          "{SC0}": "DESC"
        },
        "query": "SELECT shop.Manager_name, shop.District FROM shop ORDER BY shop.Number_products Desc LIMIT 1"
      },
      {
        "question": "Find the name of the employee who got the highest one time bonus .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "find the {COLUMN0} of the {COLUMN1} who got the highest one time {COLUMN2} .",
        "name dict": {
          "{COLUMN1}": "employee_id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "bonus",
          "{TABLE0}": "employee",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{TABLE1}": "evaluation"
        },
        "query": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus Desc LIMIT 1"
      },
      {
        "question": "What is the best rank of losers across all matches ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the {COLUMN3} {COLUMN0} of losers across all {TABLE1} ?",
        "name dict": {
          "{TABLE0}": "players",
          "{COLUMN3}": "best_of",
          "{TABLE1}": "matches",
          "{TABLE2}": "rankings",
          "{COLUMN1}": "player_id",
          "{COLUMN0}": "ranking",
          "{COLUMN2}": "loser_id",
          "{VALUE0}": "1",
          "{SC0}": "ASC"
        },
        "query": "SELECT rankings.ranking FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY matches.best_of Asc LIMIT 1"
      },
      {
        "question": "What is the first , middle , and last name of the first student to register ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the {COLUMN1} , middle , and {COLUMN0} name of the {COLUMN1} student to register ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "first_name",
          "{COLUMN0}": "last_name",
          "{TABLE0}": "students",
          "{SC0}": "ASC"
        },
        "query": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.first_name Asc LIMIT 1"
      },
      {
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "find the {COLUMN1} code and {COLUMN0} of the most recently aired {TABLE0} .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "production_code",
          "{COLUMN0}": "channel",
          "{TABLE0}": "cartoon",
          "{SC0}": "DESC"
        },
        "query": "SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Production_code Desc LIMIT 1"
      },
      {
        "question": "What is the name of the singer with the largest net worth ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the {COLUMN0} of the {TABLE0} with the largest {COLUMN1} worth ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "net_worth_millions",
          "{COLUMN0}": "name",
          "{TABLE0}": "singer",
          "{SC0}": "DESC"
        },
        "query": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions Desc LIMIT 1"
      },
      {
        "question": "Show the name and the release year of the song by the youngest singer .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "show the name and the release year of the {COLUMN0} by the youngest {TABLE0} .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "age",
          "{COLUMN0}": "song_release_year",
          "{TABLE0}": "singer",
          "{SC0}": "DESC"
        },
        "query": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age Desc LIMIT 1"
      },
      {
        "question": "Which model of the car has the minimum horsepower ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "which {COLUMN0} of the car has the minimum {COLUMN3} ?",
        "name dict": {
          "{TABLE0}": "model list",
          "{COLUMN3}": "horsepower",
          "{TABLE1}": "car names",
          "{TABLE2}": "cars data",
          "{COLUMN1}": "makeid",
          "{COLUMN0}": "model",
          "{COLUMN2}": "id",
          "{VALUE0}": "1",
          "{SC0}": "ASC"
        },
        "query": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model AND model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Horsepower Asc LIMIT 1"
      },
      {
        "question": "What is the model of the car with the smallest amount of horsepower ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the {COLUMN0} of the car with the smallest amount of {COLUMN3} ?",
        "name dict": {
          "{TABLE0}": "model list",
          "{COLUMN3}": "horsepower",
          "{TABLE1}": "car names",
          "{TABLE2}": "cars data",
          "{COLUMN1}": "makeid",
          "{COLUMN0}": "model",
          "{COLUMN2}": "id",
          "{VALUE0}": "1",
          "{SC0}": "ASC"
        },
        "query": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Horsepower Asc LIMIT 1"
      },
      {
        "question": "Find the make and production time of the cars that were produced in the earliest year ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "find the {COLUMN0} and production time of the cars that were produced in the earliest {COLUMN3} ?",
        "name dict": {
          "{COLUMN1}": "makeid",
          "{COLUMN0}": "make",
          "{COLUMN2}": "id",
          "{TABLE0}": "car names",
          "{SC0}": "ASC",
          "{VALUE0}": "1",
          "{COLUMN3}": "year",
          "{TABLE1}": "cars data"
        },
        "query": "SELECT car_names.Make, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Year Asc LIMIT 1"
      },
      {
        "question": "What is the horsepower of the car with the largest accelerate ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the {COLUMN0} of the car with the largest {COLUMN1} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "accelerate",
          "{COLUMN0}": "horsepower",
          "{TABLE0}": "cars data",
          "{SC0}": "DESC"
        },
        "query": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate Desc LIMIT 1"
      },
      {
        "question": "What is the horsepower of the car with the greatest accelerate ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the {COLUMN0} of the car with the greatest {COLUMN1} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "accelerate",
          "{COLUMN0}": "horsepower",
          "{TABLE0}": "cars data",
          "{SC0}": "DESC"
        },
        "query": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate Desc LIMIT 1"
      },
      {
        "question": "For all of the 4 cylinder cars , which model has the most horsepower ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "for all of the 4 {COLUMN0} cars , which model has the most {COLUMN1} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "horsepower",
          "{COLUMN0}": "cylinders",
          "{TABLE0}": "cars data",
          "{SC0}": "DESC"
        },
        "query": "SELECT cars_data.Cylinders FROM cars_data ORDER BY cars_data.Horsepower Desc LIMIT 1"
      },
      {
        "question": "What is the hometown of the youngest teacher ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the {COLUMN0} of the youngest {TABLE0} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "age",
          "{COLUMN0}": "hometown",
          "{TABLE0}": "teacher",
          "{SC0}": "ASC"
        },
        "query": "SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age Asc LIMIT 1"
      },
      {
        "question": "Find the id and name of the museum that has the most staff members ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "find the id and {COLUMN0} of the {TABLE0} that has the most staff members ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "num_of_staff",
          "{COLUMN0}": "name",
          "{TABLE0}": "museum",
          "{SC0}": "DESC"
        },
        "query": "SELECT museum.Museum_ID, museum.Name FROM museum ORDER BY museum.Num_of_Staff Desc LIMIT 1"
      },
      {
        "question": "find the names of loser and winner who played in the match with greatest number of minutes .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "find the names of loser and {COLUMN0} who played in the match with greatest number of {COLUMN1} .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "minutes",
          "{COLUMN0}": "winner_name",
          "{TABLE0}": "matches",
          "{SC0}": "DESC"
        },
        "query": "SELECT matches.winner_name, matches.winner_name FROM matches ORDER BY matches.minutes Desc LIMIT 1"
      },
      {
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the produdction code and {COLUMN0} of the most recent {TABLE0} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "written_by",
          "{COLUMN0}": "channel",
          "{TABLE0}": "cartoon",
          "{SC0}": "DESC"
        },
        "query": "SELECT Cartoon.Directed_by, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Written_by Desc LIMIT 1"
      },
      {
        "question": "What is the money rank of the poker player with the highest earnings ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the {COLUMN0} rank of the poker player with the highest {COLUMN1} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "earnings",
          "{COLUMN0}": "money_rank",
          "{TABLE0}": "poker player",
          "{SC0}": "DESC"
        },
        "query": "SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings Desc LIMIT 1"
      },
      {
        "question": "Return the money rank of the player with the greatest earnings .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "return the {COLUMN0} rank of the player with the greatest {COLUMN1} .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "earnings",
          "{COLUMN0}": "money_rank",
          "{TABLE0}": "poker player",
          "{SC0}": "DESC"
        },
        "query": "SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings Desc LIMIT 1"
      },
      {
        "question": "What is the birth date of the poker player with the lowest earnings ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the {COLUMN0} date of the poker player with the lowest {COLUMN2} ?",
        "name dict": {
          "{COLUMN1}": "people_id",
          "{COLUMN0}": "birth_date",
          "{COLUMN2}": "earnings",
          "{TABLE0}": "poker player",
          "{SC0}": "ASC",
          "{VALUE0}": "1",
          "{TABLE1}": "people"
        },
        "query": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings Asc LIMIT 1"
      },
      {
        "question": "Return the birth date of the poker player with the lowest earnings .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "return the {COLUMN0} date of the poker player with the lowest {COLUMN2} .",
        "name dict": {
          "{COLUMN1}": "people_id",
          "{COLUMN0}": "birth_date",
          "{COLUMN2}": "earnings",
          "{TABLE0}": "poker player",
          "{SC0}": "ASC",
          "{VALUE0}": "1",
          "{TABLE1}": "people"
        },
        "query": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings Asc LIMIT 1"
      },
      {
        "question": "Return the money rank of the poker player with the greatest height .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "return the {COLUMN0} rank of the poker player with the greatest {COLUMN2} .",
        "name dict": {
          "{COLUMN1}": "people_id",
          "{COLUMN0}": "money_rank",
          "{COLUMN2}": "height",
          "{TABLE0}": "poker player",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{TABLE1}": "people"
        },
        "query": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height Desc LIMIT 1"
      },
      {
        "question": "What are the name , independence year , and surface area of the country with the smallest population ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what are the name , independence year , and surface area of the {TABLE0} with the smallest {COLUMN1} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "population",
          "{COLUMN0}": "surfacearea",
          "{TABLE0}": "country",
          "{SC0}": "ASC"
        },
        "query": "SELECT country.Name, country.SurfaceArea, country.SurfaceArea FROM country ORDER BY country.Population Asc LIMIT 1"
      },
      {
        "question": "Give the name , year of independence , and surface area of the country that has the lowest population .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "give the name , year of independence , and surface area of the {TABLE0} that has the lowest {COLUMN1} .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "population",
          "{COLUMN0}": "surfacearea",
          "{TABLE0}": "country",
          "{SC0}": "ASC"
        },
        "query": "SELECT country.Name, country.SurfaceArea, country.SurfaceArea FROM country ORDER BY country.Population Asc LIMIT 1"
      },
      {
        "question": "What are names of countries with the top 3 largest population ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what are {COLUMN0} of countries with the top 3 largest {COLUMN1} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "population",
          "{COLUMN0}": "name",
          "{TABLE0}": "country",
          "{SC0}": "DESC"
        },
        "query": "SELECT country.Name FROM country ORDER BY country.Population Desc LIMIT 1"
      },
      {
        "question": "Return the names of the 3 most populated countries .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "return the {COLUMN0} of the 3 most {COLUMN1} countries .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "population",
          "{COLUMN0}": "name",
          "{TABLE0}": "country",
          "{SC0}": "DESC"
        },
        "query": "SELECT country.Name FROM country ORDER BY country.Population Desc LIMIT 1"
      },
      {
        "question": "What are the names of the nations with the 3 lowest populations ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what are the {COLUMN0} of the nations with the 3 lowest {COLUMN1} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "population",
          "{COLUMN0}": "name",
          "{TABLE0}": "country",
          "{SC0}": "ASC"
        },
        "query": "SELECT country.Name FROM country ORDER BY country.Population Asc LIMIT 1"
      },
      {
        "question": "List the name of the conductor with the most years of work .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "list the {COLUMN0} of the {TABLE0} with the most years of work .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "year_of_work",
          "{COLUMN0}": "name",
          "{TABLE0}": "conductor",
          "{SC0}": "DESC"
        },
        "query": "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work Desc LIMIT 1"
      },
      {
        "question": "What is the name of the conductor who has worked the greatest number of years ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the {COLUMN0} of the {TABLE0} who has worked the greatest number of years ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "year_of_work",
          "{COLUMN0}": "name",
          "{TABLE0}": "conductor",
          "{SC0}": "DESC"
        },
        "query": "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work Desc LIMIT 1"
      },
      {
        "question": "List the last name of the owner owning the youngest dog .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "list the {COLUMN0} name of the {COLUMN1} owning the youngest dog .",
        "name dict": {
          "{COLUMN1}": "owner_id",
          "{COLUMN0}": "last_name",
          "{COLUMN2}": "age",
          "{TABLE0}": "owners",
          "{SC0}": "ASC",
          "{VALUE0}": "1",
          "{TABLE1}": "dogs"
        },
        "query": "SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.age Asc LIMIT 1"
      },
      {
        "question": "What is the name of the singer who is worth the most ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the {COLUMN0} of the {TABLE0} who is worth the most ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "net_worth_millions",
          "{COLUMN0}": "name",
          "{TABLE0}": "singer",
          "{SC0}": "DESC"
        },
        "query": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions Desc LIMIT 1"
      },
      {
        "question": "What are the names and release years for all the songs of the youngest singer ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what are the names and release years for all the songs of the youngest {TABLE0} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "age",
          "{COLUMN0}": "song_release_year",
          "{TABLE0}": "singer",
          "{SC0}": "DESC"
        },
        "query": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age Desc LIMIT 1"
      },
      {
        "question": "Find the type and weight of the youngest pet .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "find the type and {COLUMN0} of the youngest pet .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "weight",
          "{TABLE0}": "pets",
          "{SC0}": "DESC"
        },
        "query": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.weight Desc LIMIT 1"
      },
      {
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the largest amount of horsepower for the models with 3 {COLUMN0} and what make is it ?",
        "name dict": {
          "{COLUMN1}": "makeid",
          "{COLUMN0}": "cylinders",
          "{COLUMN2}": "id",
          "{TABLE0}": "car names",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{TABLE1}": "cars data"
        },
        "query": "SELECT cars_data.Horsepower, cars_data.Cylinders FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Cylinders Desc LIMIT 1"
      },
      {
        "question": "What is the car wmodel with the highest mpg ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the car wmodel with the highest {COLUMN3} ?",
        "name dict": {
          "{COLUMN1}": "makeid",
          "{COLUMN0}": "model",
          "{COLUMN2}": "id",
          "{TABLE0}": "car names",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{COLUMN3}": "mpg",
          "{TABLE1}": "cars data"
        },
        "query": "SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.MPG Desc LIMIT 1"
      },
      {
        "question": "Where is the youngest teacher from ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "where is the youngest {TABLE0} from ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "age",
          "{COLUMN0}": "name",
          "{TABLE0}": "teacher",
          "{SC0}": "DESC"
        },
        "query": "SELECT teacher.Name FROM teacher ORDER BY teacher.Age Desc LIMIT 1"
      },
      {
        "question": "Find the highest rank of losers in all matches .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "find the highest {COLUMN0} of losers in all matches .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "ranking",
          "{TABLE0}": "rankings",
          "{SC0}": "DESC"
        },
        "query": "SELECT rankings.ranking FROM rankings ORDER BY rankings.ranking Desc LIMIT 1"
      },
      {
        "question": "Find the first name and country code of the oldest player .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "find the first name and {COLUMN0} code of the oldest player .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "birth_date",
          "{COLUMN0}": "country_code",
          "{TABLE0}": "players",
          "{SC0}": "DESC"
        },
        "query": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date Desc LIMIT 1"
      },
      {
        "question": "What is the first name and country code of the oldest player ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the first name and {COLUMN0} code of the oldest player ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "birth_date",
          "{COLUMN0}": "country_code",
          "{TABLE0}": "players",
          "{SC0}": "DESC"
        },
        "query": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date Desc LIMIT 1"
      },
      {
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "find the name of the {COLUMN0} who has the highest rank points and participated in the australian open tourney .",
        "name dict": {
          "{TABLE0}": "players",
          "{COLUMN3}": "ranking_points",
          "{TABLE1}": "matches",
          "{TABLE2}": "rankings",
          "{COLUMN1}": "loser_id",
          "{COLUMN0}": "winner_name",
          "{COLUMN2}": "player_id",
          "{VALUE0}": "1",
          "{SC0}": "DESC"
        },
        "query": "SELECT matches.winner_name FROM players JOIN matches ON matches.loser_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking_points Desc LIMIT 1"
      },
      {
        "question": "What are the names of the winner and loser who played in the longest match ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what are the names of the winner and {COLUMN0} who played in the longest match ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "loser_age",
          "{COLUMN0}": "loser_name",
          "{TABLE0}": "matches",
          "{SC0}": "DESC"
        },
        "query": "SELECT matches.winner_name, matches.loser_name FROM matches ORDER BY matches.loser_age Desc LIMIT 1"
      },
      {
        "question": "Find the name and rank of the 3 youngest winners across all matches .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "find the name and rank of the 3 youngest winners across all {TABLE0} .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "winner_age",
          "{COLUMN0}": "winner_hand",
          "{TABLE0}": "matches",
          "{SC0}": "ASC"
        },
        "query": "SELECT matches.winner_name, matches.winner_hand FROM matches ORDER BY matches.winner_age Asc LIMIT 1"
      },
      {
        "question": "What are the names and ranks of the three youngest winners across all matches ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what are the names and ranks of the three youngest winners across all {TABLE0} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "winner_ioc",
          "{COLUMN0}": "winner_age",
          "{TABLE0}": "matches",
          "{SC0}": "ASC"
        },
        "query": "SELECT matches.winner_name, matches.winner_age FROM matches ORDER BY matches.winner_ioc Asc LIMIT 1"
      },
      {
        "question": "Find the first name , country code and birth date of the winner who has the highest rank points in all matches .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "find the first name , country code and {COLUMN0} date of the winner who has the highest rank points in all matches .",
        "name dict": {
          "{COLUMN1}": "player_id",
          "{COLUMN0}": "birth_date",
          "{COLUMN2}": "ranking_points",
          "{TABLE0}": "players",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{TABLE1}": "rankings"
        },
        "query": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking_points Desc LIMIT 1"
      },
      {
        "question": "Who is the earliest graduate of the school ? List the first name , middle name and last name .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "who is the earliest graduate of the school ? list the first name , middle name and {COLUMN0} name .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "date_left",
          "{COLUMN0}": "last_name",
          "{TABLE0}": "students",
          "{SC0}": "ASC"
        },
        "query": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_left Asc LIMIT 1"
      },
      {
        "question": "What is the first , middle , and last name of the earliest school graduate ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the first , middle , and {COLUMN0} name of the earliest school graduate ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "date_left",
          "{COLUMN0}": "last_name",
          "{TABLE0}": "students",
          "{SC0}": "ASC"
        },
        "query": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_left Asc LIMIT 1"
      },
      {
        "question": "When is the first transcript released ? List the date and details .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "when is the first {COLUMN0} released ? list the date and details .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "transcript_date",
          "{TABLE0}": "transcripts",
          "{SC0}": "ASC"
        },
        "query": "SELECT Transcripts.transcript_date, Transcripts.transcript_date FROM Transcripts ORDER BY Transcripts.transcript_date Asc LIMIT 1"
      },
      {
        "question": "What is the earliest date of a transcript release , and what details can you tell me ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the earliest date of a {COLUMN4} release , and what details can you tell me ?",
        "name dict": {
          "{TABLE0}": "students",
          "{TABLE3}": "transcripts",
          "{COLUMN3}": "student_course_id",
          "{TABLE4}": "transcript contents",
          "{TABLE1}": "student enrolment",
          "{TABLE2}": "student enrolment courses",
          "{VALUE0}": "1",
          "{COLUMN0}": "transcript_date",
          "{COLUMN2}": "student_enrolment_id",
          "{COLUMN4}": "transcript_id",
          "{COLUMN1}": "student_id",
          "{SC0}": "ASC"
        },
        "query": "SELECT Students.date_left, Transcripts.transcript_date FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Transcripts JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id AND Transcript_Contents.transcript_id = Transcripts.transcript_id ORDER BY Transcripts.transcript_date Asc LIMIT 1"
      },
      {
        "question": "What is the last transcript release date ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the last {COLUMN0} release date ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "transcript_date",
          "{TABLE0}": "transcripts",
          "{SC0}": "DESC"
        },
        "query": "SELECT Transcripts.transcript_date FROM Transcripts ORDER BY Transcripts.transcript_date Desc LIMIT 1"
      },
      {
        "question": "When was the last transcript released ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "when was the last {COLUMN0} released ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "transcript_date",
          "{TABLE0}": "transcripts",
          "{SC0}": "DESC"
        },
        "query": "SELECT Transcripts.transcript_date FROM Transcripts ORDER BY Transcripts.transcript_date Desc LIMIT 1"
      },
      {
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what are 3 most highly {COLUMN0} episodes in the tv series table and what were those ratings ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "rating",
          "{TABLE0}": "tv series",
          "{SC0}": "DESC"
        },
        "query": "SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating Desc LIMIT 1"
      },
      {
        "question": "What is the money rank of the tallest poker player ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the {COLUMN0} rank of the tallest poker player ?",
        "name dict": {
          "{COLUMN1}": "people_id",
          "{COLUMN0}": "money_rank",
          "{COLUMN2}": "height",
          "{TABLE0}": "poker player",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{TABLE1}": "people"
        },
        "query": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height Desc LIMIT 1"
      },
      {
        "question": "Find the name , population and expected life length of asian country with the largest area ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "find the name , population and expected life length of asian {TABLE0} with the largest area ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "governmentform",
          "{COLUMN0}": "lifeexpectancy",
          "{TABLE0}": "country",
          "{SC0}": "DESC"
        },
        "query": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country ORDER BY country.GovernmentForm Desc LIMIT 1"
      },
      {
        "question": "What are the name , population , and life expectancy of the largest Asian country by land ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what are the name , population , and life expectancy of the largest asian {TABLE0} by land ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "lifeexpectancy",
          "{TABLE0}": "country",
          "{SC0}": "DESC"
        },
        "query": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country ORDER BY country.LifeExpectancy Desc LIMIT 1"
      },
      {
        "question": "What are the population , name and leader of the country with the largest area ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what are the population , name and leader of the {TABLE0} with the largest area ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "governmentform",
          "{TABLE0}": "country",
          "{SC0}": "DESC"
        },
        "query": "SELECT country.Population, country.Name, country.GovernmentForm FROM country ORDER BY country.GovernmentForm Desc LIMIT 1"
      },
      {
        "question": "Give the name , population , and head of state for the country that has the largest area .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "give the name , population , and head of state for the {TABLE0} that has the largest area .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "governmentform",
          "{COLUMN0}": "headofstate",
          "{TABLE0}": "country",
          "{SC0}": "DESC"
        },
        "query": "SELECT country.Name, country.Population, country.HeadOfState FROM country ORDER BY country.GovernmentForm Desc LIMIT 1"
      },
      {
        "question": "Who owns the youngest dog ? Give me his or her last name .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "who owns the youngest dog ? give me his or her last {COLUMN0} .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "date_arrived",
          "{COLUMN0}": "name",
          "{TABLE0}": "dogs",
          "{SC0}": "DESC"
        },
        "query": "SELECT Dogs.name FROM Dogs ORDER BY Dogs.date_arrived Desc LIMIT 1"
      },
      {
        "question": "How much does the most recent treatment cost ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "how much does the most recent treatment {COLUMN0} ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "cost_of_treatment",
          "{TABLE0}": "treatments",
          "{SC0}": "DESC"
        },
        "query": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.cost_of_treatment Desc LIMIT 1"
      },
      {
        "question": "Show me the cost of the most recently performed treatment .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "show me the {COLUMN0} of the most recently performed treatment .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "cost_of_treatment",
          "{TABLE0}": "treatments",
          "{SC0}": "DESC"
        },
        "query": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.cost_of_treatment Desc LIMIT 1"
      },
      {
        "question": "What is the age of the oldest dog ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what is the {COLUMN0} of the oldest dog ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "age",
          "{TABLE0}": "dogs",
          "{SC0}": "DESC"
        },
        "query": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age Desc LIMIT 1"
      },
      {
        "question": "Tell me the age of the oldest dog .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "tell me the {COLUMN0} of the oldest dog .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "age",
          "{TABLE0}": "dogs",
          "{SC0}": "DESC"
        },
        "query": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age Desc LIMIT 1"
      },
      {
        "question": "How much does the most expensive charge type costs ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "how much does the most expensive {COLUMN0} type costs ?",
        "name dict": {
          "{COLUMN1}": "charge_type",
          "{COLUMN0}": "charge_amount",
          "{TABLE0}": "charges",
          "{VALUE0}": "1",
          "{AGG0}": "MAX",
          "{SC0}": "DESC"
        },
        "query": "SELECT Max(Charges.charge_amount) FROM Charges ORDER BY Charges.charge_type Desc LIMIT 1"
      },
      {
        "question": "What type of pet is the youngest animal , and how much does it weigh ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what type of pet is the youngest animal , and how much does it weigh ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "weight",
          "{TABLE0}": "pets",
          "{SC0}": "DESC"
        },
        "query": "SELECT Pets.pet_age, Pets.weight FROM Pets ORDER BY Pets.weight Desc LIMIT 1"
      },
      {
        "question": "List top 3 highest Rating TV series . List the TV series 's Episode and Rating .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "list top 3 highest rating tv series . list the tv series 's episode and rating .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "rating",
          "{TABLE0}": "tv series",
          "{SC0}": "DESC"
        },
        "query": "SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating Desc LIMIT 1"
      },
      {
        "question": "What are the names and areas of countries with the top 5 largest area ?",
        "concise pattern": "ORDER BY LIMIT",
        "template": "what are the names and areas of countries with the top 5 largest area ?",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN1}": "population",
          "{COLUMN0}": "governmentform",
          "{TABLE0}": "country",
          "{SC0}": "DESC"
        },
        "query": "SELECT country.Name, country.GovernmentForm FROM country ORDER BY country.Population Desc LIMIT 1"
      },
      {
        "question": "Return the names and surface areas of the 5 largest countries .",
        "concise pattern": "ORDER BY LIMIT",
        "template": "return the names and surface areas of the 5 largest countries .",
        "name dict": {
          "{VALUE0}": "1",
          "{COLUMN0}": "surfacearea",
          "{TABLE0}": "country",
          "{SC0}": "DESC"
        },
        "query": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea Desc LIMIT 1"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} GROUP BY {COLUMN0} HAVING {AGG0} ( * ) {OP0} {VALUE0}",
    [
      {
        "question": "find the id , name and age for visitors who visited some museums more than once .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "find the {COLUMN3} , name and {COLUMN0} for {TABLE2} who {TABLE2} some {TABLE0} more than once .",
        "name dict": {
          "{TABLE0}": "museum",
          "{COLUMN1}": "museum_id",
          "{COLUMN0}": "age",
          "{COLUMN2}": "visitor_id",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "id",
          "{AGG0}": "COUNT",
          "{TABLE1}": "customer",
          "{TABLE2}": "visit"
        },
        "query": "SELECT museum.Museum_ID, museum.Name, visitor.Age FROM museum JOIN visitor JOIN visit ON museum.Museum_ID = visit.Museum_ID AND visit.visitor_ID = visitor.ID GROUP BY museum.Museum_ID HAVING Count(*) > 'terminal'"
      },
      {
        "question": "Which professionals have done at least two treatments ? List the professional 's id , role , and first name .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "which {TABLE0} have done at least two {TABLE1} ? list the {COLUMN1} 's id , role , and {COLUMN0} name .",
        "name dict": {
          "{COLUMN1}": "professional_id",
          "{COLUMN0}": "first_name",
          "{TABLE0}": "professionals",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makes ? List the id and the maker .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "which are the car {COLUMN0} which produce at least 2 models and more than 3 car makes ? list the {COLUMN1} and the {COLUMN0} .",
        "name dict": {
          "{COLUMN1}": "id",
          "{COLUMN0}": "maker",
          "{TABLE0}": "car makers",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "model list"
        },
        "query": "SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the {COLUMN1} and {COLUMN0} of all car {COLUMN0} that produce at least 2 models and make more than 3 cars ?",
        "name dict": {
          "{COLUMN1}": "id",
          "{COLUMN0}": "maker",
          "{TABLE0}": "car makers",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "model list"
        },
        "query": "SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the {COLUMN1} and {COLUMN0} of the {TABLE0} that led to more than 10 people killed in total .",
        "name dict": {
          "{TABLE0}": "battle",
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "lost_in_battle",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "ship"
        },
        "query": "SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle GROUP BY battle.id HAVING Count(*) > 'terminal'"
      },
      {
        "question": "What are the contestant numbers and names of the contestants who had at least two votes ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the {COLUMN0} numbers and names of the {TABLE0} who had at least two {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "contestant_number",
          "{COLUMN0}": "contestant_name",
          "{TABLE0}": "contestants",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "votes"
        },
        "query": "SELECT VOTES.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY VOTES.contestant_number HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Show the names of conductors that have conducted more than one orchestras .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "show the {COLUMN0} of {TABLE0} that have conducted more than one {COLUMN1} .",
        "name dict": {
          "{TABLE0}": "conductor",
          "{COLUMN1}": "orchestra",
          "{COLUMN0}": "name",
          "{COLUMN2}": "conductor_id",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY orchestra.Conductor_ID HAVING Count(*) > 'terminal'"
      },
      {
        "question": "What are the names of conductors who have conducted at more than one orchestra ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the {COLUMN0} of {TABLE0} who have conducted at more than one {COLUMN1} ?",
        "name dict": {
          "{TABLE0}": "conductor",
          "{COLUMN1}": "orchestra",
          "{COLUMN0}": "name",
          "{COLUMN2}": "conductor_id",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY orchestra.Conductor_ID HAVING Count(*) > 'terminal'"
      },
      {
        "question": "What are the id , role , and first name of the professionals who have performed two or more treatments ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the id , role , and {COLUMN0} name of the {TABLE0} who have performed two or more {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "professional_id",
          "{COLUMN0}": "first_name",
          "{TABLE0}": "professionals",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "find the id and {COLUMN0} phone of the {TABLE0} who operate two or more types of {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "professional_id",
          "{COLUMN0}": "cell_number",
          "{TABLE0}": "professionals",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Professionals.professional_id, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Show the names of singers that have more than one song .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "show the {COLUMN0} of {TABLE0} that have more than one {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "singer_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "singer",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "song"
        },
        "query": "SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY song.Singer_ID HAVING Count(*) > 'terminal'"
      },
      {
        "question": "What are the names of the singers that have more than one songs ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the {COLUMN0} of the {TABLE0} that have more than one {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "singer_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "singer",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "song"
        },
        "query": "SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY song.Singer_ID HAVING Count(*) > 'terminal'"
      },
      {
        "question": "What are the countries having at least one car maker ? List name and id .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the {COLUMN2} having at least one car maker ? list name and {COLUMN0} .",
        "name dict": {
          "{TABLE0}": "countries",
          "{COLUMN1}": "countryid",
          "{COLUMN0}": "id",
          "{COLUMN2}": "country",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "car makers"
        },
        "query": "SELECT countries.CountryName, car_makers.Id FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Id HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Which makers designed more than 3 car models ? List full name and the id .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "which {COLUMN1} designed more than 3 car models ? list full name and the {COLUMN0} .",
        "name dict": {
          "{COLUMN1}": "maker",
          "{COLUMN0}": "id",
          "{TABLE0}": "car makers",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "model list"
        },
        "query": "SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING Count(*) > 'terminal'"
      },
      {
        "question": "What are the names and ids of all makers with more than 3 models ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the names and {COLUMN0} of all {COLUMN1} with more than 3 models ?",
        "name dict": {
          "{COLUMN1}": "maker",
          "{COLUMN0}": "id",
          "{TABLE0}": "car makers",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "model list"
        },
        "query": "SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY model_list.Maker HAVING Count(*) > 'terminal'"
      },
      {
        "question": "Find all airlines that have at least 10 flights .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "find all {COLUMN0} that have at least 10 {TABLE1} .",
        "name dict": {
          "{COLUMN0}": "airline",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT airlines.Airline FROM airlines JOIN flights GROUP BY flights.Airline HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Which airlines have at least 10 flights ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "which {COLUMN0} have at least 10 {TABLE1} ?",
        "name dict": {
          "{COLUMN0}": "airline",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT airlines.Airline FROM airlines JOIN flights GROUP BY flights.Airline HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Find all airlines that have fewer than 200 flights .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "find all {COLUMN0} that have fewer than 200 {TABLE1} .",
        "name dict": {
          "{COLUMN0}": "airline",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT airlines.Airline FROM airlines JOIN flights GROUP BY flights.Airline HAVING Count(*) = 'terminal'"
      },
      {
        "question": "Which airlines have less than 200 flights ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "which {COLUMN0} have less than 200 {TABLE1} ?",
        "name dict": {
          "{COLUMN0}": "airline",
          "{TABLE0}": "airlines",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "flights"
        },
        "query": "SELECT airlines.Airline FROM airlines JOIN flights GROUP BY flights.Airline HAVING Count(*) = 'terminal'"
      },
      {
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5 .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "return the version numbers and {COLUMN0} type codes of {TABLE0} with a version number greater than 5 .",
        "name dict": {
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING Count(*) > 'terminal'"
      },
      {
        "question": "Show all template type codes with less than three templates .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "show all {COLUMN0} type codes with less than three {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates",
          "{VALUE1}": "0",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING Count(*) < 'terminal'"
      },
      {
        "question": "What are the codes of template types that have fewer than 3 templates ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the codes of {COLUMN0} types that have fewer than 3 {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "template_type_code",
          "{TABLE0}": "templates",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING Count(*) > 'terminal'"
      },
      {
        "question": "List all document ids with at least two paragraphs .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "list all {COLUMN0} ids with at least two {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "document_id",
          "{TABLE0}": "paragraphs",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "What is the document id with 1 to 2 paragraphs ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what is the {COLUMN0} id with 1 to 2 {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "document_id",
          "{TABLE0}": "paragraphs",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING Count(*) = 'terminal'"
      },
      {
        "question": "Show the hometowns shared by at least two teachers .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "show the {COLUMN0} shared by at least two {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "hometown",
          "{TABLE0}": "teacher",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Show names of teachers that teach at least two courses .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "show {COLUMN0} of {TABLE0} that teach at least two courses .",
        "name dict": {
          "{COLUMN1}": "teacher_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "teacher",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "course arrange"
        },
        "query": "SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY course_arrange.Teacher_ID HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "What are the names of the teachers who teach at least two courses ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the {COLUMN0} of the {TABLE0} who teach at least two courses ?",
        "name dict": {
          "{COLUMN1}": "teacher_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "teacher",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "course arrange"
        },
        "query": "SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Find the name of tourney that has more than 10 matches .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "find the name of {COLUMN0} that has more than 10 {TABLE0} .",
        "name dict": {
          "{COLUMN1}": "tourney_id",
          "{COLUMN0}": "tourney_name",
          "{TABLE0}": "matches",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT matches.tourney_name FROM matches GROUP BY matches.tourney_id HAVING Count(*) > 'terminal'"
      },
      {
        "question": "What are the names and id of courses having at most 2 sections ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the names and id of {TABLE0} having at most 2 {TABLE1} ?",
        "name dict": {
          "{COLUMN0}": "course_id",
          "{TABLE0}": "courses",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "sections"
        },
        "query": "SELECT Courses.course_name, Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "What are the names and ids of every course with less than 2 sections ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the names and ids of every {COLUMN0} with less than 2 {TABLE1} ?",
        "name dict": {
          "{COLUMN0}": "course_id",
          "{TABLE0}": "courses",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "sections"
        },
        "query": "SELECT Courses.course_name, Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING Count(*) = 'terminal'"
      },
      {
        "question": "Who are enrolled in 2 degree programs in one semester ? List the first name , middle name and last name and the id .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "who are enrolled in 2 {COLUMN1} programs in one {COLUMN0} ? list the first name , middle name and last name and the id .",
        "name dict": {
          "{TABLE0}": "degree programs",
          "{OP0}": "=",
          "{TABLE3}": "student enrolment",
          "{TABLE1}": "semesters",
          "{TABLE2}": "students",
          "{COLUMN1}": "degree_program_id",
          "{COLUMN0}": "semester_id",
          "{COLUMN2}": "student_id",
          "{VALUE1}": "0",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Students.first_name, Students.middle_name, Semesters.semester_id FROM Degree_Programs JOIN Semesters JOIN Students JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id AND Student_Enrolment.semester_id = Semesters.semester_id AND Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id AND Student_Enrolment.student_id = Students.student_id AND Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Semesters.semester_id HAVING Count(*) = 'terminal'"
      },
      {
        "question": "What are the nationalities that are shared by at least two people ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the {COLUMN0} that are shared by at least two {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "nationality",
          "{TABLE0}": "people",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT people.Nationality FROM people GROUP BY people.Nationality HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Return the nationalities for which there are two or more people .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "return the {COLUMN0} for which there are two or more {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "nationality",
          "{TABLE0}": "people",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT people.Nationality FROM people GROUP BY people.Nationality HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Which languages are spoken by only one country in republic governments ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "which {COLUMN0} are spoken by only one {TABLE0} in republic governments ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "code",
          "{COLUMN0}": "language",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.Language HAVING Count(*) = 'terminal'"
      },
      {
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "return the {TABLE0} name and the numbers of languages spoken for each {TABLE0} that speaks at least 3 languages .",
        "name dict": {
          "{COLUMN1}": "countrycode",
          "{COLUMN0}": "code",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG1}": "COUNT",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Show the years in which orchestras that have given more than one performance are founded .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "show the years in which {COLUMN1} that have given more than one {TABLE0} are founded .",
        "name dict": {
          "{TABLE0}": "performance",
          "{COLUMN1}": "orchestra",
          "{COLUMN0}": "year_of_founded",
          "{COLUMN2}": "orchestra_id",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT orchestra.Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY performance.Orchestra_ID HAVING Count(*) > 'terminal'"
      },
      {
        "question": "What are years of founding for orchestras that have had more than a single performance ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are years of founding for {COLUMN1} that have had more than a single {TABLE0} ?",
        "name dict": {
          "{TABLE0}": "performance",
          "{COLUMN1}": "orchestra",
          "{COLUMN0}": "year_of_founded",
          "{COLUMN2}": "orchestra_id",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT orchestra.Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY performance.Orchestra_ID HAVING Count(*) > 'terminal'"
      },
      {
        "question": "Show the names of high schoolers who have at least 3 friends .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "show the {COLUMN0} of high schoolers who have at least 3 {TABLE1} .",
        "name dict": {
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "student_id",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "What are the names of high schoolers who have 3 or more friends ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the {COLUMN0} of high schoolers who have 3 or more {TABLE1} ?",
        "name dict": {
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "student_id",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Friend.student_id HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Show the names of students who have at least 2 likes .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "show the {COLUMN0} of students who have at least 2 {TABLE1} .",
        "name dict": {
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "liked_id",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "student_id",
          "{AGG0}": "COUNT",
          "{TABLE1}": "likes"
        },
        "query": "SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Likes.student_id HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "What are the names of students who have 2 or more likes ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the {COLUMN0} of students who have 2 or more {TABLE1} ?",
        "name dict": {
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "liked_id",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "student_id",
          "{AGG0}": "COUNT",
          "{TABLE1}": "likes"
        },
        "query": "SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Likes.student_id HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Find the first name and gender of student who have more than one pet .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "find the first name and gender of {TABLE0} who have more than one pet .",
        "name dict": {
          "{COLUMN1}": "stuid",
          "{COLUMN0}": "sex",
          "{TABLE0}": "student",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "has pet"
        },
        "query": "SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Has_Pet.StuID HAVING Count(*) > 'terminal'"
      },
      {
        "question": "What is the first name and gender of the all the students who have more than one pet ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what is the first name and gender of the all the {TABLE0} who have more than one pet ?",
        "name dict": {
          "{COLUMN1}": "stuid",
          "{COLUMN0}": "sex",
          "{TABLE0}": "student",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "has pet"
        },
        "query": "SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Has_Pet.StuID HAVING Count(*) = 'terminal'"
      },
      {
        "question": "What are the names and ids of all countries with at least one car maker ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the names and ids of all {COLUMN1} with at least one car maker ?",
        "name dict": {
          "{COLUMN1}": "country",
          "{COLUMN0}": "countryid",
          "{TABLE0}": "countries",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "car makers"
        },
        "query": "SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "What are the names of all European countries with at least 3 manufacturers ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the names of all european {COLUMN2} with at least 3 manufacturers ?",
        "name dict": {
          "{TABLE0}": "countries",
          "{COLUMN1}": "countryid",
          "{COLUMN0}": "countryname",
          "{COLUMN2}": "country",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "car makers"
        },
        "query": "SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "How many countries has more than 2 car makers ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "how many {COLUMN0} has more than 2 car makers ?",
        "name dict": {
          "{COLUMN0}": "country",
          "{TABLE0}": "car makers",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG1}": "COUNT",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM car_makers GROUP BY car_makers.Country HAVING Count(*) > 'terminal'"
      },
      {
        "question": "What is the number of countries with more than 2 car makers ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what is the number of {COLUMN0} with more than 2 car makers ?",
        "name dict": {
          "{COLUMN0}": "country",
          "{TABLE0}": "car makers",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG1}": "COUNT",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM car_makers GROUP BY car_makers.Country HAVING Count(*) > 'terminal'"
      },
      {
        "question": "What are the name of the countries where there is not a single car maker ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the name of the {COLUMN2} where there is not a single car maker ?",
        "name dict": {
          "{TABLE0}": "countries",
          "{COLUMN1}": "countryid",
          "{COLUMN0}": "countryname",
          "{COLUMN2}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "car makers"
        },
        "query": "SELECT countries.CountryName FROM countries EXCEPT SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName HAVING Count(*) = 'terminal'"
      },
      {
        "question": "What are the template ids of any templates used in more than a single document ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the {COLUMN0} ids of any templates used in more than a single document ?",
        "name dict": {
          "{COLUMN0}": "template_id",
          "{TABLE0}": "documents",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING Count(*) > 'terminal'"
      },
      {
        "question": "What are the ids of documents that have 2 or more paragraphs ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the ids of documents that have 2 or more {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "document_id",
          "{TABLE0}": "paragraphs",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Give the ids of documents that have between one and two paragraphs .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "give the ids of {TABLE0} that have between one and two paragraphs .",
        "name dict": {
          "{COLUMN0}": "document_id",
          "{TABLE0}": "documents",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Documents.Document_ID FROM Documents GROUP BY Documents.Document_ID HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "What are the towns from which at least two teachers come from ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the towns from which at least two {TABLE0} come from ?",
        "name dict": {
          "{COLUMN0}": "hometown",
          "{TABLE0}": "teacher",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "What are the names of tournaments that have more than 10 matches ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the names of tournaments that have more than 10 {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "winner_name",
          "{TABLE0}": "matches",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT matches.winner_name FROM matches GROUP BY matches.winner_name HAVING Count(*) > 'terminal'"
      },
      {
        "question": "Find the codes of countries that have more than 50 players .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "find the codes of countries that have more than 50 {TABLE0} .",
        "name dict": {
          "{COLUMN0}": "country_code",
          "{TABLE0}": "players",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT players.country_code FROM players GROUP BY players.country_code HAVING Count(*) > 'terminal'"
      },
      {
        "question": "What are the codes of countries with more than 50 players ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the codes of countries with more than 50 {TABLE0} ?",
        "name dict": {
          "{COLUMN0}": "country_code",
          "{TABLE0}": "players",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT players.country_code FROM players GROUP BY players.country_code HAVING Count(*) > 'terminal'"
      },
      {
        "question": "What are the first , middle , and last names , along with the ids , of all students who enrolled in 2 degree programs in one semester ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the first , middle , and last names , along with the ids , of all {TABLE0} who enrolled in 2 degree programs in one semester ?",
        "name dict": {
          "{COLUMN1}": "student_id",
          "{COLUMN0}": "student_enrolment_id",
          "{TABLE0}": "students",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "student enrolment"
        },
        "query": "SELECT Students.first_name, Students.middle_name, Student_Enrolment.student_enrolment_id, Student_Enrolment.student_enrolment_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Student_Enrolment.student_enrolment_id HAVING Count(*) = 'terminal'"
      },
      {
        "question": "Show the date and id of the transcript with at least 2 course results .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "show the date and id of the {COLUMN0} with at least 2 course results .",
        "name dict": {
          "{COLUMN0}": "transcript_id",
          "{TABLE0}": "transcripts",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "transcript contents"
        },
        "query": "SELECT Transcripts.transcript_date, Transcripts.transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "What is the date and id of the transcript with at least 2 courses listed ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what is the date and id of the {COLUMN0} with at least 2 courses listed ?",
        "name dict": {
          "{OP0}": ">=",
          "{COLUMN3}": "student_course_id",
          "{TABLE1}": "student enrolment",
          "{TABLE2}": "student enrolment courses",
          "{TABLE3}": "transcripts",
          "{COLUMN0}": "transcript_id",
          "{TABLE0}": "students",
          "{VALUE1}": "0",
          "{TABLE4}": "transcript contents",
          "{COLUMN1}": "student_id",
          "{COLUMN2}": "student_enrolment_id",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Students.date_left, Transcripts.transcript_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id AND Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id AND Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Transcripts JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id AND Transcript_Contents.transcript_id = Transcripts.transcript_id AND Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id GROUP BY Transcripts.transcript_id HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "find id of the tv channels that from the countries where have more than two tv channels .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "find {COLUMN0} of the tv channels that from the countries where have more than two tv channels .",
        "name dict": {
          "{COLUMN0}": "id",
          "{TABLE0}": "tv channel",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING Count(*) > 'terminal'"
      },
      {
        "question": "What are the ids of all tv channels that have more than 2 TV channels ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the {COLUMN0} of all tv channels that have more than 2 tv channels ?",
        "name dict": {
          "{COLUMN0}": "id",
          "{TABLE0}": "tv channel",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING Count(*) > 'terminal'"
      },
      {
        "question": "What are the names of countries that speak more than 2 languages , as well as how many languages they speak ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the {COLUMN2} of countries that speak more than 2 languages , as well as how many languages they speak ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "countrycode",
          "{COLUMN0}": "code",
          "{COLUMN2}": "name",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG1}": "COUNT",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING Count(*) > 'terminal'"
      },
      {
        "question": "Find the number of cities in each district whose population is greater than the average population of cities ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "find the number of cities in each {COLUMN0} whose population is greater than the average population of cities ?",
        "name dict": {
          "{COLUMN0}": "district",
          "{TABLE0}": "city",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG1}": "COUNT",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*), city.District FROM city GROUP BY city.District HAVING Count(*) > 'terminal'"
      },
      {
        "question": "Show me all grades that have at least 4 students .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "show me all {COLUMN0} that have at least 4 students .",
        "name dict": {
          "{COLUMN0}": "grade",
          "{TABLE0}": "high schooler",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Which grades have 4 or more high schoolers ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "which {COLUMN0} have 4 or more high schoolers ?",
        "name dict": {
          "{COLUMN0}": "grade",
          "{TABLE0}": "high schooler",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Show ids for all templates that are used by more than one document .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "show ids for all templates that are used by more than one document .",
        "name dict": {
          "{COLUMN0}": "template_id",
          "{TABLE0}": "documents",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING Count(*) > 'terminal'"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} ORDER BY {COLUMN0} {SC0}",
    [
      {
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher 's name .",
        "concise pattern": "ORDER BY",
        "template": "show {COLUMN3} of {TABLE0} and the {COLUMN0} they are arranged to teach in ascending alphabetical order of the {COLUMN2} 's {COLUMN3} .",
        "name dict": {
          "{COLUMN0}": "course",
          "{COLUMN2}": "teacher_id",
          "{TABLE0}": "teacher",
          "{SC0}": "ASC",
          "{COLUMN1}": "course_id",
          "{COLUMN3}": "name",
          "{TABLE1}": "course arrange"
        },
        "query": "SELECT teacher.Name, course.Course FROM course JOIN teacher JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID AND course_arrange.Teacher_ID = teacher.Teacher_ID AND course.Course_ID = course_arrange.Course_ID ORDER BY teacher.Name Asc"
      },
      {
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher ?",
        "concise pattern": "ORDER BY",
        "template": "what are the {COLUMN3} of the {TABLE0} and the {COLUMN0} they teach in ascending alphabetical order by the {COLUMN3} of the {COLUMN2} ?",
        "name dict": {
          "{COLUMN0}": "course",
          "{COLUMN2}": "teacher_id",
          "{TABLE0}": "teacher",
          "{SC0}": "ASC",
          "{COLUMN1}": "course_id",
          "{COLUMN3}": "name",
          "{TABLE1}": "course arrange"
        },
        "query": "SELECT teacher.Name, course.Course FROM course JOIN teacher JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID AND course_arrange.Teacher_ID = teacher.Teacher_ID AND course.Course_ID = course_arrange.Course_ID ORDER BY teacher.Name Asc"
      },
      {
        "question": "Sort all the shops by number products in descending order , and return the name , location and district of each shop .",
        "concise pattern": "ORDER BY",
        "template": "sort all the {TABLE0} by {COLUMN1} products in descending order , and return the name , location and {COLUMN0} of each {TABLE0} .",
        "name dict": {
          "{COLUMN1}": "number_products",
          "{COLUMN0}": "district",
          "{TABLE0}": "shop",
          "{SC0}": "DESC"
        },
        "query": "SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products Desc"
      },
      {
        "question": "List the names and birth dates of people in ascending alphabetical order of name .",
        "concise pattern": "ORDER BY",
        "template": "list the {COLUMN1} and {COLUMN0} dates of {TABLE0} in ascending alphabetical order of {COLUMN1} .",
        "name dict": {
          "{COLUMN1}": "name",
          "{COLUMN0}": "birth_date",
          "{TABLE0}": "people",
          "{SC0}": "ASC"
        },
        "query": "SELECT people.Name, people.Birth_Date FROM people ORDER BY people.Name Asc"
      },
      {
        "question": "What are the names and birth dates of people , ordered by their names in alphabetical order ?",
        "concise pattern": "ORDER BY",
        "template": "what are the {COLUMN1} and {COLUMN0} dates of {TABLE0} , ordered by their {COLUMN1} in alphabetical order ?",
        "name dict": {
          "{COLUMN1}": "name",
          "{COLUMN0}": "birth_date",
          "{TABLE0}": "people",
          "{SC0}": "ASC"
        },
        "query": "SELECT people.Name, people.Birth_Date FROM people ORDER BY people.Name Asc"
      },
      {
        "question": "Show name , country , age for all singers ordered by age from the oldest to the youngest .",
        "concise pattern": "ORDER BY",
        "template": "show name , country , {COLUMN0} for all {TABLE0} ordered by {COLUMN0} from the oldest to the youngest .",
        "name dict": {
          "{COLUMN0}": "age",
          "{TABLE0}": "singer",
          "{SC0}": "DESC"
        },
        "query": "SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age Desc"
      },
      {
        "question": "What are the names , countries , and ages for every singer in descending order of age ?",
        "concise pattern": "ORDER BY",
        "template": "what are the names , countries , and {COLUMN0} for every {TABLE0} in descending order of {COLUMN0} ?",
        "name dict": {
          "{COLUMN0}": "age",
          "{TABLE0}": "singer",
          "{SC0}": "DESC"
        },
        "query": "SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age Desc"
      },
      {
        "question": "Sort employee names by their age in ascending order .",
        "concise pattern": "ORDER BY",
        "template": "sort {TABLE0} {COLUMN0} by their {COLUMN1} in ascending order .",
        "name dict": {
          "{COLUMN1}": "age",
          "{COLUMN0}": "name",
          "{TABLE0}": "employee",
          "{SC0}": "ASC"
        },
        "query": "SELECT employee.Name FROM employee ORDER BY employee.Age Asc"
      },
      {
        "question": "List the names of employees and sort in ascending order of age .",
        "concise pattern": "ORDER BY",
        "template": "list the {COLUMN0} of {TABLE0} and sort in ascending order of {COLUMN1} .",
        "name dict": {
          "{COLUMN1}": "age",
          "{COLUMN0}": "name",
          "{TABLE0}": "employee",
          "{SC0}": "ASC"
        },
        "query": "SELECT employee.Name FROM employee ORDER BY employee.Age Asc"
      },
      {
        "question": "Return the name , location and district of all shops in descending order of number of products .",
        "concise pattern": "ORDER BY",
        "template": "return the name , location and {COLUMN0} of all {TABLE0} in descending order of {COLUMN1} of products .",
        "name dict": {
          "{COLUMN1}": "number_products",
          "{COLUMN0}": "district",
          "{TABLE0}": "shop",
          "{SC0}": "DESC"
        },
        "query": "SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products Desc"
      },
      {
        "question": "List the names of teachers in ascending order of age .",
        "concise pattern": "ORDER BY",
        "template": "list the {COLUMN0} of {TABLE0} in ascending order of {COLUMN1} .",
        "name dict": {
          "{COLUMN1}": "age",
          "{COLUMN0}": "name",
          "{TABLE0}": "teacher",
          "{SC0}": "ASC"
        },
        "query": "SELECT teacher.Name FROM teacher ORDER BY teacher.Age Asc"
      },
      {
        "question": "What are the names of the teachers ordered by ascending age ?",
        "concise pattern": "ORDER BY",
        "template": "what are the {COLUMN0} of the {TABLE0} ordered by ascending {COLUMN1} ?",
        "name dict": {
          "{COLUMN1}": "age",
          "{COLUMN0}": "name",
          "{TABLE0}": "teacher",
          "{SC0}": "DESC"
        },
        "query": "SELECT teacher.Name FROM teacher ORDER BY teacher.Age Desc"
      },
      {
        "question": "List the first and last name of all players in the order of birth date .",
        "concise pattern": "ORDER BY",
        "template": "list the first and {COLUMN0} name of all {TABLE0} in the order of {COLUMN1} date .",
        "name dict": {
          "{COLUMN1}": "birth_date",
          "{COLUMN0}": "last_name",
          "{TABLE0}": "players",
          "{SC0}": "ASC"
        },
        "query": "SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date Asc"
      },
      {
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names .",
        "concise pattern": "ORDER BY",
        "template": "list the {COLUMN1} and {COLUMN0} ordered by in descending alphaetical order for the {COLUMN1} .",
        "name dict": {
          "{COLUMN1}": "name",
          "{COLUMN0}": "tonnage",
          "{TABLE0}": "ship",
          "{SC0}": "DESC"
        },
        "query": "SELECT ship.name, ship.tonnage FROM ship ORDER BY ship.name Desc"
      },
      {
        "question": "List the names of conductors in ascending order of age .",
        "concise pattern": "ORDER BY",
        "template": "list the {COLUMN0} of {TABLE0} in ascending order of {COLUMN1} .",
        "name dict": {
          "{COLUMN1}": "age",
          "{COLUMN0}": "name",
          "{TABLE0}": "conductor",
          "{SC0}": "ASC"
        },
        "query": "SELECT conductor.Name FROM conductor ORDER BY conductor.Age Asc"
      },
      {
        "question": "What are the names of conductors , ordered by age ?",
        "concise pattern": "ORDER BY",
        "template": "what are the {COLUMN0} of {TABLE0} , ordered by {COLUMN1} ?",
        "name dict": {
          "{COLUMN1}": "age",
          "{COLUMN0}": "name",
          "{TABLE0}": "conductor",
          "{SC0}": "ASC"
        },
        "query": "SELECT conductor.Name FROM conductor ORDER BY conductor.Age Asc"
      },
      {
        "question": "List the name of singers in ascending order of net worth .",
        "concise pattern": "ORDER BY",
        "template": "list the {COLUMN0} of {TABLE0} in ascending order of {COLUMN1} worth .",
        "name dict": {
          "{COLUMN1}": "net_worth_millions",
          "{COLUMN0}": "name",
          "{TABLE0}": "singer",
          "{SC0}": "DESC"
        },
        "query": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions Desc"
      },
      {
        "question": "What are the names of singers ordered by ascending net worth ?",
        "concise pattern": "ORDER BY",
        "template": "what are the {COLUMN0} of {TABLE0} ordered by ascending {COLUMN1} worth ?",
        "name dict": {
          "{COLUMN1}": "net_worth_millions",
          "{COLUMN0}": "name",
          "{TABLE0}": "singer",
          "{SC0}": "DESC"
        },
        "query": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions Desc"
      },
      {
        "question": "Return the lowest version number , along with its corresponding template type code .",
        "concise pattern": "ORDER BY",
        "template": "return the lowest {COLUMN0} number , along with its corresponding {COLUMN1} type code .",
        "name dict": {
          "{COLUMN1}": "template_type_code",
          "{COLUMN0}": "version_number",
          "{TABLE0}": "templates",
          "{SC0}": "ASC"
        },
        "query": "SELECT Templates.Version_Number FROM Templates ORDER BY Templates.Template_Type_Code Asc"
      },
      {
        "question": "What are the full names of all players , sorted by birth date ?",
        "concise pattern": "ORDER BY",
        "template": "what are the full names of all {TABLE0} , sorted by {COLUMN1} date ?",
        "name dict": {
          "{COLUMN1}": "birth_date",
          "{COLUMN0}": "last_name",
          "{TABLE0}": "players",
          "{SC0}": "ASC"
        },
        "query": "SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date Asc"
      },
      {
        "question": "What are the full names of all left handed players , in order of birth date ?",
        "concise pattern": "ORDER BY",
        "template": "what are the full names of all left handed {TABLE0} , in order of {COLUMN1} date ?",
        "name dict": {
          "{COLUMN1}": "birth_date",
          "{COLUMN0}": "last_name",
          "{TABLE0}": "players",
          "{SC0}": "ASC"
        },
        "query": "SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date Asc"
      },
      {
        "question": "List the title of all cartoons in alphabetical order .",
        "concise pattern": "ORDER BY",
        "template": "list the {COLUMN0} of all {TABLE0} in alphabetical order .",
        "name dict": {
          "{COLUMN0}": "title",
          "{TABLE0}": "cartoon",
          "{SC0}": "ASC"
        },
        "query": "SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title Asc"
      },
      {
        "question": "What are the titles of the cartoons sorted alphabetically ?",
        "concise pattern": "ORDER BY",
        "template": "what are the {COLUMN0} of the {TABLE0} sorted alphabetically ?",
        "name dict": {
          "{COLUMN0}": "title",
          "{TABLE0}": "cartoon",
          "{SC0}": "ASC"
        },
        "query": "SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title Asc"
      },
      {
        "question": "list all cartoon titles and their directors ordered by their air date",
        "concise pattern": "ORDER BY",
        "template": "list all {TABLE2} titles and their directors ordered by their {COLUMN3} date",
        "name dict": {
          "{COLUMN0}": "directed_by",
          "{COLUMN2}": "channel",
          "{TABLE0}": "tv channel",
          "{SC0}": "ASC",
          "{COLUMN1}": "id",
          "{COLUMN3}": "air_date",
          "{TABLE1}": "tv series",
          "{TABLE2}": "cartoon"
        },
        "query": "SELECT Cartoon.Title, Cartoon.Directed_by FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel ORDER BY TV_series.Air_Date Asc"
      },
      {
        "question": "What is the name and directors of all the cartoons that are ordered by air date ?",
        "concise pattern": "ORDER BY",
        "template": "what is the name and directors of all the {TABLE2} that are ordered by {COLUMN3} date ?",
        "name dict": {
          "{COLUMN0}": "written_by",
          "{COLUMN2}": "id",
          "{TABLE0}": "tv channel",
          "{SC0}": "DESC",
          "{COLUMN1}": "channel",
          "{COLUMN3}": "air_date",
          "{TABLE1}": "tv series",
          "{TABLE2}": "cartoon"
        },
        "query": "SELECT Cartoon.Title, Cartoon.Written_by FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON TV_Channel.id = Cartoon.Channel ORDER BY TV_series.Air_Date Desc"
      },
      {
        "question": "List the names of poker players ordered by the final tables made in ascending order .",
        "concise pattern": "ORDER BY",
        "template": "list the {COLUMN0} of poker players ordered by the {COLUMN2} tables made in ascending order .",
        "name dict": {
          "{COLUMN0}": "name",
          "{COLUMN2}": "final_table_made",
          "{TABLE0}": "poker player",
          "{SC0}": "DESC",
          "{COLUMN1}": "people_id",
          "{TABLE1}": "people"
        },
        "query": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made Desc"
      },
      {
        "question": "What are the names of poker players , ordered ascending by the number of final tables they have made ?",
        "concise pattern": "ORDER BY",
        "template": "what are the {COLUMN0} of poker players , ordered ascending by the number of {COLUMN2} tables they have made ?",
        "name dict": {
          "{COLUMN0}": "name",
          "{COLUMN2}": "final_table_made",
          "{TABLE0}": "poker player",
          "{SC0}": "ASC",
          "{COLUMN1}": "people_id",
          "{TABLE1}": "people"
        },
        "query": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made Asc"
      },
      {
        "question": "What are the names of poker players in descending order of earnings ?",
        "concise pattern": "ORDER BY",
        "template": "what are the {COLUMN0} of poker players in descending order of {COLUMN2} ?",
        "name dict": {
          "{COLUMN0}": "name",
          "{COLUMN2}": "earnings",
          "{TABLE0}": "poker player",
          "{SC0}": "DESC",
          "{COLUMN1}": "people_id",
          "{TABLE1}": "people"
        },
        "query": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings Desc"
      },
      {
        "question": "Return the names of poker players sorted by their earnings descending .",
        "concise pattern": "ORDER BY",
        "template": "return the {COLUMN0} of poker players sorted by their {COLUMN2} descending .",
        "name dict": {
          "{COLUMN0}": "name",
          "{COLUMN2}": "earnings",
          "{TABLE0}": "poker player",
          "{SC0}": "DESC",
          "{COLUMN1}": "people_id",
          "{TABLE1}": "people"
        },
        "query": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings Desc"
      },
      {
        "question": "List the contestant numbers and names , ordered by contestant name descending .",
        "concise pattern": "ORDER BY",
        "template": "list the {COLUMN0} numbers and names , ordered by {COLUMN0} name descending .",
        "name dict": {
          "{COLUMN0}": "contestant_name",
          "{TABLE0}": "contestants",
          "{SC0}": "DESC"
        },
        "query": "SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS ORDER BY CONTESTANTS.contestant_name Desc"
      },
      {
        "question": "What are the record companies of orchestras in descending order of years in which they were founded ?",
        "concise pattern": "ORDER BY",
        "template": "what are the {COLUMN0} companies of {COLUMN1} in descending order of years in which they were founded ?",
        "name dict": {
          "{COLUMN1}": "orchestra",
          "{COLUMN0}": "record_company",
          "{COLUMN2}": "year_of_founded",
          "{SC0}": "DESC"
        },
        "query": "SELECT orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded Desc"
      },
      {
        "question": "Return the record companies of orchestras , sorted descending by the years in which they were founded .",
        "concise pattern": "ORDER BY",
        "template": "return the {COLUMN0} companies of {COLUMN1} , sorted descending by the years in which they were founded .",
        "name dict": {
          "{COLUMN1}": "orchestra",
          "{COLUMN0}": "record_company",
          "{COLUMN2}": "year_of_founded",
          "{SC0}": "DESC"
        },
        "query": "SELECT orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded Desc"
      },
      {
        "question": "List names of conductors in descending order of years of work .",
        "concise pattern": "ORDER BY",
        "template": "list {COLUMN0} of {TABLE0} in descending order of years of work .",
        "name dict": {
          "{COLUMN1}": "year_of_work",
          "{COLUMN0}": "name",
          "{TABLE0}": "conductor",
          "{SC0}": "DESC"
        },
        "query": "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work Desc"
      },
      {
        "question": "Please show the record formats of orchestras in ascending order of count .",
        "concise pattern": "ORDER BY",
        "template": "please show the {COLUMN0} formats of {COLUMN1} in ascending order of count .",
        "name dict": {
          "{COLUMN1}": "orchestra",
          "{COLUMN0}": "record_company",
          "{SC0}": "ASC"
        },
        "query": "SELECT orchestra.Record_Company FROM orchestra ORDER BY orchestra.Record_Company Asc"
      },
      {
        "question": "What are the major record formats of orchestras , sorted by their frequency ?",
        "concise pattern": "ORDER BY",
        "template": "what are the {COLUMN0} record formats of {COLUMN1} , sorted by their frequency ?",
        "name dict": {
          "{COLUMN1}": "orchestra",
          "{COLUMN0}": "major_record_format",
          "{SC0}": "DESC"
        },
        "query": "SELECT orchestra.Major_Record_Format FROM orchestra ORDER BY orchestra.Major_Record_Format Desc"
      },
      {
        "question": "List the section_name in reversed lexicographical order .",
        "concise pattern": "ORDER BY",
        "template": "list the {COLUMN0} in reversed lexicographical order .",
        "name dict": {
          "{COLUMN0}": "section_name",
          "{TABLE0}": "sections",
          "{SC0}": "ASC"
        },
        "query": "SELECT Sections.section_name FROM Sections ORDER BY Sections.section_name Asc"
      },
      {
        "question": "What are the names of the sections in reverse alphabetical order ?",
        "concise pattern": "ORDER BY",
        "template": "what are the names of the {TABLE0} in reverse alphabetical order ?",
        "name dict": {
          "{COLUMN0}": "section_name",
          "{TABLE0}": "sections",
          "{SC0}": "ASC"
        },
        "query": "SELECT Sections.section_name FROM Sections ORDER BY Sections.section_name Asc"
      },
      {
        "question": "What other details can you tell me about students in reverse alphabetical order ?",
        "concise pattern": "ORDER BY",
        "template": "what {COLUMN0} details can you tell me about students in reverse alphabetical order ?",
        "name dict": {
          "{COLUMN0}": "other_details",
          "{TABLE0}": "student enrolment",
          "{SC0}": "ASC"
        },
        "query": "SELECT Student_Enrolment.other_details FROM Student_Enrolment ORDER BY Student_Enrolment.other_details Asc"
      },
      {
        "question": "List the Episode of all TV series sorted by rating .",
        "concise pattern": "ORDER BY",
        "template": "list the {COLUMN0} of all tv series sorted by rating .",
        "name dict": {
          "{COLUMN1}": "rating",
          "{COLUMN0}": "episode",
          "{TABLE0}": "tv series",
          "{SC0}": "DESC"
        },
        "query": "SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating Desc"
      },
      {
        "question": "What are all of the episodes ordered by ratings ?",
        "concise pattern": "ORDER BY",
        "template": "what are all of the {COLUMN0} ordered by ratings ?",
        "name dict": {
          "{COLUMN1}": "rating",
          "{COLUMN0}": "episode",
          "{TABLE0}": "tv series",
          "{SC0}": "DESC"
        },
        "query": "SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating Desc"
      },
      {
        "question": "List the earnings of poker players in descending order .",
        "concise pattern": "ORDER BY",
        "template": "list the {COLUMN0} of poker players in descending order .",
        "name dict": {
          "{COLUMN0}": "earnings",
          "{TABLE0}": "poker player",
          "{SC0}": "DESC"
        },
        "query": "SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings Desc"
      },
      {
        "question": "What are the earnings of poker players , ordered descending by value ?",
        "concise pattern": "ORDER BY",
        "template": "what are the {COLUMN0} of poker players , ordered descending by value ?",
        "name dict": {
          "{COLUMN0}": "earnings",
          "{TABLE0}": "poker player",
          "{SC0}": "DESC"
        },
        "query": "SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings Desc"
      },
      {
        "question": "List all the student details in reversed lexicographical order .",
        "concise pattern": "ORDER BY",
        "template": "list all the student details in reversed lexicographical order .",
        "name dict": {
          "{COLUMN0}": "last_name",
          "{TABLE0}": "students",
          "{SC0}": "ASC"
        },
        "query": "SELECT * FROM Students ORDER BY Students.last_name Asc"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} {VALUE0} OR {COLUMN1} {OP1} {VALUE1}",
    [
      {
        "question": "Show the name of teachers aged either 32 or 33 ?",
        "concise pattern": "WHERE OR",
        "template": "show the {COLUMN0} of {TABLE0} {COLUMN1} either 32 or 33 ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{TABLE0}": "teacher",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "age",
          "{VALUE3}": "0",
          "{OP1}": "="
        },
        "query": "SELECT teacher.Name FROM teacher WHERE teacher.Age = 'terminal' OR teacher.Age = 'terminal'"
      },
      {
        "question": "What are the names of the teachers who are aged either 32 or 33 ?",
        "concise pattern": "WHERE OR",
        "template": "what are the {COLUMN0} of the {TABLE0} who are {COLUMN1} either 32 or 33 ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{TABLE0}": "teacher",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "age",
          "{VALUE3}": "0",
          "{OP1}": "="
        },
        "query": "SELECT teacher.Name FROM teacher WHERE teacher.Age = 'terminal' OR teacher.Age = 'terminal'"
      },
      {
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "concise pattern": "WHERE OR",
        "template": "find the {COLUMN0} name of the {TABLE1} who permanently live in the country haiti or have the {COLUMN3} phone number 09700166582 .",
        "name dict": {
          "{TABLE0}": "addresses",
          "{OP0}": "=",
          "{COLUMN1}": "address_id",
          "{COLUMN3}": "cell_mobile_number",
          "{TABLE1}": "students",
          "{VALUE2}": "0",
          "{COLUMN0}": "first_name",
          "{COLUMN2}": "current_address_id",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id WHERE Students.cell_mobile_number = 'terminal' OR Students.cell_mobile_number = 'terminal'"
      },
      {
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "concise pattern": "WHERE OR",
        "template": "what are the {COLUMN0} names of the {TABLE0} who live in haiti permanently or have the {COLUMN2} phone number 09700166582 ?",
        "name dict": {
          "{TABLE0}": "students",
          "{VALUE2}": "0",
          "{COLUMN0}": "first_name",
          "{COLUMN2}": "cell_mobile_number",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "student_id",
          "{VALUE3}": "0",
          "{TABLE1}": "student enrolment",
          "{OP1}": "="
        },
        "query": "SELECT Students.first_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Students.cell_mobile_number = 'terminal' OR Students.cell_mobile_number = 'terminal'"
      },
      {
        "question": "List the title of all cartoon directed by `` Ben Jones '' or `` Brandon Vietti '' .",
        "concise pattern": "WHERE OR",
        "template": "list the {COLUMN0} of all {TABLE0} {COLUMN1} by `` ben jones '' or `` brandon vietti '' .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "title",
          "{TABLE0}": "cartoon",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "directed_by",
          "{VALUE3}": "0",
          "{OP1}": "="
        },
        "query": "SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'terminal' OR Cartoon.Directed_by = 'terminal'"
      },
      {
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti ?",
        "concise pattern": "WHERE OR",
        "template": "what are the {COLUMN0} of all {TABLE0} {COLUMN1} by ben jones or brandon vietti ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "title",
          "{TABLE0}": "cartoon",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "directed_by",
          "{VALUE3}": "0",
          "{OP1}": "="
        },
        "query": "SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'terminal' OR Cartoon.Directed_by = 'terminal'"
      },
      {
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin .",
        "concise pattern": "WHERE OR",
        "template": "list the emails of the {TABLE0} who live in the {COLUMN1} of hawaii or the {COLUMN1} of wisconsin .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "email_address",
          "{TABLE0}": "professionals",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "state",
          "{VALUE3}": "0",
          "{OP1}": "="
        },
        "query": "SELECT Professionals.email_address FROM Professionals WHERE Professionals.state = 'terminal' OR Professionals.state = 'terminal'"
      },
      {
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin ?",
        "concise pattern": "WHERE OR",
        "template": "what are the emails of the {TABLE0} living in either the {COLUMN1} of hawaii or the {COLUMN1} of wisconsin ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "email_address",
          "{TABLE0}": "professionals",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "state",
          "{VALUE3}": "0",
          "{OP1}": "="
        },
        "query": "SELECT Professionals.email_address FROM Professionals WHERE Professionals.state = 'terminal' OR Professionals.state = 'terminal'"
      },
      {
        "question": "Show the name of singers whose birth year is either 1948 or 1949 ?",
        "concise pattern": "WHERE OR",
        "template": "show the {COLUMN0} of {TABLE0} whose {COLUMN1} year is either 1948 or 1949 ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{TABLE0}": "singer",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "birth_year",
          "{VALUE3}": "0",
          "{OP1}": "="
        },
        "query": "SELECT singer.Name FROM singer WHERE singer.Birth_Year = 'terminal' OR singer.Birth_Year = 'terminal'"
      },
      {
        "question": "What are the names of the singers whose birth years are either 1948 or 1949 ?",
        "concise pattern": "WHERE OR",
        "template": "what are the {COLUMN0} of the {TABLE0} whose {COLUMN1} years are either 1948 or 1949 ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{TABLE0}": "singer",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "birth_year",
          "{VALUE3}": "0",
          "{OP1}": "="
        },
        "query": "SELECT singer.Name FROM singer WHERE singer.Birth_Year = 'terminal' OR singer.Birth_Year = 'terminal'"
      },
      {
        "question": "How many concerts are there in year 2014 or 2015 ?",
        "concise pattern": "WHERE OR",
        "template": "how many {TABLE0} are there in {COLUMN0} 2014 or 2015 ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "year",
          "{TABLE0}": "concert",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT",
          "{OP1}": "="
        },
        "query": "SELECT Count(*) FROM concert WHERE concert.Year = 'terminal' OR concert.Year = 'terminal'"
      },
      {
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500 ?",
        "concise pattern": "WHERE OR",
        "template": "which distinctive {COLUMN0} are produced by {COLUMN2} with the full name general motors or weighing more than 3500 ?",
        "name dict": {
          "{TABLE0}": "car makers",
          "{OP0}": "=",
          "{COLUMN1}": "id",
          "{COLUMN3}": "fullname",
          "{TABLE1}": "model list",
          "{VALUE2}": "0",
          "{COLUMN0}": "model",
          "{COLUMN2}": "maker",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'terminal' OR car_makers.FullName = 'terminal'"
      },
      {
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500 ?",
        "concise pattern": "WHERE OR",
        "template": "what are the different {COLUMN0} created by either the car {COLUMN2} general motors or weighed more than 3500 ?",
        "name dict": {
          "{TABLE0}": "car makers",
          "{OP0}": "=",
          "{COLUMN1}": "id",
          "{COLUMN3}": "fullname",
          "{TABLE1}": "model list",
          "{VALUE2}": "0",
          "{COLUMN0}": "model",
          "{COLUMN2}": "maker",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT DISTINCT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'terminal' OR car_makers.FullName = 'terminal'"
      },
      {
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "concise pattern": "WHERE OR",
        "template": "what is the maximum {COLUMN0} of the cars that had 8 {COLUMN1} or that were produced before 1980 ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "mpg",
          "{TABLE0}": "cars data",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "cylinders",
          "{VALUE3}": "0",
          "{AGG0}": "MAX",
          "{OP1}": "<"
        },
        "query": "SELECT Max(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 'terminal' OR cars_data.Cylinders < 'terminal'"
      },
      {
        "question": "What are the ids of templates with template type code PP or PPT ?",
        "concise pattern": "WHERE OR",
        "template": "what are the ids of {TABLE0} with {COLUMN0} type code pp or ppt ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "template_id",
          "{TABLE0}": "templates",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "template_type_code",
          "{VALUE3}": "0",
          "{OP1}": "="
        },
        "query": "SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'terminal' OR Templates.Template_Type_Code = 'terminal'"
      },
      {
        "question": "List the number of all matches who played in years of 2013 or 2016 .",
        "concise pattern": "WHERE OR",
        "template": "list the number of all {TABLE0} who played in {COLUMN0} of 2013 or 2016 .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "year",
          "{TABLE0}": "matches",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT",
          "{OP1}": "="
        },
        "query": "SELECT Count(*) FROM matches WHERE matches.year = 'terminal' OR matches.year = 'terminal'"
      },
      {
        "question": "What are the number of votes from state 'NY ' or 'CA ' ?",
        "concise pattern": "WHERE OR",
        "template": "what are the number of {TABLE0} from {COLUMN0} 'ny ' or 'ca ' ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "state",
          "{TABLE0}": "votes",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT",
          "{OP1}": "="
        },
        "query": "SELECT Count(*) FROM VOTES WHERE VOTES.state = 'terminal' OR VOTES.state = 'terminal'"
      },
      {
        "question": "How many concerts occurred in 2014 or 2015 ?",
        "concise pattern": "WHERE OR",
        "template": "how many {TABLE0} occurred in 2014 or 2015 ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "year",
          "{TABLE0}": "concert",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT",
          "{OP1}": "="
        },
        "query": "SELECT Count(*) FROM concert WHERE concert.Year = 'terminal' OR concert.Year = 'terminal'"
      },
      {
        "question": "Find the first name of students who have cat or dog pet .",
        "concise pattern": "WHERE OR",
        "template": "find the first name of {TABLE0} who have cat or dog pet .",
        "name dict": {
          "{TABLE0}": "student",
          "{OP0}": "=",
          "{COLUMN1}": "stuid",
          "{COLUMN3}": "pettype",
          "{TABLE1}": "has pet",
          "{TABLE2}": "pets",
          "{VALUE2}": "0",
          "{COLUMN0}": "fname",
          "{COLUMN2}": "petid",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID AND Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal' OR Pets.PetType = 'terminal'"
      },
      {
        "question": "What are the first names of every student who has a cat or dog as a pet ?",
        "concise pattern": "WHERE OR",
        "template": "what are the first names of every {TABLE0} who has a cat or dog as a pet ?",
        "name dict": {
          "{TABLE0}": "student",
          "{OP0}": "=",
          "{COLUMN1}": "stuid",
          "{COLUMN3}": "pettype",
          "{TABLE1}": "has pet",
          "{TABLE2}": "pets",
          "{VALUE2}": "0",
          "{COLUMN0}": "fname",
          "{COLUMN2}": "petid",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID AND Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal' OR Pets.PetType = 'terminal'"
      },
      {
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "concise pattern": "WHERE OR",
        "template": "what is the maximum miles per gallon of the car with 8 {COLUMN3} or produced before 1980 ?",
        "name dict": {
          "{TABLE0}": "car names",
          "{OP0}": "=",
          "{COLUMN1}": "makeid",
          "{COLUMN3}": "cylinders",
          "{TABLE1}": "cars data",
          "{VALUE2}": "0",
          "{COLUMN0}": "make",
          "{COLUMN2}": "id",
          "{VALUE1}": "'terminal'",
          "{OP1}": "<",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0",
          "{AGG0}": "MAX"
        },
        "query": "SELECT Max(car_names.Make) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 'terminal' OR cars_data.Cylinders < 'terminal'"
      },
      {
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene .",
        "concise pattern": "WHERE OR",
        "template": "find the number of {TABLE1} landing in the city of aberdeen or abilene .",
        "name dict": {
          "{OP0}": "=",
          "{COLUMN1}": "sourceairport",
          "{TABLE1}": "flights",
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "airportcode",
          "{TABLE0}": "airports",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE2}": "0",
          "{COLUMN2}": "city",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = 'terminal' OR airports.City = 'terminal'"
      },
      {
        "question": "How many flights land in Aberdeen or Abilene ?",
        "concise pattern": "WHERE OR",
        "template": "how many {TABLE1} land in aberdeen or abilene ?",
        "name dict": {
          "{OP0}": "=",
          "{COLUMN1}": "sourceairport",
          "{TABLE1}": "flights",
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "airportcode",
          "{TABLE0}": "airports",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE2}": "0",
          "{COLUMN2}": "city",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = 'terminal' OR airports.City = 'terminal'"
      },
      {
        "question": "Return the ids of templates that have the code PP or PPT .",
        "concise pattern": "WHERE OR",
        "template": "return the ids of {TABLE0} that have the code pp or ppt .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "template_id",
          "{TABLE0}": "templates",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "template_type_code",
          "{VALUE3}": "0",
          "{OP1}": "="
        },
        "query": "SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'terminal' OR Templates.Template_Type_Code = 'terminal'"
      },
      {
        "question": "How many museums were opened after 2013 or before 2008 ?",
        "concise pattern": "WHERE OR",
        "template": "how many {TABLE0} were opened after 2013 or before 2008 ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "open_year",
          "{TABLE0}": "museum",
          "{VALUE1}": "'terminal'",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT",
          "{OP1}": "<"
        },
        "query": "SELECT Count(*) FROM museum WHERE museum.Open_Year > 'terminal' OR museum.Open_Year < 'terminal'"
      },
      {
        "question": "How many matches were played in 2013 or 2016 ?",
        "concise pattern": "WHERE OR",
        "template": "how many {TABLE0} were played in 2013 or 2016 ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "year",
          "{TABLE0}": "matches",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT",
          "{OP1}": "="
        },
        "query": "SELECT Count(*) FROM matches WHERE matches.year = 'terminal' OR matches.year = 'terminal'"
      },
      {
        "question": "What is the total surface area of the continents Asia and Europe ?",
        "concise pattern": "WHERE OR",
        "template": "what is the total surface area of the {COLUMN1} asia and europe ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "surfacearea",
          "{TABLE0}": "country",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "continent",
          "{VALUE3}": "0",
          "{AGG0}": "SUM",
          "{OP1}": "="
        },
        "query": "SELECT Sum(country.SurfaceArea) FROM country WHERE country.Continent = 'terminal' OR country.Continent = 'terminal'"
      },
      {
        "question": "What are the regions that use English or Dutch ?",
        "concise pattern": "WHERE OR",
        "template": "what are the {COLUMN0} that use english or dutch ?",
        "name dict": {
          "{TABLE0}": "country",
          "{OP0}": "=",
          "{COLUMN1}": "code",
          "{COLUMN3}": "language",
          "{TABLE1}": "countrylanguage",
          "{VALUE2}": "0",
          "{COLUMN0}": "region",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' OR countrylanguage.Language = 'terminal'"
      },
      {
        "question": "Which regions speak Dutch or English ?",
        "concise pattern": "WHERE OR",
        "template": "which {COLUMN0} speak dutch or english ?",
        "name dict": {
          "{TABLE0}": "country",
          "{OP0}": "=",
          "{COLUMN1}": "code",
          "{COLUMN3}": "language",
          "{TABLE1}": "countrylanguage",
          "{VALUE2}": "0",
          "{COLUMN0}": "region",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' OR countrylanguage.Language = 'terminal'"
      },
      {
        "question": "What are the countries where either English or Dutch is the official language ?",
        "concise pattern": "WHERE OR",
        "template": "what are the countries where either english or dutch is the official {COLUMN3} ?",
        "name dict": {
          "{TABLE0}": "country",
          "{OP0}": "=",
          "{COLUMN1}": "code",
          "{COLUMN3}": "language",
          "{TABLE1}": "countrylanguage",
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' OR countrylanguage.Language = 'terminal'"
      },
      {
        "question": "Which countries have either English or Dutch as an official language ?",
        "concise pattern": "WHERE OR",
        "template": "which countries have either english or dutch as an official {COLUMN3} ?",
        "name dict": {
          "{TABLE0}": "country",
          "{OP0}": "=",
          "{COLUMN1}": "code",
          "{COLUMN3}": "language",
          "{TABLE1}": "countrylanguage",
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' OR countrylanguage.Language = 'terminal'"
      },
      {
        "question": "Find the number of orchestras whose record format is `` CD '' or `` DVD '' .",
        "concise pattern": "WHERE OR",
        "template": "find the number of {COLUMN0} whose record format is `` cd '' or `` dvd '' .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "orchestra",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "major_record_format",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT",
          "{OP1}": "="
        },
        "query": "SELECT Count(*) FROM orchestra WHERE orchestra.Major_Record_Format = 'terminal' OR orchestra.Major_Record_Format = 'terminal'"
      },
      {
        "question": "Count the number of orchestras that have CD or DVD as their record format .",
        "concise pattern": "WHERE OR",
        "template": "count the number of {COLUMN0} that have cd or dvd as their record format .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "orchestra",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "major_record_format",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT",
          "{OP1}": "="
        },
        "query": "SELECT Count(*) FROM orchestra WHERE orchestra.Major_Record_Format = 'terminal' OR orchestra.Major_Record_Format = 'terminal'"
      },
      {
        "question": "How many high schoolers are there in grade 9 or 10 ?",
        "concise pattern": "WHERE OR",
        "template": "how many high schoolers are there in {COLUMN0} 9 or 10 ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "grade",
          "{TABLE0}": "high schooler",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT",
          "{OP1}": "="
        },
        "query": "SELECT Count(*) FROM Highschooler WHERE Highschooler.grade = 'terminal' OR Highschooler.grade = 'terminal'"
      },
      {
        "question": "Count the number of high schoolers in grades 9 or 10 .",
        "concise pattern": "WHERE OR",
        "template": "count the number of high schoolers in {COLUMN0} 9 or 10 .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "grade",
          "{TABLE0}": "high schooler",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT",
          "{OP1}": "="
        },
        "query": "SELECT Count(*) FROM Highschooler WHERE Highschooler.grade = 'terminal' OR Highschooler.grade = 'terminal'"
      },
      {
        "question": "How many different winners both participated in the WTA Championships and were left handed ?",
        "concise pattern": "WHERE OR",
        "template": "how many different winners both participated in the wta championships and were left handed ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "tourney_name",
          "{TABLE0}": "matches",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "winner_age",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT",
          "{OP1}": "="
        },
        "query": "SELECT Count(*) FROM matches WHERE matches.tourney_name = 'terminal' OR matches.winner_age = 'terminal'"
      },
      {
        "question": "Give the total surface area covered by countries in Asia or Europe .",
        "concise pattern": "WHERE OR",
        "template": "give the total surface area covered by countries in asia or europe .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "surfacearea",
          "{TABLE0}": "country",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "region",
          "{VALUE3}": "0",
          "{AGG0}": "SUM",
          "{OP1}": "="
        },
        "query": "SELECT Sum(country.SurfaceArea) FROM country WHERE country.Region = 'terminal' OR country.Region = 'terminal'"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} {VALUE0} INTERSECT {SELECT1} {FROM} WHERE {COLUMN1} {OP1} {VALUE1}",
    [
      {
        "question": "List the name and date the battle that has lost the ship named 'Lettice ' and the ship named 'HMS Atalanta '",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "list the {COLUMN3} and {COLUMN0} the {TABLE0} that has {COLUMN2} the {TABLE1} {COLUMN3} 'lettice ' and the {TABLE1} {COLUMN3} 'hms atalanta '",
        "name dict": {
          "{TABLE0}": "battle",
          "{OP0}": "=",
          "{COLUMN1}": "id",
          "{COLUMN3}": "name",
          "{TABLE1}": "ship",
          "{VALUE2}": "0",
          "{COLUMN0}": "date",
          "{COLUMN2}": "lost_in_battle",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name = 'terminal' INTERSECT SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name = 'terminal'"
      },
      {
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011 ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what is the {COLUMN0} of the {TABLE1} who {TABLE1} both a {COLUMN1} opened before 2009 and a {COLUMN1} opened after 2011 ?",
        "name dict": {
          "{TABLE0}": "museum",
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{COLUMN2}": "open_year",
          "{VALUE1}": "'terminal'",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "museum_id",
          "{VALUE3}": "0",
          "{TABLE1}": "visit",
          "{OP1}": "<"
        },
        "query": "SELECT museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE museum.Open_Year > 'terminal' INTERSECT SELECT museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE museum.Open_Year < 'terminal'"
      },
      {
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what is the series name and country of all tv {COLUMN2} that are playing {TABLE1} {COLUMN3} by ben jones and {TABLE1} {COLUMN3} by michael chang ?",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{OP0}": "=",
          "{COLUMN1}": "id",
          "{COLUMN3}": "directed_by",
          "{TABLE1}": "cartoon",
          "{VALUE2}": "0",
          "{COLUMN0}": "country",
          "{COLUMN2}": "channel",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'terminal' INTERSECT SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'terminal'"
      },
      {
        "question": "Show countries where a singer above age 40 and a singer below 30 are from .",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "show {COLUMN0} where a {TABLE0} above {COLUMN1} 40 and a {TABLE0} below 30 are from .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "country",
          "{TABLE0}": "singer",
          "{VALUE1}": "'terminal'",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "age",
          "{VALUE3}": "0",
          "{OP1}": "<"
        },
        "query": "SELECT singer.Country FROM singer WHERE singer.Age > 'terminal' INTERSECT SELECT singer.Country FROM singer WHERE singer.Age < 'terminal'"
      },
      {
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015 .",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "find the name and {COLUMN0} of the {TABLE0} which some {TABLE1} happened in the {COLUMN2} of both 2014 and 2015 .",
        "name dict": {
          "{TABLE0}": "stadium",
          "{VALUE2}": "0",
          "{COLUMN0}": "location",
          "{COLUMN2}": "year",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "stadium_id",
          "{VALUE3}": "0",
          "{TABLE1}": "concert",
          "{OP1}": "="
        },
        "query": "SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 'terminal' INTERSECT SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 'terminal'"
      },
      {
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015 ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what are the names and {COLUMN0} of the {TABLE0} that had {TABLE1} that occurred in both 2014 and 2015 ?",
        "name dict": {
          "{TABLE0}": "stadium",
          "{VALUE2}": "0",
          "{COLUMN0}": "location",
          "{COLUMN2}": "lowest",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "stadium_id",
          "{VALUE3}": "0",
          "{TABLE1}": "concert",
          "{OP1}": "="
        },
        "query": "SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE stadium.Lowest = 'terminal' INTERSECT SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE stadium.Lowest = 'terminal'"
      },
      {
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products .",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "find the {COLUMN0} in which there are both {TABLE0} selling less than 3000 products and {TABLE0} selling more than 10000 products .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "district",
          "{TABLE0}": "shop",
          "{VALUE1}": "'terminal'",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "number_products",
          "{VALUE3}": "0",
          "{OP1}": "<"
        },
        "query": "SELECT shop.District FROM shop WHERE shop.Number_products > 'terminal' INTERSECT SELECT shop.District FROM shop WHERE shop.Number_products < 'terminal'"
      },
      {
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what are the country code and {COLUMN0} name of the {TABLE0} who won in both {COLUMN3} wta championships and australian open ?",
        "name dict": {
          "{TABLE0}": "players",
          "{OP0}": "=",
          "{COLUMN1}": "player_id",
          "{COLUMN3}": "tourney_name",
          "{TABLE1}": "matches",
          "{VALUE2}": "0",
          "{COLUMN0}": "first_name",
          "{COLUMN2}": "loser_id",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT players.country_code, players.first_name FROM players JOIN matches ON players.player_id = matches.loser_id WHERE matches.tourney_name = 'terminal' INTERSECT SELECT players.country_code, players.first_name FROM players JOIN matches ON players.player_id = matches.loser_id WHERE matches.tourney_name = 'terminal'"
      },
      {
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what are the {COLUMN0} that have {TABLE1} on tv that were {COLUMN3} by todd casey ?",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{OP0}": "=",
          "{COLUMN1}": "id",
          "{COLUMN3}": "written_by",
          "{TABLE1}": "cartoon",
          "{VALUE2}": "0",
          "{COLUMN0}": "country",
          "{COLUMN2}": "channel",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'terminal' INTERSECT SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'terminal'"
      },
      {
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "find the series name and country of the tv {COLUMN2} that is playing some {TABLE1} {COLUMN3} by ben jones and michael chang ?",
        "name dict": {
          "{TABLE0}": "tv channel",
          "{OP0}": "=",
          "{COLUMN1}": "id",
          "{COLUMN3}": "directed_by",
          "{TABLE1}": "cartoon",
          "{VALUE2}": "0",
          "{COLUMN0}": "country",
          "{COLUMN2}": "channel",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'terminal' INTERSECT SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'terminal'"
      },
      {
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling ' and the contestant 'Kelly Clauss ' .",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "list the {COLUMN0} codes in which voters voted both for the {COLUMN3} 'tabatha gehling ' and the {COLUMN3} 'kelly clauss ' .",
        "name dict": {
          "{TABLE0}": "area code state",
          "{OP0}": "=",
          "{COLUMN1}": "state",
          "{COLUMN3}": "contestant_name",
          "{TABLE1}": "contestants",
          "{TABLE2}": "votes",
          "{VALUE2}": "0",
          "{COLUMN0}": "area_code",
          "{COLUMN2}": "contestant_number",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE JOIN CONTESTANTS JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state AND VOTES.contestant_number = CONTESTANTS.contestant_number AND AREA_CODE_STATE.state = VOTES.state WHERE CONTESTANTS.contestant_name = 'terminal' INTERSECT SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE JOIN CONTESTANTS JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state AND VOTES.contestant_number = CONTESTANTS.contestant_number AND AREA_CODE_STATE.state = VOTES.state WHERE CONTESTANTS.contestant_name = 'terminal'"
      },
      {
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends .",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "show the {COLUMN0} of students who have a {COLUMN3} higher than 5 and have at least 2 {TABLE1} .",
        "name dict": {
          "{TABLE0}": "high schooler",
          "{OP0}": ">",
          "{COLUMN1}": "id",
          "{COLUMN3}": "grade",
          "{TABLE1}": "friend",
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{COLUMN2}": "student_id",
          "{VALUE1}": "'terminal'",
          "{OP1}": ">=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 'terminal' INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade >= 'terminal'"
      },
      {
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what are the {COLUMN0} of high schoolers who have a {COLUMN3} of over 5 and have 2 or more {TABLE1} ?",
        "name dict": {
          "{TABLE0}": "high schooler",
          "{OP0}": ">=",
          "{COLUMN1}": "id",
          "{COLUMN3}": "grade",
          "{TABLE1}": "friend",
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{COLUMN2}": "student_id",
          "{VALUE1}": "'terminal'",
          "{OP1}": ">=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade >= 'terminal' INTERSECT SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade >= 'terminal'"
      },
      {
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955 .",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "show the {COLUMN0} shared by {TABLE0} with {COLUMN1} year before 1945 and after 1955 .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "citizenship",
          "{TABLE0}": "singer",
          "{VALUE1}": "'terminal'",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "birth_year",
          "{VALUE3}": "0",
          "{OP1}": "<"
        },
        "query": "SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 'terminal' INTERSECT SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 'terminal'"
      },
      {
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955 ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what are the {COLUMN0} that are shared by {TABLE0} with a {COLUMN1} year before 1945 and after 1955 ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "citizenship",
          "{TABLE0}": "singer",
          "{VALUE1}": "'terminal'",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "birth_year",
          "{VALUE3}": "0",
          "{OP1}": "<"
        },
        "query": "SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 'terminal' INTERSECT SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 'terminal'"
      },
      {
        "question": "Find the name of students who have both cat and dog pets .",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "find the name of {TABLE0} who have both cat and dog {TABLE2} .",
        "name dict": {
          "{TABLE0}": "student",
          "{OP0}": "=",
          "{COLUMN1}": "stuid",
          "{COLUMN3}": "pettype",
          "{TABLE1}": "has pet",
          "{TABLE2}": "pets",
          "{VALUE2}": "0",
          "{COLUMN0}": "fname",
          "{COLUMN2}": "petid",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID AND Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal' INTERSECT SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID AND Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal'"
      },
      {
        "question": "What are the students ' first names who have both cats and dogs as pets ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what are the {TABLE0} ' first names who have both cats and dogs as {TABLE2} ?",
        "name dict": {
          "{TABLE0}": "student",
          "{OP0}": "=",
          "{COLUMN1}": "stuid",
          "{COLUMN3}": "pettype",
          "{TABLE1}": "has pet",
          "{TABLE2}": "pets",
          "{VALUE2}": "0",
          "{COLUMN0}": "fname",
          "{COLUMN2}": "petid",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal' INTERSECT SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID AND Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal'"
      },
      {
        "question": "Find all airlines that have flights from both airports 'APG ' and 'CVO ' .",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "find all {COLUMN0} that have {TABLE1} from both airports 'apg ' and 'cvo ' .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "airline",
          "{TABLE0}": "airlines",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "sourceairport",
          "{VALUE3}": "0",
          "{TABLE1}": "flights",
          "{OP1}": "="
        },
        "query": "SELECT airlines.Airline FROM airlines JOIN flights WHERE flights.SourceAirport = 'terminal' INTERSECT SELECT airlines.Airline FROM airlines JOIN flights WHERE flights.SourceAirport = 'terminal'"
      },
      {
        "question": "Which airlines have departing flights from both APG and CVO airports ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "which {COLUMN0} have departing {TABLE1} from both apg and cvo airports ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "airline",
          "{TABLE0}": "airlines",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "sourceairport",
          "{VALUE3}": "0",
          "{TABLE1}": "flights",
          "{OP1}": "="
        },
        "query": "SELECT airlines.Airline FROM airlines JOIN flights WHERE flights.SourceAirport = 'terminal' INTERSECT SELECT airlines.Airline FROM airlines JOIN flights WHERE flights.SourceAirport = 'terminal'"
      },
      {
        "question": "Show the document id with paragraph text 'Brazil ' and 'Ireland ' .",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "show the {COLUMN0} id with {COLUMN1} text 'brazil ' and 'ireland ' .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "document_id",
          "{TABLE0}": "documents",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "paragraph_text",
          "{VALUE3}": "0",
          "{TABLE1}": "paragraphs",
          "{OP1}": "="
        },
        "query": "SELECT Paragraphs.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text = 'terminal' INTERSECT SELECT Paragraphs.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text = 'terminal'"
      },
      {
        "question": "What are the ids of documents that contain the paragraph text 'Brazil ' and 'Ireland ' ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what are the ids of {TABLE0} that contain the {COLUMN1} text 'brazil ' and 'ireland ' ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "document_id",
          "{TABLE0}": "documents",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "paragraph_text",
          "{VALUE3}": "0",
          "{TABLE1}": "paragraphs",
          "{OP1}": "="
        },
        "query": "SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text = 'terminal' INTERSECT SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text = 'terminal'"
      },
      {
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what are the first names and {COLUMN0} codes for {TABLE0} who won both the wta championships and the australian open ?",
        "name dict": {
          "{TABLE0}": "players",
          "{OP0}": "=",
          "{COLUMN1}": "player_id",
          "{COLUMN3}": "tourney_name",
          "{TABLE1}": "matches",
          "{VALUE2}": "0",
          "{COLUMN0}": "country_code",
          "{COLUMN2}": "loser_id",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id WHERE matches.tourney_name = 'terminal' INTERSECT SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id WHERE matches.tourney_name = 'terminal'"
      },
      {
        "question": "Give the names of countries with English and French as official languages .",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "give the {COLUMN0} of countries with english and french as official {COLUMN3} .",
        "name dict": {
          "{TABLE0}": "country",
          "{OP0}": "=",
          "{COLUMN1}": "code",
          "{COLUMN3}": "language",
          "{TABLE1}": "countrylanguage",
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'"
      },
      {
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language .",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "return the {COLUMN0} of countries for which spanish is the predominantly spoken {COLUMN2} .",
        "name dict": {
          "{TABLE0}": "country",
          "{VALUE2}": "0",
          "{COLUMN0}": "code",
          "{COLUMN2}": "language",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "countrycode",
          "{VALUE3}": "0",
          "{TABLE1}": "countrylanguage",
          "{OP1}": "="
        },
        "query": "SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'"
      },
      {
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003 .",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "show the {COLUMN0} companies shared by {COLUMN1} founded before 2003 and after 2003 .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "record_company",
          "{COLUMN2}": "year_of_founded",
          "{VALUE1}": "'terminal'",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "orchestra",
          "{VALUE3}": "0",
          "{OP1}": "<"
        },
        "query": "SELECT orchestra.Record_Company FROM orchestra WHERE orchestra.Year_of_Founded < 'terminal' INTERSECT SELECT orchestra.Record_Company FROM orchestra WHERE orchestra.Year_of_Founded < 'terminal'"
      },
      {
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003 ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what are the {COLUMN0} companies that are used by both {COLUMN1} founded before 2003 and those founded after 2003 ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "record_company",
          "{COLUMN2}": "year_of_founded",
          "{VALUE1}": "'terminal'",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "orchestra",
          "{VALUE3}": "0",
          "{OP1}": "<"
        },
        "query": "SELECT orchestra.Record_Company FROM orchestra WHERE orchestra.Year_of_Founded < 'terminal' INTERSECT SELECT orchestra.Record_Company FROM orchestra WHERE orchestra.Year_of_Founded < 'terminal'"
      },
      {
        "question": "Find the last name of the student who has a cat that is age 3 .",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "find the last name of the {TABLE0} who has a cat that is age 3 .",
        "name dict": {
          "{TABLE0}": "student",
          "{OP0}": "=",
          "{COLUMN1}": "stuid",
          "{COLUMN3}": "pettype",
          "{TABLE1}": "has pet",
          "{TABLE2}": "pets",
          "{VALUE2}": "0",
          "{COLUMN0}": "lname",
          "{COLUMN2}": "petid",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal' INTERSECT SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID AND Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal'"
      },
      {
        "question": "What is the last name of the student who has a cat that is 3 years old ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what is the last name of the {TABLE0} who has a cat that is 3 years old ?",
        "name dict": {
          "{TABLE0}": "student",
          "{OP0}": "=",
          "{COLUMN1}": "stuid",
          "{COLUMN3}": "pettype",
          "{TABLE1}": "has pet",
          "{TABLE2}": "pets",
          "{VALUE2}": "0",
          "{COLUMN0}": "lname",
          "{COLUMN2}": "petid",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal' INTERSECT SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID AND Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal'"
      },
      {
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what are the different {COLUMN0} in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "year",
          "{TABLE0}": "cars data",
          "{VALUE1}": "'terminal'",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "accelerate",
          "{VALUE3}": "0",
          "{OP1}": "<"
        },
        "query": "SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Accelerate > 'terminal' INTERSECT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Accelerate < 'terminal'"
      },
      {
        "question": "What are the names of players who won in both 2013 and 2016 ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what are the names of {TABLE0} who won in both 2013 and 2016 ?",
        "name dict": {
          "{TABLE0}": "players",
          "{OP0}": "=",
          "{COLUMN1}": "player_id",
          "{COLUMN3}": "birth_date",
          "{TABLE1}": "matches",
          "{VALUE2}": "0",
          "{COLUMN0}": "first_name",
          "{COLUMN2}": "loser_id",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT players.first_name FROM players JOIN matches ON players.player_id = matches.loser_id WHERE players.birth_date = 'terminal' INTERSECT SELECT players.first_name FROM players WHERE players.birth_date = 'terminal'"
      },
      {
        "question": "Find the semester when both Master students and Bachelor students got enrolled in .",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "find the {COLUMN2} when both master students and bachelor students got enrolled in .",
        "name dict": {
          "{TABLE0}": "degree programs",
          "{OP0}": "=",
          "{COLUMN1}": "degree_program_id",
          "{COLUMN3}": "degree_summary_name",
          "{TABLE1}": "semesters",
          "{TABLE2}": "student enrolment",
          "{VALUE2}": "0",
          "{COLUMN0}": "semester_name",
          "{COLUMN2}": "semester_id",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT Semesters.semester_name FROM Degree_Programs JOIN Semesters JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id AND Student_Enrolment.semester_id = Semesters.semester_id AND Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id WHERE Degree_Programs.degree_summary_name = 'terminal' INTERSECT SELECT Semesters.semester_name FROM Degree_Programs JOIN Semesters JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id AND Student_Enrolment.semester_id = Semesters.semester_id AND Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id WHERE Degree_Programs.degree_summary_name = 'terminal'"
      },
      {
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what is the id of the {COLUMN0} that had both masters and bachelors students enrolled ?",
        "name dict": {
          "{OP0}": "=",
          "{COLUMN1}": "degree_program_id",
          "{TABLE1}": "semesters",
          "{TABLE2}": "student enrolment",
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "semester_id",
          "{TABLE0}": "degree programs",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE2}": "0",
          "{COLUMN2}": "degree_summary_name",
          "{VALUE3}": "0"
        },
        "query": "SELECT Student_Enrolment.semester_id FROM Degree_Programs JOIN Semesters JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id AND Student_Enrolment.semester_id = Semesters.semester_id AND Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id WHERE Degree_Programs.degree_summary_name = 'terminal' INTERSECT SELECT Student_Enrolment.semester_id FROM Degree_Programs JOIN Semesters JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id AND Student_Enrolment.semester_id = Semesters.semester_id AND Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id WHERE Degree_Programs.degree_summary_name = 'terminal'"
      },
      {
        "question": "What are the names of nations speak both English and French ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what are the {COLUMN0} of nations speak both english and french ?",
        "name dict": {
          "{TABLE0}": "country",
          "{OP0}": "=",
          "{COLUMN1}": "code",
          "{COLUMN3}": "language",
          "{TABLE1}": "countrylanguage",
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'"
      },
      {
        "question": "Give the names of nations that speak both English and French .",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "give the {COLUMN0} of nations that speak both english and french .",
        "name dict": {
          "{TABLE0}": "country",
          "{OP0}": "=",
          "{COLUMN1}": "code",
          "{COLUMN3}": "language",
          "{TABLE1}": "countrylanguage",
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'"
      },
      {
        "question": "What are the names of nations where both English and French are official languages ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what are the names of nations where both english and french are official {COLUMN3} ?",
        "name dict": {
          "{TABLE0}": "country",
          "{OP0}": "=",
          "{COLUMN1}": "code",
          "{COLUMN3}": "language",
          "{TABLE1}": "countrylanguage",
          "{VALUE2}": "0",
          "{COLUMN0}": "localname",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT country.LocalName FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT country.LocalName FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal'"
      },
      {
        "question": "How many countries speak both English and Dutch ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "how many countries speak both english and dutch ?",
        "name dict": {
          "{OP0}": "=",
          "{COLUMN1}": "countrycode",
          "{TABLE1}": "countrylanguage",
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "code",
          "{TABLE0}": "country",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE2}": "0",
          "{COLUMN2}": "language",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'terminal'"
      },
      {
        "question": "What is the number of nations that use English and Dutch ?",
        "concise pattern": "WHERE INTERSECT WHERE",
        "template": "what is the number of nations that use english and dutch ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "language",
          "{TABLE0}": "countrylanguage",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "percentage",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT",
          "{OP1}": "="
        },
        "query": "SELECT Count(*) FROM countrylanguage WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT countrylanguage.Percentage FROM countrylanguage WHERE countrylanguage.Language = 'terminal'"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} NOT IN ( {SELECT1} {FROM} )",
    [
      {
        "question": "Show the stadium names without any concert .",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "show the {COLUMN1} {COLUMN0} without any {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "stadium_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "stadium",
          "{TABLE1}": "concert"
        },
        "query": "SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert)"
      },
      {
        "question": "What are the names of the stadiums without any concerts ?",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "what are the {COLUMN0} of the {TABLE0} without any {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "stadium_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "stadium",
          "{TABLE1}": "concert"
        },
        "query": "SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert)"
      },
      {
        "question": "Find the names of employees who never won any award in the evaluation .",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "find the {COLUMN0} of {TABLE0} who never won any award in the {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "employee_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "employee",
          "{TABLE1}": "evaluation"
        },
        "query": "SELECT employee.Name FROM employee WHERE employee.Employee_ID NOT IN (SELECT evaluation.Employee_ID FROM evaluation)"
      },
      {
        "question": "What are the names of the employees who never received any evaluation ?",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "what are the {COLUMN0} of the {TABLE0} who never received any {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "employee_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "employee",
          "{TABLE1}": "evaluation"
        },
        "query": "SELECT employee.Name FROM employee WHERE employee.Employee_ID NOT IN (SELECT evaluation.Employee_ID FROM evaluation)"
      },
      {
        "question": "Which shops run with no employees ? Find the shop names",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "which {TABLE0} run with no employees ? find the {COLUMN1} {COLUMN0}",
        "name dict": {
          "{COLUMN1}": "shop_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "shop",
          "{TABLE1}": "hiring"
        },
        "query": "SELECT shop.Name FROM shop WHERE shop.Shop_ID NOT IN (SELECT hiring.Shop_ID FROM hiring)"
      },
      {
        "question": "What is the name of the museum that had no visitor yet ?",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "what is the {COLUMN0} of the {COLUMN1} that had no {TABLE1} yet ?",
        "name dict": {
          "{COLUMN1}": "museum_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "museum",
          "{TABLE1}": "visit"
        },
        "query": "SELECT museum.Name FROM museum WHERE museum.Museum_ID NOT IN (SELECT visit.Museum_ID FROM visit)"
      },
      {
        "question": "List the name of singers that do not have any song .",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "list the {COLUMN0} of {TABLE0} that do not have any {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "singer_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "singer",
          "{TABLE1}": "song"
        },
        "query": "SELECT singer.Name FROM singer WHERE singer.Singer_ID NOT IN (SELECT song.Singer_ID FROM song)"
      },
      {
        "question": "Find the average age of students who do not have any pet .",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "find the average {COLUMN0} of {TABLE0} who do not have any pet .",
        "name dict": {
          "{COLUMN1}": "stuid",
          "{COLUMN0}": "age",
          "{TABLE0}": "student",
          "{AGG0}": "AVG",
          "{TABLE1}": "has pet"
        },
        "query": "SELECT Avg(Student.Age) FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet)"
      },
      {
        "question": "What is the average age for all students who do not own any pets ?",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "what is the average {COLUMN0} for all {TABLE0} who do not own any pets ?",
        "name dict": {
          "{COLUMN1}": "stuid",
          "{COLUMN0}": "age",
          "{TABLE0}": "student",
          "{AGG0}": "AVG",
          "{TABLE1}": "has pet"
        },
        "query": "SELECT Avg(Student.Age) FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet)"
      },
      {
        "question": "Find the name of the shops that do not hire any employee .",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "find the {COLUMN0} of the {TABLE0} that do not hire any employee .",
        "name dict": {
          "{COLUMN1}": "shop_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "shop",
          "{TABLE1}": "hiring"
        },
        "query": "SELECT shop.Name FROM shop WHERE shop.Shop_ID NOT IN (SELECT hiring.Shop_ID FROM hiring)"
      },
      {
        "question": "List the names of teachers who have not been arranged to teach courses .",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "list the {COLUMN0} of {TABLE0} who have not been arranged to teach courses .",
        "name dict": {
          "{COLUMN1}": "teacher_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "teacher",
          "{TABLE1}": "course arrange"
        },
        "query": "SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT course_arrange.Teacher_ID FROM course_arrange)"
      },
      {
        "question": "What are the names of the teachers whose courses have not been arranged ?",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "what are the {COLUMN0} of the {TABLE0} whose courses have not been arranged ?",
        "name dict": {
          "{COLUMN1}": "teacher_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "teacher",
          "{TABLE1}": "course arrange"
        },
        "query": "SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT course_arrange.Teacher_ID FROM course_arrange)"
      },
      {
        "question": "List the names of people that are not poker players .",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "list the {COLUMN0} of {COLUMN1} that are not poker players .",
        "name dict": {
          "{COLUMN1}": "people_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "people",
          "{TABLE1}": "poker player"
        },
        "query": "SELECT people.Name FROM people WHERE people.People_ID NOT IN (SELECT poker_player.People_ID FROM poker_player)"
      },
      {
        "question": "What are the names of people who do not play poker ?",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "what are the {COLUMN0} of {COLUMN1} who do not play poker ?",
        "name dict": {
          "{COLUMN1}": "people_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "people",
          "{TABLE1}": "poker player"
        },
        "query": "SELECT people.Name FROM people WHERE people.People_ID NOT IN (SELECT poker_player.People_ID FROM poker_player)"
      },
      {
        "question": "List the names of orchestras that have no performance .",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "list the names of {COLUMN0} that have no {TABLE0} .",
        "name dict": {
          "{COLUMN1}": "orchestra_id",
          "{COLUMN0}": "orchestra",
          "{TABLE0}": "performance"
        },
        "query": "SELECT orchestra.Orchestra FROM orchestra WHERE orchestra.Orchestra_ID NOT IN (SELECT performance.Orchestra_ID FROM performance)"
      },
      {
        "question": "What are the orchestras that do not have any performances ?",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "what are the {COLUMN0} that do not have any {TABLE0} ?",
        "name dict": {
          "{COLUMN1}": "orchestra_id",
          "{COLUMN0}": "orchestra",
          "{TABLE0}": "performance"
        },
        "query": "SELECT orchestra.Orchestra FROM orchestra WHERE orchestra.Orchestra_ID NOT IN (SELECT performance.Orchestra_ID FROM performance)"
      },
      {
        "question": "Show names of all high school students who do not have any friends .",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "show {COLUMN0} of all high school students who do not have any {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "student_id",
          "{TABLE0}": "high schooler",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)"
      },
      {
        "question": "What are the names of students who have no friends ?",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "what are the {COLUMN0} of students who have no {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "student_id",
          "{TABLE0}": "high schooler",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)"
      },
      {
        "question": "Find the minimum grade of students who have no friends .",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "find the minimum {COLUMN0} of students who have no {TABLE1} .",
        "name dict": {
          "{COLUMN0}": "grade",
          "{COLUMN2}": "student_id",
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "id",
          "{AGG0}": "MIN",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Min(Highschooler.grade) FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)"
      },
      {
        "question": "What is the lowest grade of students who do not have any friends ?",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "what is the lowest {COLUMN0} of students who do not have any {TABLE1} ?",
        "name dict": {
          "{COLUMN0}": "grade",
          "{COLUMN2}": "student_id",
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "id",
          "{AGG0}": "MIN",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Min(Highschooler.grade) FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)"
      },
      {
        "question": "How many owners temporarily do not have any dogs ?",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "how many {TABLE0} temporarily do not have any {TABLE1} ?",
        "name dict": {
          "{COLUMN0}": "owner_id",
          "{TABLE0}": "owners",
          "{AGG0}": "COUNT",
          "{TABLE1}": "dogs"
        },
        "query": "SELECT Count(*) FROM Owners WHERE Owners.owner_id NOT IN (SELECT Dogs.owner_id FROM Dogs)"
      },
      {
        "question": "Find the number of owners who do not own any dogs at this moment .",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "find the number of {TABLE0} who do not own any {TABLE1} at this moment .",
        "name dict": {
          "{COLUMN0}": "owner_id",
          "{TABLE0}": "owners",
          "{AGG0}": "COUNT",
          "{TABLE1}": "dogs"
        },
        "query": "SELECT Count(*) FROM Owners WHERE Owners.owner_id NOT IN (SELECT Dogs.owner_id FROM Dogs)"
      },
      {
        "question": "What are the names of the singers who are not French citizens ?",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "what are the {COLUMN0} of the {TABLE0} who are not french citizens ?",
        "name dict": {
          "{COLUMN1}": "singer_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "singer",
          "{TABLE1}": "song"
        },
        "query": "SELECT singer.Name FROM singer WHERE singer.Singer_ID NOT IN (SELECT song.Singer_ID FROM song)"
      },
      {
        "question": "What are the names of the countries with no car makers ?",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "what are the names of the {COLUMN2} with no car makers ?",
        "name dict": {
          "{COLUMN1}": "countryid",
          "{COLUMN0}": "countryname",
          "{COLUMN2}": "country",
          "{TABLE0}": "countries",
          "{TABLE1}": "car makers"
        },
        "query": "SELECT countries.CountryName FROM countries WHERE countries.CountryId NOT IN (SELECT car_makers.Country FROM car_makers)"
      },
      {
        "question": "How many contestants did not get voted ?",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "how many {TABLE0} did not get voted ?",
        "name dict": {
          "{COLUMN0}": "contestant_number",
          "{TABLE0}": "contestants",
          "{AGG0}": "COUNT",
          "{TABLE1}": "votes"
        },
        "query": "SELECT Count(*) FROM CONTESTANTS WHERE CONTESTANTS.contestant_number NOT IN (SELECT VOTES.contestant_number FROM VOTES)"
      },
      {
        "question": "How many dogs have not gone through any treatment ?",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "how many {TABLE0} have not gone through any treatment ?",
        "name dict": {
          "{COLUMN0}": "dog_id",
          "{TABLE0}": "dogs",
          "{AGG0}": "COUNT",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Count(*) FROM Dogs WHERE Dogs.dog_id NOT IN (SELECT Treatments.dog_id FROM Treatments)"
      },
      {
        "question": "Tell me the number of dogs that have received any treatment .",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "tell me the number of {TABLE0} that have received any treatment .",
        "name dict": {
          "{COLUMN0}": "dog_id",
          "{TABLE0}": "dogs",
          "{AGG0}": "COUNT",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Count(*) FROM Dogs WHERE Dogs.dog_id NOT IN (SELECT Treatments.dog_id FROM Treatments)"
      },
      {
        "question": "How many professionals did not operate any treatment on dogs ?",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "how many {TABLE0} did not operate any treatment on dogs ?",
        "name dict": {
          "{COLUMN0}": "professional_id",
          "{TABLE0}": "professionals",
          "{AGG0}": "COUNT",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Count(*) FROM Professionals WHERE Professionals.professional_id NOT IN (SELECT Treatments.professional_id FROM Treatments)"
      },
      {
        "question": "Find the number of professionals who have not treated any dogs .",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "find the number of {TABLE0} who have not treated any dogs .",
        "name dict": {
          "{COLUMN0}": "professional_id",
          "{TABLE0}": "professionals",
          "{AGG0}": "COUNT",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Count(*) FROM Professionals WHERE Professionals.professional_id NOT IN (SELECT Treatments.professional_id FROM Treatments)"
      },
      {
        "question": "What is the sname of every sing that does not have any song ?",
        "concise pattern": "WHERE NOT IN ( )",
        "template": "what is the sname of every sing that does not have any {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "singer_id",
          "{COLUMN0}": "name",
          "{TABLE0}": "singer",
          "{TABLE1}": "song"
        },
        "query": "SELECT singer.Name FROM singer WHERE singer.Singer_ID NOT IN (SELECT song.Singer_ID FROM song)"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} {VALUE0} AND {COLUMN1} {OP1} {VALUE1}",
    [
      {
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan ' and latin commander 'Baldwin I ' ?",
        "concise pattern": "WHERE",
        "template": "what are the distinct {TABLE0} {COLUMN0} which are between {COLUMN1} commander 'kaloyan ' and {COLUMN2} commander 'baldwin i ' ?",
        "name dict": {
          "{TABLE0}": "battle",
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{COLUMN2}": "latin_commander",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "bulgarian_commander",
          "{VALUE3}": "0",
          "{OP1}": "="
        },
        "query": "SELECT DISTINCT battle.name FROM battle WHERE battle.bulgarian_commander = 'terminal' AND battle.latin_commander = 'terminal'"
      },
      {
        "question": "Find the number of dog pets that are raised by female students ( with sex F ) .",
        "concise pattern": "WHERE",
        "template": "find the number of dog {TABLE2} that are raised by female {TABLE0} ( with {COLUMN2} f ) .",
        "name dict": {
          "{TABLE0}": "student",
          "{OP0}": "=",
          "{COLUMN1}": "petid",
          "{COLUMN3}": "pettype",
          "{TABLE1}": "has pet",
          "{TABLE2}": "pets",
          "{VALUE2}": "0",
          "{COLUMN0}": "stuid",
          "{COLUMN2}": "sex",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID AND Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'terminal' AND Pets.PetType = 'terminal'"
      },
      {
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000 ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} of the countries that are in the {COLUMN1} of europe and have a {COLUMN2} of 80000 ?",
        "name dict": {
          "{TABLE0}": "country",
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{COLUMN2}": "population",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "continent",
          "{VALUE3}": "0",
          "{OP1}": ">"
        },
        "query": "SELECT country.Name FROM country WHERE country.Continent = 'terminal' AND country.Population > 'terminal'"
      },
      {
        "question": "For a volvo model , how many cylinders does the version with least accelerate have ?",
        "concise pattern": "WHERE",
        "template": "for a volvo model , how many {COLUMN0} does the version with least {COLUMN4} have ?",
        "name dict": {
          "{TABLE0}": "car names",
          "{OP0}": "=",
          "{COLUMN1}": "makeid",
          "{COLUMN3}": "make",
          "{TABLE1}": "cars data",
          "{VALUE2}": "0",
          "{COLUMN0}": "cylinders",
          "{COLUMN2}": "id",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{COLUMN4}": "accelerate",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(cars_data.Cylinders) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_names.Make = 'terminal' AND cars_data.Accelerate = 'terminal'"
      },
      {
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward ?",
        "concise pattern": "WHERE",
        "template": "what is the phone number of the man with the {COLUMN1} name timmothy and the {COLUMN2} name ward ?",
        "name dict": {
          "{TABLE0}": "students",
          "{VALUE2}": "0",
          "{COLUMN0}": "date_first_registered",
          "{COLUMN2}": "last_name",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "first_name",
          "{VALUE3}": "0",
          "{OP1}": "="
        },
        "query": "SELECT Students.date_first_registered FROM Students WHERE Students.first_name = 'terminal' AND Students.last_name = 'terminal'"
      },
      {
        "question": "What are the names of cities in Europe for which English is not the official language ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} of cities in europe for which english is not the official {COLUMN4} ?",
        "name dict": {
          "{TABLE0}": "city",
          "{OP0}": "=",
          "{COLUMN1}": "countrycode",
          "{COLUMN3}": "region",
          "{TABLE1}": "country",
          "{TABLE2}": "countrylanguage",
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{COLUMN2}": "code",
          "{VALUE1}": "'terminal'",
          "{OP1}": "!=",
          "{COLUMN4}": "language",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code AND city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Region = 'terminal' AND countrylanguage.Language != 'terminal'"
      },
      {
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language .",
        "concise pattern": "WHERE",
        "template": "return the different {COLUMN0} of cities that are in asia and for which chinese is the official {COLUMN4} .",
        "name dict": {
          "{TABLE0}": "city",
          "{OP0}": "=",
          "{COLUMN1}": "countrycode",
          "{COLUMN3}": "region",
          "{TABLE1}": "country",
          "{TABLE2}": "countrylanguage",
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{COLUMN2}": "code",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{COLUMN4}": "language",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code AND city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Region = 'terminal' AND countrylanguage.Language = 'terminal'"
      },
      {
        "question": "Give the names of countries that are in Europe and have a population equal to 80000 .",
        "concise pattern": "WHERE",
        "template": "give the {COLUMN0} of countries that are in europe and have a {COLUMN2} equal to 80000 .",
        "name dict": {
          "{TABLE0}": "country",
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{COLUMN2}": "population",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "continent",
          "{VALUE3}": "0",
          "{OP1}": ">"
        },
        "query": "SELECT country.Name FROM country WHERE country.Continent = 'terminal' AND country.Population > 'terminal'"
      },
      {
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000\uff1f",
        "concise pattern": "WHERE",
        "template": "what is the total {COLUMN0} and average area of countries in the {COLUMN1} of north america whose area is bigger than 3000\uff1f",
        "name dict": {
          "{TABLE0}": "country",
          "{VALUE2}": "0",
          "{COLUMN0}": "population",
          "{COLUMN2}": "lifeexpectancy",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "continent",
          "{VALUE3}": "0",
          "{AGG0}": "SUM",
          "{OP1}": ">"
        },
        "query": "SELECT Sum(country.Population) FROM country WHERE country.Continent = 'terminal' AND country.LifeExpectancy > 'terminal'"
      },
      {
        "question": "How many dog pets are raised by female students ?",
        "concise pattern": "WHERE",
        "template": "how many dog {TABLE0} are raised by female students ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "weight",
          "{TABLE0}": "pets",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "pettype",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT",
          "{OP1}": "="
        },
        "query": "SELECT Count(*) FROM Pets WHERE Pets.weight = 'terminal' AND Pets.PetType = 'terminal'"
      },
      {
        "question": "How many flights depart from City 'Aberdeen ' and have destination City 'Ashley ' ?",
        "concise pattern": "WHERE",
        "template": "how many {TABLE1} depart from city 'aberdeen ' and have destination city 'ashley ' ?",
        "name dict": {
          "{TABLE0}": "airports",
          "{OP0}": "=",
          "{COLUMN1}": "sourceairport",
          "{COLUMN3}": "destairport",
          "{TABLE1}": "flights",
          "{VALUE2}": "0",
          "{COLUMN0}": "airportcode",
          "{COLUMN2}": "city",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = 'terminal' AND flights.DestAirport = 'terminal'"
      },
      {
        "question": "How many flights fly from Aberdeen to Ashley ?",
        "concise pattern": "WHERE",
        "template": "how many {TABLE1} fly from aberdeen to ashley ?",
        "name dict": {
          "{OP0}": "=",
          "{COLUMN1}": "sourceairport",
          "{TABLE1}": "flights",
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "airportcode",
          "{TABLE0}": "airports",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE2}": "0",
          "{COLUMN2}": "city",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = 'terminal' AND airports.City = 'terminal'"
      },
      {
        "question": "What are the names of all the countries that became independent after 1950 ?",
        "concise pattern": "WHERE",
        "template": "what are the {COLUMN0} of all the countries that became independent after 1950 ?",
        "name dict": {
          "{TABLE0}": "country",
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{COLUMN2}": "lifeexpectancy",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "governmentform",
          "{VALUE3}": "0",
          "{OP1}": ">"
        },
        "query": "SELECT country.Name FROM country WHERE country.GovernmentForm = 'terminal' AND country.LifeExpectancy > 'terminal'"
      },
      {
        "question": "What is the average expected life expectancy for countries in the region of Central Africa ?",
        "concise pattern": "WHERE",
        "template": "what is the average expected life expectancy for countries in the {COLUMN1} of central africa ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "lifeexpectancy",
          "{TABLE0}": "country",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "region",
          "{VALUE3}": "0",
          "{AGG0}": "AVG",
          "{OP1}": "="
        },
        "query": "SELECT Avg(country.LifeExpectancy) FROM country WHERE country.Region = 'terminal' AND country.Region = 'terminal'"
      },
      {
        "question": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000 .",
        "concise pattern": "WHERE",
        "template": "give the total {COLUMN0} and average surface area corresponding to countries in noth america that have a surface area greater than 3000 .",
        "name dict": {
          "{TABLE0}": "country",
          "{VALUE2}": "0",
          "{COLUMN0}": "population",
          "{COLUMN2}": "surfacearea",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "continent",
          "{VALUE3}": "0",
          "{AGG0}": "SUM",
          "{OP1}": ">"
        },
        "query": "SELECT Sum(country.Population) FROM country WHERE country.Continent = 'terminal' AND country.SurfaceArea > 'terminal'"
      },
      {
        "question": "What is the mobile phone number of the student named Timothy Ward ?",
        "concise pattern": "WHERE",
        "template": "what is the mobile phone number of the student named timothy ward ?",
        "name dict": {
          "{TABLE0}": "students",
          "{VALUE2}": "0",
          "{COLUMN0}": "date_first_registered",
          "{COLUMN2}": "last_name",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "first_name",
          "{VALUE3}": "0",
          "{OP1}": "="
        },
        "query": "SELECT Students.date_first_registered FROM Students WHERE Students.first_name = 'terminal' AND Students.last_name = 'terminal'"
      },
      {
        "question": "Give the average life expectancy for countries in Africa which are republics ?",
        "concise pattern": "WHERE",
        "template": "give the average life expectancy for countries in africa which are republics ?",
        "name dict": {
          "{TABLE0}": "country",
          "{VALUE2}": "0",
          "{COLUMN0}": "lifeexpectancy",
          "{COLUMN2}": "continent",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "governmentform",
          "{VALUE3}": "0",
          "{AGG0}": "AVG",
          "{OP1}": "="
        },
        "query": "SELECT Avg(country.LifeExpectancy) FROM country WHERE country.GovernmentForm = 'terminal' AND country.Continent = 'terminal'"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} NOT IN ( {SELECT1} {FROM} WHERE {COLUMN1} {OP0} {VALUE0} )",
    [
      {
        "question": "Show names , results and bulgarian commanders of the battles with no ships lost in the 'English Channel ' .",
        "concise pattern": "WHERE NOT IN ( WHERE )",
        "template": "show names , results and {COLUMN0} commanders of the {TABLE0} with no {TABLE1} {COLUMN2} in the 'english channel ' .",
        "name dict": {
          "{TABLE0}": "battle",
          "{COLUMN1}": "id",
          "{COLUMN0}": "bulgarian_commander",
          "{COLUMN2}": "lost_in_battle",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "location",
          "{TABLE1}": "ship"
        },
        "query": "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle WHERE battle.id NOT IN (SELECT ship.lost_in_battle FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location = 'terminal')"
      },
      {
        "question": "What are the names of all stadiums that did not have a concert in 2014 ?",
        "concise pattern": "WHERE NOT IN ( WHERE )",
        "template": "what are the {COLUMN0} of all {TABLE0} that did not have a {COLUMN2} in 2014 ?",
        "name dict": {
          "{TABLE0}": "stadium",
          "{COLUMN1}": "stadium_id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "concert_name",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{TABLE1}": "concert"
        },
        "query": "SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert WHERE concert.concert_Name = 'terminal')"
      },
      {
        "question": "Find the number of visitors who did not visit any museum opened after 2010 .",
        "concise pattern": "WHERE NOT IN ( WHERE )",
        "template": "find the number of {TABLE0} who did not {TABLE0} any {COLUMN0} opened after 2010 .",
        "name dict": {
          "{COLUMN1}": "open_year",
          "{COLUMN0}": "museum_id",
          "{TABLE0}": "visit",
          "{VALUE1}": "0",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "museum"
        },
        "query": "SELECT Count(*) FROM visit WHERE visit.Museum_ID NOT IN (SELECT museum.Museum_ID FROM museum WHERE museum.Open_Year < 'terminal')"
      },
      {
        "question": "How many battles did not lose any ship with tonnage '225 ' ?",
        "concise pattern": "WHERE NOT IN ( WHERE )",
        "template": "how many {TABLE0} did not lose any {TABLE1} with {COLUMN2} '225 ' ?",
        "name dict": {
          "{TABLE0}": "battle",
          "{COLUMN1}": "lost_in_battle",
          "{COLUMN0}": "id",
          "{COLUMN2}": "tonnage",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "ship"
        },
        "query": "SELECT Count(*) FROM battle WHERE battle.id NOT IN (SELECT ship.lost_in_battle FROM ship WHERE ship.tonnage = 'terminal')"
      },
      {
        "question": "Find the major and age of students who do not have a cat pet .",
        "concise pattern": "WHERE NOT IN ( WHERE )",
        "template": "find the major and {COLUMN0} of {TABLE0} who do not have a cat pet .",
        "name dict": {
          "{TABLE0}": "student",
          "{COLUMN1}": "stuid",
          "{COLUMN0}": "age",
          "{COLUMN2}": "petid",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "pettype",
          "{TABLE1}": "has pet",
          "{TABLE2}": "pets"
        },
        "query": "SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal')"
      },
      {
        "question": "Find all airlines that have flights from airport 'CVO ' but not from 'APG ' .",
        "concise pattern": "WHERE NOT IN ( WHERE )",
        "template": "find all {COLUMN0} that have {TABLE2} from airport 'cvo ' but not from 'apg ' .",
        "name dict": {
          "{TABLE0}": "airlines",
          "{OP0}": "=",
          "{TABLE1}": "airports",
          "{TABLE2}": "flights",
          "{COLUMN1}": "airportname",
          "{COLUMN0}": "airline",
          "{COLUMN2}": "sourceairport",
          "{VALUE1}": "0",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT airlines.Airline FROM airlines JOIN airports WHERE airports.AirportName NOT IN (SELECT flights.Airline FROM flights WHERE flights.SourceAirport = 'terminal')"
      },
      {
        "question": "What is average life expectancy in the countries where English is not the official language ?",
        "concise pattern": "WHERE NOT IN ( WHERE )",
        "template": "what is average life expectancy in the countries where english is not the official {COLUMN2} ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "code",
          "{COLUMN0}": "lifeexpectancy",
          "{COLUMN2}": "language",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "AVG",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT Avg(country.LifeExpectancy) FROM country WHERE country.Code NOT IN (SELECT countrylanguage.Language FROM countrylanguage WHERE countrylanguage.Language = 'terminal')"
      },
      {
        "question": "Give the mean life expectancy of countries in which English is not the official language .",
        "concise pattern": "WHERE NOT IN ( WHERE )",
        "template": "give the mean life expectancy of countries in which english is not the official {COLUMN3} .",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "code",
          "{COLUMN0}": "lifeexpectancy",
          "{COLUMN2}": "percentage",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "language",
          "{AGG0}": "AVG",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT Avg(country.LifeExpectancy) FROM country WHERE country.Code NOT IN (SELECT countrylanguage.Percentage FROM countrylanguage WHERE countrylanguage.Language = 'terminal')"
      },
      {
        "question": "Which cities are in European countries where English is not the official language ?",
        "concise pattern": "WHERE NOT IN ( WHERE )",
        "template": "which cities are in european countries where english is not the official {COLUMN3} ?",
        "name dict": {
          "{TABLE0}": "city",
          "{COLUMN1}": "countrycode",
          "{COLUMN0}": "name",
          "{COLUMN2}": "code",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "language",
          "{TABLE1}": "country",
          "{TABLE2}": "countrylanguage"
        },
        "query": "SELECT city.Name FROM city WHERE city.CountryCode NOT IN (SELECT city.CountryCode FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal')"
      },
      {
        "question": "What is the total number of people living in the nations that do not use English ?",
        "concise pattern": "WHERE NOT IN ( WHERE )",
        "template": "what is the total number of people living in the nations that do not use english ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "code",
          "{COLUMN0}": "population",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "language",
          "{AGG0}": "SUM",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT Sum(country.Population) FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'terminal')"
      },
      {
        "question": "How many people live in countries that do not speak English ?",
        "concise pattern": "WHERE NOT IN ( WHERE )",
        "template": "how many people live in countries that do not speak english ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "code",
          "{COLUMN0}": "population",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "language",
          "{AGG0}": "COUNT",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT Count(DISTINCT country.Population) FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'terminal')"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} GROUP BY {COLUMN0} ORDER BY {AGG0} ( {COLUMN1} ) {SC0} LIMIT {VALUE0}",
    [
      {
        "question": "What are the country codes of the different countries , and what are the languages spoken by the greatest percentage of people for each ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what are the {TABLE0} {COLUMN1} of the different countries , and what are the {COLUMN0} spoken by the greatest {COLUMN3} of people for each ?",
        "name dict": {
          "{COLUMN1}": "code",
          "{COLUMN0}": "language",
          "{COLUMN2}": "countrycode",
          "{TABLE0}": "country",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{COLUMN3}": "percentage",
          "{AGG0}": "SUM",
          "{TABLE1}": "countrylanguage"
        },
        "query": "SELECT country.Code, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code ORDER BY Sum(countrylanguage.Percentage) Desc LIMIT 1"
      },
      {
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "find the {COLUMN1} id and {COLUMN0} code of the {COLUMN1} who spent the most money in total for his or her {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "owner_id",
          "{COLUMN0}": "zip_code",
          "{COLUMN2}": "weight",
          "{TABLE0}": "owners",
          "{SC0}": "DESC",
          "{VALUE0}": "1",
          "{AGG0}": "SUM",
          "{TABLE1}": "dogs"
        },
        "query": "SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY Sum(Dogs.weight) Desc LIMIT 1"
      },
      {
        "question": "What are the id , name and membership level of visitors who have spent the largest amount of money in total in all museum tickets ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what are the id , name and membership level of {TABLE1} who have spent the largest amount of money in {COLUMN0} in all {COLUMN1} tickets ?",
        "name dict": {
          "{AGG1}": "SUM",
          "{TABLE1}": "visit",
          "{COLUMN1}": "museum_id",
          "{COLUMN0}": "total_spent",
          "{TABLE0}": "museum",
          "{VALUE0}": "1",
          "{AGG0}": "SUM",
          "{SC0}": "DESC"
        },
        "query": "SELECT visit.Museum_ID, museum.Name, Sum(visit.Total_spent) FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY visit.Museum_ID ORDER BY Sum(visit.Total_spent) Desc LIMIT 1"
      },
      {
        "question": "Which owner has paid the largest amount of money in total for their dogs ? Show the owner id and zip code .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN1} has paid the largest amount of money in total for their {TABLE1} ? show the {COLUMN1} id and zip code .",
        "name dict": {
          "{AGG1}": "SUM",
          "{TABLE1}": "dogs",
          "{COLUMN1}": "owner_id",
          "{COLUMN0}": "weight",
          "{TABLE0}": "owners",
          "{VALUE0}": "1",
          "{AGG0}": "SUM",
          "{SC0}": "DESC"
        },
        "query": "SELECT Owners.owner_id, Sum(Dogs.weight) FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY Sum(Dogs.weight) Desc LIMIT 1"
      },
      {
        "question": "What is the language spoken by the largest percentage of people in each country ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the {COLUMN1} spoken by the largest {COLUMN0} of people in each country ?",
        "name dict": {
          "{COLUMN1}": "language",
          "{COLUMN0}": "percentage",
          "{TABLE0}": "countrylanguage",
          "{VALUE0}": "1",
          "{AGG0}": "SUM",
          "{SC0}": "DESC"
        },
        "query": "SELECT countrylanguage.Language, countrylanguage.Percentage FROM countrylanguage GROUP BY countrylanguage.Language ORDER BY Sum(countrylanguage.Percentage) Desc LIMIT 1"
      },
      {
        "question": "Give me the description of the treatment type whose total cost is the lowest .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "give me the description of the {COLUMN0} type whose total {COLUMN2} is the lowest .",
        "name dict": {
          "{COLUMN1}": "treatment_type_code",
          "{COLUMN0}": "treatment_type_description",
          "{COLUMN2}": "cost_of_treatment",
          "{TABLE0}": "treatment types",
          "{SC0}": "ASC",
          "{VALUE0}": "1",
          "{AGG0}": "AVG",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Treatment_Types.treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY Treatments.treatment_type_code ORDER BY Avg(Treatments.cost_of_treatment) Asc LIMIT 1"
      },
      {
        "question": "What is the charge amount of the most expensive charge type ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the {COLUMN0} amount of the most expensive {COLUMN0} type ?",
        "name dict": {
          "{COLUMN1}": "charge_type",
          "{COLUMN0}": "charge_amount",
          "{TABLE0}": "charges",
          "{VALUE0}": "1",
          "{AGG0}": "MAX",
          "{SC0}": "DESC"
        },
        "query": "SELECT Charges.charge_amount FROM Charges GROUP BY Charges.charge_type ORDER BY Max(Charges.charge_amount) Desc LIMIT 1"
      },
      {
        "question": "Which model saves the most gasoline ? That is to say , have the maximum miles per gallon .",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN0} saves the most gasoline ? that is to say , have the maximum miles per gallon .",
        "name dict": {
          "{TABLE0}": "model list",
          "{COLUMN3}": "accelerate",
          "{TABLE1}": "car names",
          "{TABLE2}": "cars data",
          "{COLUMN1}": "makeid",
          "{COLUMN0}": "model",
          "{COLUMN2}": "id",
          "{VALUE0}": "1",
          "{AGG0}": "SUM",
          "{SC0}": "DESC"
        },
        "query": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model AND model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY model_list.Model ORDER BY Sum(cars_data.Accelerate) Desc LIMIT 1"
      },
      {
        "question": "What is the description of the treatment type that costs the least money in total ?",
        "concise pattern": "GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the description of the {COLUMN0} type that costs the least money in total ?",
        "name dict": {
          "{COLUMN1}": "treatment_type_code",
          "{COLUMN0}": "treatment_type_description",
          "{COLUMN2}": "cost_of_treatment",
          "{TABLE0}": "treatment types",
          "{SC0}": "ASC",
          "{VALUE0}": "1",
          "{AGG0}": "SUM",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Treatment_Types.treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY Treatments.treatment_type_code ORDER BY Sum(Treatments.cost_of_treatment) Asc LIMIT 1"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} {VALUE0} EXCEPT {SELECT1} {FROM} WHERE {COLUMN1} {OP1} {VALUE1}",
    [
      {
        "question": "Among the cars with more than lowest horsepower , which ones do not have more than 3 cylinders ? List the car makeid and make name .",
        "concise pattern": "WHERE EXCEPT WHERE",
        "template": "among the cars with more than lowest {COLUMN0} , which ones do not have more than 3 {COLUMN4} ? list the car {COLUMN3} and {COLUMN3} name .",
        "name dict": {
          "{TABLE0}": "car names",
          "{OP0}": ">",
          "{COLUMN1}": "makeid",
          "{COLUMN3}": "make",
          "{TABLE1}": "cars data",
          "{VALUE2}": "0",
          "{COLUMN0}": "horsepower",
          "{COLUMN2}": "id",
          "{VALUE1}": "'terminal'",
          "{OP1}": ">",
          "{COLUMN4}": "cylinders",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT car_names.Make, cars_data.Horsepower FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > 'terminal' EXCEPT SELECT car_names.Make, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders > 'terminal'"
      },
      {
        "question": "Which airlines have departures from CVO but not from APG airports ?",
        "concise pattern": "WHERE EXCEPT WHERE",
        "template": "which {COLUMN0} have departures from cvo but not from apg {TABLE2} ?",
        "name dict": {
          "{OP0}": "=",
          "{COLUMN1}": "sourceairport",
          "{TABLE1}": "flights",
          "{TABLE2}": "airports",
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "airline",
          "{TABLE0}": "airlines",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE2}": "0",
          "{COLUMN2}": "airportname",
          "{VALUE3}": "0"
        },
        "query": "SELECT airlines.Airline FROM airlines JOIN flights WHERE flights.SourceAirport = 'terminal' EXCEPT SELECT airlines.Airline FROM airlines JOIN airports WHERE airports.AirportName = 'terminal'"
      },
      {
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs ?",
        "concise pattern": "WHERE EXCEPT WHERE",
        "template": "what are the {COLUMN0} name of the {TABLE1} who live in north carolina but have not registered in any degree programs ?",
        "name dict": {
          "{TABLE0}": "addresses",
          "{OP0}": "=",
          "{COLUMN1}": "address_id",
          "{COLUMN3}": "city",
          "{TABLE1}": "students",
          "{VALUE2}": "0",
          "{COLUMN0}": "last_name",
          "{COLUMN2}": "current_address_id",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT Students.last_name FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id WHERE Addresses.city = 'terminal' EXCEPT SELECT Students.last_name FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id WHERE Addresses.city = 'terminal'"
      },
      {
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "concise pattern": "WHERE EXCEPT WHERE",
        "template": "in which {COLUMN0} cars were produced weighing no less than 3000 and no more than 4000 ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "year",
          "{TABLE0}": "cars data",
          "{VALUE1}": "'terminal'",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "weight",
          "{VALUE3}": "0",
          "{OP1}": "<"
        },
        "query": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 'terminal' EXCEPT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 'terminal'"
      },
      {
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company ' ?",
        "concise pattern": "WHERE EXCEPT WHERE",
        "template": "which {COLUMN0} are lighter than 3500 but not built by the 'ford motor company ' ?",
        "name dict": {
          "{TABLE0}": "model list",
          "{OP0}": ">",
          "{TABLE3}": "car makers",
          "{COLUMN1}": "makeid",
          "{COLUMN3}": "weight",
          "{TABLE1}": "car names",
          "{TABLE2}": "cars data",
          "{VALUE2}": "0",
          "{COLUMN0}": "model",
          "{COLUMN2}": "id",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{COLUMN4}": "maker",
          "{VALUE0}": "'terminal'",
          "{COLUMN5}": "fullname",
          "{VALUE3}": "0"
        },
        "query": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight > 'terminal' EXCEPT SELECT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker AND car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_makers.FullName = 'terminal'"
      },
      {
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company ?",
        "concise pattern": "WHERE EXCEPT WHERE",
        "template": "what are the different {COLUMN0} wthat are lighter than 3500 but were not built by the ford motor company ?",
        "name dict": {
          "{TABLE0}": "car makers",
          "{OP0}": "=",
          "{COLUMN1}": "id",
          "{COLUMN3}": "fullname",
          "{TABLE1}": "model list",
          "{VALUE2}": "0",
          "{COLUMN0}": "model",
          "{COLUMN2}": "maker",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT DISTINCT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'terminal' EXCEPT SELECT DISTINCT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'terminal'"
      },
      {
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic ?",
        "concise pattern": "WHERE EXCEPT WHERE",
        "template": "what are the {COLUMN0} of the countries that do not speak english and whose government forms are not republic ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "code",
          "{TABLE0}": "country",
          "{VALUE1}": "'terminal'",
          "{OP0}": "!=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "governmentform",
          "{VALUE3}": "0",
          "{OP1}": "="
        },
        "query": "SELECT country.Code FROM country WHERE country.GovernmentForm != 'terminal' EXCEPT SELECT country.Code FROM country WHERE country.GovernmentForm = 'terminal'"
      },
      {
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments .",
        "concise pattern": "WHERE EXCEPT WHERE",
        "template": "return the {COLUMN0} of countries that do not speak english and do not have republics for governments .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "code",
          "{TABLE0}": "country",
          "{VALUE1}": "'terminal'",
          "{OP0}": "!=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "governmentform",
          "{VALUE3}": "0",
          "{OP1}": "="
        },
        "query": "SELECT country.Code FROM country WHERE country.GovernmentForm != 'terminal' EXCEPT SELECT country.Code FROM country WHERE country.GovernmentForm = 'terminal'"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} ( {SELECT1} {FROM} )",
    [
      {
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of al those with less than 4 cylinders ?",
        "concise pattern": "WHERE ( )",
        "template": "among the cars that do not have the minimum {COLUMN3} , what are the {COLUMN0} {COLUMN2} and names of al those with less than 4 cylinders ?",
        "name dict": {
          "{COLUMN0}": "make",
          "{COLUMN2}": "id",
          "{TABLE0}": "car names",
          "{OP0}": "<",
          "{COLUMN1}": "makeid",
          "{COLUMN3}": "horsepower",
          "{AGG0}": "MIN",
          "{TABLE1}": "cars data"
        },
        "query": "SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower < (SELECT Min(cars_data.Horsepower) FROM cars_data)"
      },
      {
        "question": "What are all the song names by singers who are older than average ?",
        "concise pattern": "WHERE ( )",
        "template": "what are all the {COLUMN0} names by {TABLE0} who are older than average ?",
        "name dict": {
          "{COLUMN1}": "age",
          "{COLUMN0}": "song_name",
          "{TABLE0}": "singer",
          "{OP0}": ">",
          "{AGG0}": "AVG"
        },
        "query": "SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT Avg(singer.Age) FROM singer)"
      },
      {
        "question": "What is the name of country that has the shortest life expectancy in Asia ?",
        "concise pattern": "WHERE ( )",
        "template": "what is the {COLUMN0} of {TABLE0} that has the shortest life expectancy in asia ?",
        "name dict": {
          "{COLUMN1}": "lifeexpectancy",
          "{COLUMN0}": "name",
          "{TABLE0}": "country",
          "{OP0}": "<",
          "{AGG0}": "MIN"
        },
        "query": "SELECT country.Name FROM country WHERE country.LifeExpectancy < (SELECT Min(country.LifeExpectancy) FROM country)"
      },
      {
        "question": "Which language is the most popular on the Asian continent ?",
        "concise pattern": "WHERE ( )",
        "template": "which {COLUMN0} is the most popular on the asian {COLUMN2} ?",
        "name dict": {
          "{COLUMN0}": "language",
          "{COLUMN2}": "continent",
          "{TABLE0}": "countrylanguage",
          "{OP0}": "=",
          "{COLUMN1}": "isofficial",
          "{AGG0}": "MAX",
          "{TABLE1}": "country"
        },
        "query": "SELECT countrylanguage.Language FROM countrylanguage WHERE countrylanguage.IsOfficial = (SELECT Max(country.Continent) FROM country)"
      },
      {
        "question": "How many dogs have an age below the average ?",
        "concise pattern": "WHERE ( )",
        "template": "how many {TABLE0} have an {COLUMN0} below the average ?",
        "name dict": {
          "{COLUMN0}": "age",
          "{TABLE0}": "dogs",
          "{AGG0}": "COUNT",
          "{AGG1}": "AVG",
          "{OP0}": "<"
        },
        "query": "SELECT Count(*) FROM Dogs WHERE Dogs.age < (SELECT Avg(Dogs.age) FROM Dogs)"
      },
      {
        "question": "Count the number of dogs of an age below the average .",
        "concise pattern": "WHERE ( )",
        "template": "count the number of {TABLE0} of an {COLUMN0} below the average .",
        "name dict": {
          "{COLUMN0}": "age",
          "{TABLE0}": "dogs",
          "{AGG0}": "COUNT",
          "{AGG1}": "AVG",
          "{OP0}": "<"
        },
        "query": "SELECT Count(*) FROM Dogs WHERE Dogs.age < (SELECT Avg(Dogs.age) FROM Dogs)"
      },
      {
        "question": "How many cars have a larger accelerate than the car with the largest horsepower ?",
        "concise pattern": "WHERE ( )",
        "template": "how many cars have a larger {COLUMN0} than the car with the largest horsepower ?",
        "name dict": {
          "{COLUMN0}": "accelerate",
          "{TABLE0}": "cars data",
          "{AGG0}": "COUNT",
          "{AGG1}": "MAX",
          "{OP0}": ">"
        },
        "query": "SELECT Count(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT Max(cars_data.Accelerate) FROM cars_data)"
      },
      {
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower ?",
        "concise pattern": "WHERE ( )",
        "template": "what is the number of cars with a greater {COLUMN0} than the one with the most horsepower ?",
        "name dict": {
          "{COLUMN0}": "accelerate",
          "{TABLE0}": "cars data",
          "{AGG0}": "COUNT",
          "{AGG1}": "MAX",
          "{OP0}": ">"
        },
        "query": "SELECT Count(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT Max(cars_data.Accelerate) FROM cars_data)"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} ( {SELECT1} {FROM} WHERE {COLUMN1} {OP1} {VALUE0} )",
    [
      {
        "question": "What are the African countries that have a population less than any country in Asia ?",
        "concise pattern": "WHERE ( WHERE )",
        "template": "what are the african countries that have a {COLUMN1} less than any {TABLE0} in asia ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "population",
          "{COLUMN0}": "name",
          "{COLUMN2}": "region",
          "{VALUE1}": "0",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "MIN",
          "{OP1}": "="
        },
        "query": "SELECT country.Name FROM country WHERE country.Population < (SELECT Min(country.Population) FROM country WHERE country.Region = 'terminal')"
      },
      {
        "question": "Which African countries have a smaller population than that of any country in Asia ?",
        "concise pattern": "WHERE ( WHERE )",
        "template": "which african countries have a smaller {COLUMN1} than that of any {TABLE0} in asia ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "population",
          "{COLUMN0}": "name",
          "{COLUMN2}": "region",
          "{VALUE1}": "0",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "MIN",
          "{OP1}": "="
        },
        "query": "SELECT country.Name FROM country WHERE country.Population < (SELECT Min(country.Population) FROM country WHERE country.Region = 'terminal')"
      },
      {
        "question": "Which Asian countries have a population that is larger than any country in Africa ?",
        "concise pattern": "WHERE ( WHERE )",
        "template": "which asian countries have a {COLUMN1} that is larger than any {TABLE0} in africa ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "population",
          "{COLUMN0}": "indepyear",
          "{COLUMN2}": "continent",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "MAX",
          "{OP1}": "="
        },
        "query": "SELECT country.IndepYear FROM country WHERE country.Population > (SELECT Max(country.Population) FROM country WHERE country.Continent = 'terminal')"
      },
      {
        "question": "What are the Asian countries which have a population larger than that of any country in Africa ?",
        "concise pattern": "WHERE ( WHERE )",
        "template": "what are the asian countries which have a {COLUMN1} larger than that of any {TABLE0} in africa ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "population",
          "{COLUMN0}": "indepyear",
          "{COLUMN2}": "continent",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "MAX",
          "{OP1}": "="
        },
        "query": "SELECT country.IndepYear FROM country WHERE country.Population > (SELECT Max(country.Population) FROM country WHERE country.Continent = 'terminal')"
      },
      {
        "question": "What are the countries that have greater surface area than any country in Europe ?",
        "concise pattern": "WHERE ( WHERE )",
        "template": "what are the countries that have greater surface area than any {TABLE0} in europe ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "surfacearea",
          "{COLUMN0}": "name",
          "{COLUMN2}": "region",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "MAX",
          "{OP1}": "="
        },
        "query": "SELECT country.Name FROM country WHERE country.SurfaceArea > (SELECT Max(country.SurfaceArea) FROM country WHERE country.Region = 'terminal')"
      },
      {
        "question": "Which countries have greater area than that of any country in Europe ?",
        "concise pattern": "WHERE ( WHERE )",
        "template": "which countries have greater area than that of any {TABLE0} in europe ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "population",
          "{COLUMN0}": "name",
          "{COLUMN2}": "region",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "MAX",
          "{OP1}": "="
        },
        "query": "SELECT country.Name FROM country WHERE country.Population > (SELECT Max(country.Population) FROM country WHERE country.Region = 'terminal')"
      },
      {
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people ?",
        "concise pattern": "WHERE ( WHERE )",
        "template": "what is the total number of countries where spanish is spoken by the largest {COLUMN0} of people ?",
        "name dict": {
          "{OP0}": ">",
          "{AGG1}": "MAX",
          "{COLUMN1}": "language",
          "{COLUMN0}": "percentage",
          "{TABLE0}": "countrylanguage",
          "{VALUE1}": "0",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*) FROM countrylanguage WHERE countrylanguage.Percentage > (SELECT Max(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.Language = 'terminal')"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} {VALUE0} GROUP BY {COLUMN1} ORDER BY {AGG0} ( * ) {SC0} LIMIT {VALUE1}",
    [
      {
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after .",
        "concise pattern": "WHERE GROUP BY ORDER BY ( ) LIMIT",
        "template": "show the {COLUMN1} name and {COLUMN0} with most number of {TABLE1} in {COLUMN2} 2014 or after .",
        "name dict": {
          "{TABLE0}": "stadium",
          "{VALUE2}": "1",
          "{COLUMN0}": "capacity",
          "{COLUMN2}": "year",
          "{VALUE1}": "0",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "stadium_id",
          "{SC0}": "DESC",
          "{AGG0}": "COUNT",
          "{TABLE1}": "concert"
        },
        "query": "SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year >= 'terminal' GROUP BY stadium.Stadium_ID ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which cities do more than one employee under age 30 come from ?",
        "concise pattern": "WHERE GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN0} do more than one {TABLE0} under {COLUMN1} 30 come from ?",
        "name dict": {
          "{VALUE2}": "1",
          "{COLUMN0}": "city",
          "{TABLE0}": "employee",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "age",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT employee.City FROM employee WHERE employee.Age > 'terminal' GROUP BY employee.City ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Which language is the most popular in Aruba ?",
        "concise pattern": "WHERE GROUP BY ORDER BY ( ) LIMIT",
        "template": "which {COLUMN0} is the most popular in aruba ?",
        "name dict": {
          "{OP0}": "=",
          "{COLUMN1}": "code",
          "{COLUMN3}": "localname",
          "{TABLE1}": "countrylanguage",
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "language",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{VALUE2}": "1",
          "{COLUMN2}": "countrycode",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.LocalName = 'terminal' GROUP BY countrylanguage.Language ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the language that is used by the largest number of Asian nations ?",
        "concise pattern": "WHERE GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the {COLUMN0} that is used by the largest number of asian nations ?",
        "name dict": {
          "{VALUE2}": "1",
          "{COLUMN0}": "language",
          "{TABLE0}": "countrylanguage",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "percentage",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT countrylanguage.Language FROM countrylanguage WHERE countrylanguage.Percentage = 'terminal' GROUP BY countrylanguage.Language ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "Find the city with the largest population that uses English .",
        "concise pattern": "WHERE GROUP BY ORDER BY ( ) LIMIT",
        "template": "find the {TABLE0} with the largest population that uses english .",
        "name dict": {
          "{OP0}": "=",
          "{COLUMN1}": "countrycode",
          "{COLUMN3}": "language",
          "{TABLE1}": "country",
          "{TABLE2}": "countrylanguage",
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "name",
          "{TABLE0}": "city",
          "{VALUE1}": "0",
          "{VALUE2}": "1",
          "{COLUMN2}": "code",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' GROUP BY city.Name ORDER BY Count(*) Desc LIMIT 1"
      },
      {
        "question": "What is the most populace city that speaks English ?",
        "concise pattern": "WHERE GROUP BY ORDER BY ( ) LIMIT",
        "template": "what is the most populace {TABLE0} that speaks english ?",
        "name dict": {
          "{OP0}": "=",
          "{COLUMN1}": "countrycode",
          "{COLUMN3}": "language",
          "{TABLE1}": "country",
          "{TABLE2}": "countrylanguage",
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "name",
          "{TABLE0}": "city",
          "{VALUE1}": "0",
          "{VALUE2}": "1",
          "{COLUMN2}": "code",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' GROUP BY city.Name ORDER BY Count(*) Desc LIMIT 1"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} GROUP BY {COLUMN0} HAVING {AGG0} ( {COLUMN1} ) {OP0} {VALUE0}",
    [
      {
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the {COLUMN2} name and {COLUMN0} name of the {TABLE0} who have done treatment with {COLUMN3} below average ?",
        "name dict": {
          "{TABLE0}": "professionals",
          "{COLUMN1}": "professional_id",
          "{COLUMN0}": "last_name",
          "{COLUMN2}": "first_name",
          "{VALUE1}": "0",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "cost_of_treatment",
          "{AGG0}": "AVG",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.first_name HAVING Avg(Treatments.cost_of_treatment) < 'terminal'"
      },
      {
        "question": "Find the model of the car whose weight is below the average weight .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "find the {COLUMN0} of the car whose {COLUMN3} is below the average {COLUMN3} .",
        "name dict": {
          "{TABLE0}": "model list",
          "{COLUMN1}": "makeid",
          "{COLUMN0}": "model",
          "{COLUMN2}": "id",
          "{VALUE1}": "0",
          "{OP0}": "<",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "weight",
          "{AGG0}": "AVG",
          "{TABLE1}": "car names",
          "{TABLE2}": "cars data"
        },
        "query": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model AND model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_names.Model HAVING Avg(cars_data.Weight) < 'terminal'"
      },
      {
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each , for continents that have an average life expectancy less than 72 ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the different {COLUMN1} and the total popuation and average life expectancy corresponding to each , for {COLUMN1} that have an average life expectancy less than 72 ?",
        "name dict": {
          "{OP0}": ">",
          "{AGG1}": "AVG",
          "{COLUMN1}": "continent",
          "{COLUMN0}": "lifeexpectancy",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(country.LifeExpectancy), country.Continent FROM country GROUP BY country.Continent HAVING Avg(country.LifeExpectancy) > 'terminal'"
      },
      {
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "what are the different government forms and what is the total {COLUMN0} of each for government forms that have an average life expectancy greater than 72 ?",
        "name dict": {
          "{TABLE0}": "country",
          "{COLUMN1}": "governmentform",
          "{COLUMN0}": "population",
          "{COLUMN2}": "lifeexpectancy",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{AGG1}": "SUM",
          "{AGG0}": "SUM"
        },
        "query": "SELECT Sum(country.Population), country.GovernmentForm FROM country GROUP BY country.GovernmentForm HAVING Sum(country.LifeExpectancy) > 'terminal'"
      },
      {
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72 ?",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "find the average life expectancy and total population for each {COLUMN1} where the average life expectancy is shorter than 72 ?",
        "name dict": {
          "{OP0}": ">",
          "{AGG1}": "AVG",
          "{COLUMN1}": "continent",
          "{COLUMN0}": "lifeexpectancy",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(country.LifeExpectancy), country.Continent FROM country GROUP BY country.Continent HAVING Avg(country.LifeExpectancy) > 'terminal'"
      },
      {
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 .",
        "concise pattern": "GROUP BY HAVING ( )",
        "template": "find the government form name and total population for each government form whose average life expectancy is longer than 72 .",
        "name dict": {
          "{OP0}": ">",
          "{AGG1}": "AVG",
          "{COLUMN1}": "governmentform",
          "{COLUMN0}": "lifeexpectancy",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Avg(country.LifeExpectancy), country.GovernmentForm FROM country GROUP BY country.GovernmentForm HAVING Avg(country.LifeExpectancy) > 'terminal'"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} {VALUE0} ORDER BY {COLUMN1} {SC0} LIMIT {VALUE1}",
    [
      {
        "question": "For the cars with 4 cylinders , which model has the largest horsepower ?",
        "concise pattern": "WHERE ORDER BY LIMIT",
        "template": "for the cars with 4 {COLUMN3} , which model has the largest {COLUMN4} ?",
        "name dict": {
          "{TABLE0}": "car names",
          "{OP0}": "=",
          "{COLUMN1}": "makeid",
          "{COLUMN3}": "cylinders",
          "{TABLE1}": "cars data",
          "{VALUE2}": "1",
          "{COLUMN0}": "make",
          "{COLUMN2}": "id",
          "{VALUE1}": "0",
          "{COLUMN4}": "horsepower",
          "{VALUE0}": "'terminal'",
          "{SC0}": "DESC"
        },
        "query": "SELECT car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 'terminal' ORDER BY cars_data.Horsepower Desc LIMIT 1"
      },
      {
        "question": "Find the weight of the youngest dog .",
        "concise pattern": "WHERE ORDER BY LIMIT",
        "template": "find the {COLUMN0} of the youngest dog .",
        "name dict": {
          "{VALUE2}": "1",
          "{COLUMN0}": "weight",
          "{TABLE0}": "pets",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "pettype",
          "{SC0}": "DESC"
        },
        "query": "SELECT Pets.weight FROM Pets WHERE Pets.PetType = 'terminal' ORDER BY Pets.weight Desc LIMIT 1"
      },
      {
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament ?",
        "concise pattern": "WHERE ORDER BY LIMIT",
        "template": "what is the name of the {COLUMN0} with the most rank points who participated in the australian open tournament ?",
        "name dict": {
          "{TABLE0}": "players",
          "{OP0}": "=",
          "{COLUMN1}": "loser_id",
          "{COLUMN3}": "tourney_name",
          "{TABLE1}": "matches",
          "{TABLE2}": "rankings",
          "{VALUE2}": "1",
          "{COLUMN0}": "winner_name",
          "{COLUMN2}": "player_id",
          "{VALUE1}": "0",
          "{COLUMN4}": "ranking_points",
          "{VALUE0}": "'terminal'",
          "{SC0}": "DESC"
        },
        "query": "SELECT matches.winner_name FROM players JOIN matches ON matches.loser_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.tourney_name = 'terminal' ORDER BY rankings.ranking_points Desc LIMIT 1"
      },
      {
        "question": "How many people live in Asia , and what is the largest GNP among them ?",
        "concise pattern": "WHERE ORDER BY LIMIT",
        "template": "how many people live in asia , and what is the largest {COLUMN0} among them ?",
        "name dict": {
          "{VALUE2}": "1",
          "{COLUMN0}": "gnp",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "continent",
          "{SC0}": "DESC"
        },
        "query": "SELECT country.Population, country.GNP FROM country WHERE country.Continent = 'terminal' ORDER BY country.GNP Desc LIMIT 1"
      },
      {
        "question": "How much does the youngest dog weigh ?",
        "concise pattern": "WHERE ORDER BY LIMIT",
        "template": "how much does the youngest dog weigh ?",
        "name dict": {
          "{VALUE2}": "1",
          "{COLUMN0}": "weight",
          "{TABLE0}": "pets",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "pettype",
          "{SC0}": "DESC"
        },
        "query": "SELECT Pets.weight FROM Pets WHERE Pets.PetType = 'terminal' ORDER BY Pets.weight Desc LIMIT 1"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} IN ( {SELECT1} {FROM} )",
    [
      {
        "question": "What is the average age of the dogs who have gone through any treatments ?",
        "concise pattern": "WHERE IN ( )",
        "template": "what is the average {COLUMN0} of the {TABLE0} who have gone through any {TABLE1} ?",
        "name dict": {
          "{COLUMN1}": "dog_id",
          "{COLUMN0}": "age",
          "{TABLE0}": "dogs",
          "{AGG0}": "AVG",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Avg(Dogs.age) FROM Dogs WHERE Dogs.dog_id IN (SELECT Treatments.dog_id FROM Treatments)"
      },
      {
        "question": "Find the average age of the dogs who went through treatments .",
        "concise pattern": "WHERE IN ( )",
        "template": "find the average {COLUMN0} of the {TABLE0} who went through {TABLE1} .",
        "name dict": {
          "{COLUMN1}": "dog_id",
          "{COLUMN0}": "age",
          "{TABLE0}": "dogs",
          "{AGG0}": "AVG",
          "{TABLE1}": "treatments"
        },
        "query": "SELECT Avg(Dogs.age) FROM Dogs WHERE Dogs.dog_id IN (SELECT Treatments.dog_id FROM Treatments)"
      },
      {
        "question": "Find the average grade of all students who have some friends .",
        "concise pattern": "WHERE IN ( )",
        "template": "find the average {COLUMN0} of all students who have some {TABLE1} .",
        "name dict": {
          "{COLUMN0}": "grade",
          "{COLUMN2}": "student_id",
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "id",
          "{AGG0}": "AVG",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Avg(Highschooler.grade) FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend)"
      },
      {
        "question": "What is the average grade of students who have friends ?",
        "concise pattern": "WHERE IN ( )",
        "template": "what is the average {COLUMN0} of students who have {TABLE1} ?",
        "name dict": {
          "{COLUMN0}": "grade",
          "{COLUMN2}": "student_id",
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "id",
          "{AGG0}": "AVG",
          "{TABLE1}": "friend"
        },
        "query": "SELECT Avg(Highschooler.grade) FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend)"
      },
      {
        "question": "Find the name of airports which do not have any flight in and out .",
        "concise pattern": "WHERE IN ( )",
        "template": "find the name of {TABLE0} which do not have any flight in and out .",
        "name dict": {
          "{COLUMN1}": "airportcode",
          "{COLUMN0}": "airportname",
          "{COLUMN2}": "sourceairport",
          "{TABLE0}": "airports",
          "{TABLE1}": "flights"
        },
        "query": "SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM airports WHERE airports.AirportCode IN (SELECT flights.SourceAirport FROM flights)"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} BETWEEN {VALUE0} AND {VALUE1}",
    [
      {
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000 .",
        "concise pattern": "WHERE",
        "template": "show location and {COLUMN0} for all {TABLE0} with a {COLUMN1} between 5000 and 10000 .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{TABLE0}": "stadium",
          "{VALUE1}": "'terminal'",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "capacity",
          "{VALUE3}": "0"
        },
        "query": "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 'terminal' AND 'terminal'"
      },
      {
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000 ?",
        "concise pattern": "WHERE",
        "template": "what are the locations and {COLUMN0} of all stations with {COLUMN1} between 5000 and 10000 ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{TABLE0}": "stadium",
          "{VALUE1}": "'terminal'",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "capacity",
          "{VALUE3}": "0"
        },
        "query": "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 'terminal' AND 'terminal'"
      },
      {
        "question": "Return the names of cities that have a population between 160000 and 900000 .",
        "concise pattern": "WHERE",
        "template": "return the {COLUMN0} of cities that have a {COLUMN1} between 160000 and 900000 .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{TABLE0}": "city",
          "{VALUE1}": "'terminal'",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "population",
          "{VALUE3}": "0"
        },
        "query": "SELECT city.Name FROM city WHERE city.Population BETWEEN 'terminal' AND 'terminal'"
      },
      {
        "question": "What are the cities whose population is between 160000 and 900000 ?",
        "concise pattern": "WHERE",
        "template": "what are the cities whose {COLUMN1} is between 160000 and 900000 ?",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{TABLE0}": "city",
          "{VALUE1}": "'terminal'",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "population",
          "{VALUE3}": "0"
        },
        "query": "SELECT city.Name FROM city WHERE city.Population BETWEEN 'terminal' AND 'terminal'"
      },
      {
        "question": "List the names of all winners who played in both 2013 and 2016 .",
        "concise pattern": "WHERE",
        "template": "list the names of all winners who played in both 2013 and 2016 .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "winner_name",
          "{TABLE0}": "matches",
          "{VALUE1}": "'terminal'",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "year",
          "{VALUE3}": "0"
        },
        "query": "SELECT matches.winner_name FROM matches WHERE matches.year BETWEEN 'terminal' AND 'terminal'"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} GROUP BY {COLUMN0} HAVING {AGG0} ( {COLUMN1} ) {OP0} ( {SELECT1} {FROM} )",
    [
      {
        "question": "Which shops ' number products is above the average ? Give me the shop names .",
        "concise pattern": "GROUP BY HAVING ( ) ( )",
        "template": "which {TABLE0} ' {COLUMN1} products is above the average ? give me the {TABLE0} {COLUMN0} .",
        "name dict": {
          "{COLUMN0}": "name",
          "{TABLE0}": "shop",
          "{OP0}": ">",
          "{COLUMN1}": "number_products",
          "{AGG1}": "AVG",
          "{AGG0}": "AVG"
        },
        "query": "SELECT shop.Name FROM shop GROUP BY shop.Name HAVING Avg(shop.Number_products) > (SELECT Avg(shop.Number_products) FROM shop)"
      },
      {
        "question": "Find the names of stores whose number products is more than the average number of products .",
        "concise pattern": "GROUP BY HAVING ( ) ( )",
        "template": "find the {COLUMN0} of stores whose {COLUMN2} products is more than the average {COLUMN2} of products .",
        "name dict": {
          "{COLUMN0}": "name",
          "{COLUMN2}": "number_products",
          "{TABLE0}": "shop",
          "{OP0}": ">",
          "{COLUMN1}": "location",
          "{AGG1}": "AVG",
          "{AGG0}": "AVG"
        },
        "query": "SELECT shop.Name FROM shop GROUP BY shop.Location HAVING Avg(shop.Number_products) > (SELECT Avg(shop.Number_products) FROM shop)"
      },
      {
        "question": "How many cities in each district have a population that is above the average population across all cities ?",
        "concise pattern": "GROUP BY HAVING ( ) ( )",
        "template": "how many cities in each {COLUMN0} have a {COLUMN1} that is above the average {COLUMN1} across all cities ?",
        "name dict": {
          "{AGG2}": "AVG",
          "{COLUMN0}": "district",
          "{TABLE0}": "city",
          "{OP0}": ">",
          "{COLUMN1}": "population",
          "{AGG1}": "AVG",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Count(*), city.District FROM city GROUP BY city.District HAVING Avg(city.Population) > (SELECT Avg(city.Population) FROM city)"
      },
      {
        "question": "Which professionals have operated a treatment that costs less than the average ? Give me theor first names and last names .",
        "concise pattern": "GROUP BY HAVING ( ) ( )",
        "template": "which {TABLE0} have operated a treatment that costs less than the average ? give me theor {COLUMN2} names and {COLUMN0} names .",
        "name dict": {
          "{COLUMN0}": "last_name",
          "{COLUMN2}": "first_name",
          "{TABLE0}": "professionals",
          "{OP0}": ">",
          "{COLUMN1}": "professional_id",
          "{COLUMN3}": "cost_of_treatment",
          "{AGG1}": "AVG",
          "{TABLE1}": "treatments",
          "{AGG0}": "AVG"
        },
        "query": "SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.first_name HAVING Avg(Treatments.cost_of_treatment) > (SELECT Avg(Treatments.cost_of_treatment) FROM Treatments)"
      },
      {
        "question": "What is the model for the car with a weight smaller than the average ?",
        "concise pattern": "GROUP BY HAVING ( ) ( )",
        "template": "what is the {COLUMN0} for the car with a {COLUMN3} smaller than the average ?",
        "name dict": {
          "{AGG2}": "AVG",
          "{COLUMN0}": "model",
          "{COLUMN2}": "id",
          "{TABLE0}": "model list",
          "{OP0}": ">",
          "{AGG0}": "AVG",
          "{COLUMN1}": "makeid",
          "{COLUMN3}": "weight",
          "{AGG1}": "AVG",
          "{TABLE1}": "car names",
          "{TABLE2}": "cars data"
        },
        "query": "SELECT Avg(model_list.Model) FROM model_list JOIN car_names ON model_list.Model = car_names.Model AND model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_names.Model HAVING Avg(cars_data.Weight) > (SELECT Avg(cars_data.Weight) FROM cars_data)"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} {VALUE0} ORDER BY {COLUMN1} {SC0}",
    [
      {
        "question": "Find the names of the visitors whose membership level is higher than 4 , and order the results by the level from high to low .",
        "concise pattern": "WHERE ORDER BY",
        "template": "find the {COLUMN0} of the {TABLE1} whose membership {COLUMN3} is higher than 4 , and order the results by the {COLUMN3} from high to low .",
        "name dict": {
          "{TABLE0}": "customer",
          "{COLUMN1}": "id",
          "{COLUMN0}": "name",
          "{COLUMN2}": "visitor_id",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{COLUMN3}": "level_of_membership",
          "{TABLE1}": "visit",
          "{SC0}": "ASC"
        },
        "query": "SELECT visitor.Name FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Level_of_membership > 'terminal' ORDER BY visitor.Level_of_membership Asc"
      },
      {
        "question": "List the first and last name of all players who are left / L hand in the order of birth date .",
        "concise pattern": "WHERE ORDER BY",
        "template": "list the first and {COLUMN0} name of all {TABLE0} who are left / l {COLUMN1} in the order of {COLUMN2} date .",
        "name dict": {
          "{TABLE0}": "players",
          "{COLUMN1}": "hand",
          "{COLUMN0}": "last_name",
          "{COLUMN2}": "birth_date",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{SC0}": "ASC"
        },
        "query": "SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'terminal' ORDER BY players.birth_date Asc"
      },
      {
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4 , and sort by their age from old to young .",
        "concise pattern": "WHERE ORDER BY",
        "template": "find the name and membership {COLUMN0} of the visitors whose membership {COLUMN0} is higher than 4 , and sort by their {COLUMN1} from old to young .",
        "name dict": {
          "{COLUMN1}": "age",
          "{COLUMN0}": "level_of_membership",
          "{TABLE0}": "customer",
          "{VALUE1}": "0",
          "{OP0}": ">",
          "{VALUE0}": "'terminal'",
          "{SC0}": "ASC"
        },
        "query": "SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Age > 'terminal' ORDER BY visitor.Age Asc"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} GROUP BY {COLUMN0} ORDER BY {AGG0} ( * ) {SC0}",
    [
      {
        "question": "Show all document ids and the number of paragraphs in each document . Order by document id .",
        "concise pattern": "GROUP BY ORDER BY ( )",
        "template": "show all {COLUMN0} ids and the number of {TABLE0} in each {COLUMN0} . order by {COLUMN0} id .",
        "name dict": {
          "{COLUMN0}": "document_id",
          "{TABLE0}": "paragraphs",
          "{AGG1}": "COUNT",
          "{SC0}": "ASC",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Paragraphs.Document_ID, Count(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY Count(*) Asc"
      },
      {
        "question": "Return the different document ids along with the number of paragraphs corresponding to each , ordered by id .",
        "concise pattern": "GROUP BY ORDER BY ( )",
        "template": "return the different {COLUMN0} ids along with the number of {TABLE0} corresponding to each , ordered by id .",
        "name dict": {
          "{COLUMN0}": "document_id",
          "{TABLE0}": "paragraphs",
          "{AGG1}": "COUNT",
          "{SC0}": "ASC",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Paragraphs.Document_ID, Count(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY Count(*) Asc"
      },
      {
        "question": "What are the names of conductors , sorted descending by the number of years they have worked ?",
        "concise pattern": "GROUP BY ORDER BY ( )",
        "template": "what are the {COLUMN0} of {TABLE0} , sorted descending by the number of years they have worked ?",
        "name dict": {
          "{COLUMN0}": "name",
          "{TABLE0}": "conductor",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT conductor.Name FROM conductor GROUP BY conductor.Name ORDER BY Count(*) Desc"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} {VALUE0} UNION {SELECT1} {FROM} WHERE {COLUMN1} {OP1} {VALUE1}",
    [
      {
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiats ?",
        "concise pattern": "WHERE UNION WHERE",
        "template": "what are the ids and names of all {COLUMN2} that either have more than 3 car {COLUMN3} or produce fiats ?",
        "name dict": {
          "{TABLE0}": "countries",
          "{OP0}": "=",
          "{COLUMN1}": "countryid",
          "{COLUMN3}": "maker",
          "{TABLE1}": "car makers",
          "{VALUE2}": "0",
          "{COLUMN0}": "countryname",
          "{COLUMN2}": "country",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT car_makers.Id, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker = 'terminal' UNION SELECT car_makers.Id, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker = 'terminal'"
      },
      {
        "question": "What are the names of properties that are either houses or apartments with more than 1 room ?",
        "concise pattern": "WHERE UNION WHERE",
        "template": "what are the names of {TABLE0} that are either houses or apartments with more than 1 {COLUMN2} ?",
        "name dict": {
          "{TABLE0}": "properties",
          "{VALUE2}": "0",
          "{COLUMN0}": "property_name",
          "{COLUMN2}": "room_count",
          "{VALUE1}": "'terminal'",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{COLUMN1}": "property_type_code",
          "{VALUE3}": "0",
          "{OP1}": ">"
        },
        "query": "SELECT Properties.property_name FROM Properties WHERE Properties.property_type_code = 'terminal' UNION SELECT Properties.property_name FROM Properties WHERE Properties.room_count > 'terminal'"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} {VALUE0} GROUP BY {COLUMN1} HAVING {AGG0} ( * ) {OP1} {VALUE1}",
    [
      {
        "question": "Find the id , last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments .",
        "concise pattern": "WHERE GROUP BY HAVING ( )",
        "template": "find the id , last name and {COLUMN0} phone of the {TABLE0} who live in the {COLUMN2} of indiana or have performed more than two {TABLE1} .",
        "name dict": {
          "{OP0}": "=",
          "{COLUMN1}": "professional_id",
          "{TABLE1}": "treatments",
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "cell_number",
          "{TABLE0}": "professionals",
          "{VALUE1}": "'terminal'",
          "{OP1}": ">=",
          "{VALUE2}": "0",
          "{COLUMN2}": "state",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = 'terminal' GROUP BY Professionals.professional_id HAVING Count(*) >= 'terminal'"
      },
      {
        "question": "Which countries in europe have at least 3 car manufacturers ?",
        "concise pattern": "WHERE GROUP BY HAVING ( )",
        "template": "which {TABLE1} in europe have at least 3 car manufacturers ?",
        "name dict": {
          "{TABLE0}": "continents",
          "{OP0}": "=",
          "{COLUMN1}": "contid",
          "{COLUMN3}": "countryid",
          "{TABLE1}": "countries",
          "{VALUE2}": "0",
          "{COLUMN0}": "countryname",
          "{COLUMN2}": "continent",
          "{VALUE1}": "'terminal'",
          "{OP1}": ">=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT countries.CountryName FROM continents JOIN countries ON continents.ContId = countries.Continent WHERE continents.Continent = 'terminal' GROUP BY countries.CountryId HAVING Count(*) >= 'terminal'"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} IN ( {SELECT1} {FROM} WHERE {COLUMN1} {OP0} {VALUE0} EXCEPT {SELECT2} {FROM} WHERE {COLUMN2} {OP1} {VALUE1} )",
    [
      {
        "question": "Give the country codes for countries in which people speak langauges that are not English .",
        "concise pattern": "WHERE IN ( WHERE EXCEPT WHERE )",
        "template": "give the {TABLE0} {COLUMN1} for countries in which people speak langauges that are not english .",
        "name dict": {
          "{TABLE0}": "country",
          "{OP0}": "=",
          "{COLUMN1}": "code",
          "{COLUMN3}": "language",
          "{TABLE1}": "countrylanguage",
          "{VALUE2}": "0",
          "{COLUMN0}": "name",
          "{COLUMN2}": "countrycode",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT country.Name FROM country WHERE country.Code IN (SELECT countrylanguage.CountryCode FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'terminal')"
      },
      {
        "question": "What is the first name of every student who has a dog but does not have a cat ?",
        "concise pattern": "WHERE IN ( WHERE EXCEPT WHERE )",
        "template": "what is the first name of every {TABLE0} who has a dog but does not have a cat ?",
        "name dict": {
          "{TABLE0}": "student",
          "{OP0}": "=",
          "{COLUMN1}": "stuid",
          "{COLUMN3}": "pettype",
          "{TABLE1}": "has pet",
          "{TABLE2}": "pets",
          "{VALUE2}": "0",
          "{COLUMN0}": "fname",
          "{COLUMN2}": "petid",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT Student.Fname FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID AND Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal' EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal')"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} {VALUE0} GROUP BY {COLUMN1} ORDER BY {AGG0} ( {COLUMN2} ) {SC0} LIMIT {VALUE1}",
    [
      {
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people ?",
        "concise pattern": "WHERE GROUP BY ORDER BY ( ) LIMIT",
        "template": "what are the {COLUMN0} of countries where spanish is spoken by the largest {COLUMN3} of people ?",
        "name dict": {
          "{OP0}": "=",
          "{COLUMN1}": "countrycode",
          "{COLUMN3}": "percentage",
          "{TABLE1}": "countrylanguage",
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "code",
          "{TABLE0}": "country",
          "{VALUE1}": "0",
          "{VALUE2}": "1",
          "{COLUMN2}": "language",
          "{AGG0}": "SUM",
          "{SC0}": "DESC"
        },
        "query": "SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'terminal' GROUP BY country.Code ORDER BY Sum(countrylanguage.Percentage) Desc LIMIT 1"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} {VALUE0} GROUP BY {COLUMN1} ORDER BY {AGG0} ( * ) {SC0} LIMIT {VALUE1} INTERSECT {SELECT1} {FROM} WHERE {COLUMN2} {OP1} {VALUE2}",
    [
      {
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products ?",
        "concise pattern": "WHERE GROUP BY ORDER BY ( ) LIMIT INTERSECT WHERE",
        "template": "which {COLUMN0} has both stores with less than 3000 products and stores with more than 10000 products ?",
        "name dict": {
          "{VALUE4}": "0",
          "{OP0}": ">",
          "{COLUMN1}": "number_products",
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "district",
          "{TABLE0}": "shop",
          "{VALUE1}": "'terminal'",
          "{OP1}": "<",
          "{VALUE2}": "0",
          "{VALUE3}": "1",
          "{AGG0}": "COUNT",
          "{SC0}": "ASC"
        },
        "query": "SELECT shop.District FROM shop WHERE shop.Number_products > 'terminal' GROUP BY shop.District ORDER BY Count(*) Asc LIMIT 1 INTERSECT SELECT shop.District FROM shop WHERE shop.Number_products < 'terminal'"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} {VALUE0} GROUP BY {COLUMN1} HAVING {AGG0} ( * ) {OP1} {VALUE1} UNION {SELECT1} {FROM} GROUP BY {COLUMN2} HAVING {AGG1} ( * ) {OP2} {VALUE2}",
    [
      {
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments ? List his or her id , last name and cell phone .",
        "concise pattern": "WHERE GROUP BY HAVING ( ) UNION GROUP BY HAVING ( )",
        "template": "which {TABLE0} live in the {COLUMN2} of indiana or have done treatment on more than 2 {TABLE1} ? list his or her id , {COLUMN0} name and {COLUMN3} phone .",
        "name dict": {
          "{VALUE4}": "0",
          "{OP2}": ">=",
          "{TABLE0}": "professionals",
          "{OP0}": "=",
          "{COLUMN3}": "cell_number",
          "{COLUMN0}": "last_name",
          "{TABLE1}": "treatments",
          "{AGG0}": "COUNT",
          "{COLUMN1}": "professional_id",
          "{VALUE5}": "0",
          "{COLUMN2}": "state",
          "{VALUE1}": "'terminal'",
          "{OP1}": ">=",
          "{AGG1}": "COUNT",
          "{VALUE2}": "'terminal'",
          "{VALUE3}": "0",
          "{VALUE0}": "'terminal'"
        },
        "query": "SELECT Professionals.professional_id, Professionals.last_name, Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = 'terminal' GROUP BY Professionals.professional_id HAVING Count(*) >= 'terminal' UNION SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING Count(*) >= 'terminal'"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} {VALUE0} AND {COLUMN1} {OP1} ( {SELECT1} {FROM} WHERE {COLUMN2} {OP2} {VALUE1} )",
    [
      {
        "question": "Give the name of the country in Asia with the lowest life expectancy .",
        "concise pattern": "WHERE ( WHERE )",
        "template": "give the {COLUMN0} of the {TABLE0} in asia with the lowest life expectancy .",
        "name dict": {
          "{OP2}": "=",
          "{OP0}": "=",
          "{COLUMN1}": "region",
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "name",
          "{TABLE0}": "country",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE2}": "0",
          "{COLUMN2}": "lifeexpectancy",
          "{VALUE3}": "0",
          "{AGG0}": "MIN"
        },
        "query": "SELECT country.Name FROM country WHERE country.Region = 'terminal' AND country.LifeExpectancy = (SELECT Min(country.LifeExpectancy) FROM country WHERE country.Region = 'terminal')"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} {VALUE0} AND {COLUMN1} {OP1} ( {SELECT1} {FROM} )",
    [
      {
        "question": "For model volvo , how many cylinders does the car with the least accelerate have ?",
        "concise pattern": "WHERE ( )",
        "template": "for model volvo , how many {COLUMN0} does the car with the least {COLUMN4} have ?",
        "name dict": {
          "{OP0}": "=",
          "{COLUMN3}": "make",
          "{TABLE1}": "cars data",
          "{VALUE0}": "'terminal'",
          "{COLUMN0}": "cylinders",
          "{TABLE0}": "car names",
          "{VALUE1}": "0",
          "{OP1}": "=",
          "{COLUMN4}": "accelerate",
          "{COLUMN1}": "makeid",
          "{COLUMN2}": "id",
          "{AGG0}": "MAX"
        },
        "query": "SELECT cars_data.Cylinders FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_names.Make = 'terminal' AND cars_data.Accelerate = (SELECT Max(cars_data.Accelerate) FROM cars_data)"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} {OP0} ( {SELECT1} {FROM} GROUP BY {COLUMN1} ORDER BY {AGG0} ( * ) {SC0} LIMIT {VALUE0} )",
    [
      {
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in ?",
        "concise pattern": "WHERE ( GROUP BY ORDER BY ( ) LIMIT )",
        "template": "what is the abbreviation of the airilne has the fewest {TABLE2} and what country is it in ?",
        "name dict": {
          "{TABLE0}": "airlines",
          "{OP0}": "=",
          "{COLUMN3}": "sourceairport",
          "{TABLE1}": "airports",
          "{TABLE2}": "flights",
          "{COLUMN1}": "country",
          "{COLUMN0}": "airline",
          "{COLUMN2}": "airportcode",
          "{VALUE0}": "1",
          "{AGG0}": "COUNT",
          "{SC0}": "DESC"
        },
        "query": "SELECT airlines.Abbreviation, airlines.Airline FROM airlines JOIN airports JOIN flights WHERE airports.Country = (SELECT airports.Country FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.Country ORDER BY Count(*) Desc LIMIT 1)"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} NOT IN ( {SELECT1} {FROM} WHERE {COLUMN1} {OP0} {VALUE0} EXCEPT {SELECT2} {FROM} WHERE {COLUMN2} {OP1} {VALUE1} )",
    [
      {
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet .",
        "concise pattern": "WHERE NOT IN ( WHERE EXCEPT WHERE )",
        "template": "find the first name and {COLUMN0} of {TABLE0} who have a dog but do not have a cat as a pet .",
        "name dict": {
          "{TABLE0}": "student",
          "{OP0}": "=",
          "{COLUMN1}": "stuid",
          "{COLUMN3}": "pettype",
          "{TABLE1}": "has pet",
          "{TABLE2}": "pets",
          "{VALUE2}": "0",
          "{COLUMN0}": "age",
          "{COLUMN2}": "petid",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0"
        },
        "query": "SELECT Student.Fname, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID AND Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal' EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'terminal')"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} WHERE {COLUMN0} IN ( {SELECT1} {FROM} WHERE {COLUMN1} {OP0} {VALUE0} )",
    [
      {
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program .",
        "concise pattern": "WHERE IN ( WHERE )",
        "template": "find the {COLUMN0} name of the {TABLE1} who currently live in the {COLUMN3} of north carolina but have not registered in any degree program .",
        "name dict": {
          "{TABLE0}": "addresses",
          "{OP0}": "=",
          "{COLUMN3}": "state_province_county",
          "{TABLE1}": "students",
          "{TABLE2}": "student enrolment",
          "{COLUMN1}": "address_id",
          "{COLUMN0}": "last_name",
          "{COLUMN2}": "current_address_id",
          "{VALUE1}": "0",
          "{COLUMN4}": "student_id",
          "{VALUE0}": "'terminal'",
          "{COLUMN5}": "city"
        },
        "query": "SELECT Students.last_name FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id WHERE Addresses.state_province_county IN (SELECT Student_Enrolment.student_id FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id AND Addresses.address_id = Students.current_address_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.city = 'terminal')"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} GROUP BY {COLUMN0} HAVING {AGG0} ( * ) {OP0} {VALUE0} UNION {SELECT1} {FROM} WHERE {COLUMN1} {OP1} {VALUE1}",
    [
      {
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat ' model ?",
        "concise pattern": "GROUP BY HAVING ( ) UNION WHERE",
        "template": "what are the {COLUMN3} and names of the {COLUMN2} which have more than 3 car {COLUMN4} or produce the 'fiat ' model ?",
        "name dict": {
          "{TABLE0}": "countries",
          "{OP0}": ">",
          "{COLUMN1}": "countryid",
          "{COLUMN3}": "id",
          "{TABLE1}": "car makers",
          "{VALUE2}": "0",
          "{COLUMN0}": "countryname",
          "{COLUMN2}": "country",
          "{VALUE1}": "'terminal'",
          "{OP1}": "=",
          "{COLUMN4}": "maker",
          "{VALUE0}": "'terminal'",
          "{VALUE3}": "0",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT car_makers.Id, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Id HAVING Count(*) > 'terminal' UNION SELECT car_makers.Id, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker = 'terminal'"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} GROUP BY {COLUMN0} HAVING {AGG0} ( * ) {OP0} {VALUE0} INTERSECT {SELECT1} {FROM} GROUP BY {COLUMN1} HAVING {AGG1} ( * ) {OP1} {VALUE1}",
    [
      {
        "question": "Which professionals have done at least two types of treatments ? List the professional id and cell phone .",
        "concise pattern": "GROUP BY HAVING ( ) INTERSECT GROUP BY HAVING ( )",
        "template": "which {TABLE0} have done at least two types of {TABLE1} ? list the {COLUMN0} id and cell phone .",
        "name dict": {
          "{VALUE2}": "0",
          "{COLUMN0}": "professional_id",
          "{TABLE0}": "professionals",
          "{VALUE1}": "'terminal'",
          "{OP0}": ">=",
          "{VALUE0}": "'terminal'",
          "{OP1}": ">=",
          "{VALUE3}": "0",
          "{AGG1}": "COUNT",
          "{TABLE1}": "treatments",
          "{AGG0}": "COUNT"
        },
        "query": "SELECT Professionals.professional_id FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING Count(*) >= 'terminal' INTERSECT SELECT Professionals.professional_id FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING Count(*) >= 'terminal'"
      }
    ]
  ],
  [
    "{SELECT0} {FROM} GROUP BY {COLUMN0} HAVING {AGG0} ( * ) {OP0} {VALUE0} INTERSECT {SELECT1} {FROM}",
    [
      {
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else .",
        "concise pattern": "GROUP BY HAVING ( ) INTERSECT",
        "template": "show the {COLUMN0} of high schoolers who have friends and are also {COLUMN1} by someone else .",
        "name dict": {
          "{TABLE0}": "high schooler",
          "{COLUMN1}": "liked_id",
          "{COLUMN0}": "id",
          "{COLUMN2}": "student_id",
          "{VALUE1}": "0",
          "{OP0}": "=",
          "{VALUE0}": "'terminal'",
          "{AGG0}": "COUNT",
          "{TABLE1}": "likes"
        },
        "query": "SELECT Highschooler.ID FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.ID HAVING Count(*) = 'terminal' INTERSECT SELECT Likes.student_id FROM Likes"
      }
    ]
  ]
]